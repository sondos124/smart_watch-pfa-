
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009f60  08009f60  00019f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000958  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b2c  20000b2c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e583  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002109  00000000  00000000  0002e7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e20  00000000  00000000  000308d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b09  00000000  00000000  000316f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c572  00000000  00000000  00032201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000043ec  00000000  00000000  0003e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005460  00000000  00000000  00042b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00047fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f48 	.word	0x08009f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009f48 	.word	0x08009f48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <delay>:
/* USER CODE BEGIN 0 */
#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1
//#define DS18B20_PIN GPIO_PIN_1
void delay (uint16_t time)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <delay+0x30>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8001002:	bf00      	nop
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <delay+0x30>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3f9      	bcc.n	8001004 <delay+0x14>
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000894 	.word	0x20000894

08001024 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f001 fff0 	bl	8003038 <HAL_GPIO_Init>
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f001 ffd2 	bl	8003038 <HAL_GPIO_Init>
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <DS18B20_Start>:
uint8_t DS18B20_Start (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80010a6:	2102      	movs	r1, #2
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <DS18B20_Start+0x5c>)
 80010aa:	f7ff ffbb 	bl	8001024 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <DS18B20_Start+0x5c>)
 80010b4:	f002 f974 	bl	80033a0 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80010b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010bc:	f7ff ff98 	bl	8000ff0 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010c0:	2102      	movs	r1, #2
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <DS18B20_Start+0x5c>)
 80010c4:	f7ff ffcc 	bl	8001060 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 80010c8:	2050      	movs	r0, #80	; 0x50
 80010ca:	f7ff ff91 	bl	8000ff0 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80010ce:	2102      	movs	r1, #2
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <DS18B20_Start+0x5c>)
 80010d2:	f002 f94d 	bl	8003370 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <DS18B20_Start+0x46>
 80010dc:	2301      	movs	r3, #1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	e001      	b.n	80010e6 <DS18B20_Start+0x4a>
	else Response = -1;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 80010e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ea:	f7ff ff81 	bl	8000ff0 <delay>

	return Response;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020000 	.word	0x40020000

080010fc <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001106:	2102      	movs	r1, #2
 8001108:	481e      	ldr	r0, [pc, #120]	; (8001184 <DS18B20_Write+0x88>)
 800110a:	f7ff ff8b 	bl	8001024 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e02e      	b.n	8001172 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	fa42 f303 	asr.w	r3, r2, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001124:	2102      	movs	r1, #2
 8001126:	4817      	ldr	r0, [pc, #92]	; (8001184 <DS18B20_Write+0x88>)
 8001128:	f7ff ff7c 	bl	8001024 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	4814      	ldr	r0, [pc, #80]	; (8001184 <DS18B20_Write+0x88>)
 8001132:	f002 f935 	bl	80033a0 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ff5a 	bl	8000ff0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800113c:	2102      	movs	r1, #2
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <DS18B20_Write+0x88>)
 8001140:	f7ff ff8e 	bl	8001060 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8001144:	2032      	movs	r0, #50	; 0x32
 8001146:	f7ff ff53 	bl	8000ff0 <delay>
 800114a:	e00f      	b.n	800116c <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800114c:	2102      	movs	r1, #2
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <DS18B20_Write+0x88>)
 8001150:	f7ff ff68 	bl	8001024 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001154:	2200      	movs	r2, #0
 8001156:	2102      	movs	r1, #2
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <DS18B20_Write+0x88>)
 800115a:	f002 f921 	bl	80033a0 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f7ff ff46 	bl	8000ff0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001164:	2102      	movs	r1, #2
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <DS18B20_Write+0x88>)
 8001168:	f7ff ff7a 	bl	8001060 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b07      	cmp	r3, #7
 8001176:	ddcd      	ble.n	8001114 <DS18B20_Write+0x18>
		}
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020000 	.word	0x40020000

08001188 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001192:	2102      	movs	r1, #2
 8001194:	481a      	ldr	r0, [pc, #104]	; (8001200 <DS18B20_Read+0x78>)
 8001196:	f7ff ff63 	bl	8001060 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	e026      	b.n	80011ee <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80011a0:	2102      	movs	r1, #2
 80011a2:	4817      	ldr	r0, [pc, #92]	; (8001200 <DS18B20_Read+0x78>)
 80011a4:	f7ff ff3e 	bl	8001024 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <DS18B20_Read+0x78>)
 80011ae:	f002 f8f7 	bl	80033a0 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff1c 	bl	8000ff0 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011b8:	2102      	movs	r1, #2
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <DS18B20_Read+0x78>)
 80011bc:	f7ff ff50 	bl	8001060 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80011c0:	2102      	movs	r1, #2
 80011c2:	480f      	ldr	r0, [pc, #60]	; (8001200 <DS18B20_Read+0x78>)
 80011c4:	f002 f8d4 	bl	8003370 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80011ce:	2201      	movs	r2, #1
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 80011e2:	2032      	movs	r0, #50	; 0x32
 80011e4:	f7ff ff04 	bl	8000ff0 <delay>
	for (int i=0;i<8;i++)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	ddd5      	ble.n	80011a0 <DS18B20_Read+0x18>
	}
	return value;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	Flag =1 ;
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_UART_RxCpltCallback+0x1c>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000834 	.word	0x20000834

08001224 <get_location>:


void get_location(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
	if (Flag==1){
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <get_location+0xb4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d14e      	bne.n	80012d0 <get_location+0xac>
		Msgindex =0;
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <get_location+0xb8>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
		strcpy( TXdata,(char *)(RXdata));
 8001238:	4929      	ldr	r1, [pc, #164]	; (80012e0 <get_location+0xbc>)
 800123a:	482a      	ldr	r0, [pc, #168]	; (80012e4 <get_location+0xc0>)
 800123c:	f004 fdcb 	bl	8005dd6 <strcpy>
		ptr=strstr (TXdata,"GPRMC");
 8001240:	4929      	ldr	r1, [pc, #164]	; (80012e8 <get_location+0xc4>)
 8001242:	4828      	ldr	r0, [pc, #160]	; (80012e4 <get_location+0xc0>)
 8001244:	f004 fd39 	bl	8005cba <strstr>
 8001248:	4603      	mov	r3, r0
 800124a:	4a28      	ldr	r2, [pc, #160]	; (80012ec <get_location+0xc8>)
 800124c:	6013      	str	r3, [r2, #0]
		if (*ptr=='G'){
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <get_location+0xc8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b47      	cmp	r3, #71	; 0x47
 8001256:	d13b      	bne.n	80012d0 <get_location+0xac>
			while(1)
			{
				GPS_Payyload[Msgindex]=*ptr;
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <get_location+0xc8>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <get_location+0xb8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	7811      	ldrb	r1, [r2, #0]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <get_location+0xcc>)
 8001264:	54d1      	strb	r1, [r2, r3]
				Msgindex++;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <get_location+0xb8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <get_location+0xb8>)
 800126e:	6013      	str	r3, [r2, #0]
				*ptr=*(ptr+Msgindex);
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <get_location+0xc8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <get_location+0xb8>)
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	441a      	add	r2, r3
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <get_location+0xc8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	7812      	ldrb	r2, [r2, #0]
 8001280:	701a      	strb	r2, [r3, #0]
				if(*ptr == '\n')
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <get_location+0xc8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b0a      	cmp	r3, #10
 800128a:	d1e5      	bne.n	8001258 <get_location+0x34>
				{GPS_Payyload[Msgindex]='\0';
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <get_location+0xb8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <get_location+0xcc>)
 8001292:	2100      	movs	r1, #0
 8001294:	54d1      	strb	r1, [r2, r3]
					break;
 8001296:	bf00      	nop
				}
			}
	scanf(GPS_Payyload,"GPRMC,%f,A,%f,N,", &Time, &latitude,&longitude);
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <get_location+0xd0>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <get_location+0xd4>)
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <get_location+0xd8>)
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <get_location+0xdc>)
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <get_location+0xcc>)
 80012a4:	f004 fc58 	bl	8005b58 <iscanf>
	Format_data(Time,latitude,longitude);
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <get_location+0xd8>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <get_location+0xd4>)
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <get_location+0xd0>)
 80012b6:	edd3 6a00 	vldr	s13, [r3]
 80012ba:	eeb0 1a66 	vmov.f32	s2, s13
 80012be:	eef0 0a47 	vmov.f32	s1, s14
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	f000 f81d 	bl	8001304 <Format_data>
   HAL_Delay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 fe0e 	bl	8001eec <HAL_Delay>
		}
	}
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000834 	.word	0x20000834
 80012dc:	20000838 	.word	0x20000838
 80012e0:	200001f0 	.word	0x200001f0
 80012e4:	200004e0 	.word	0x200004e0
 80012e8:	08009f60 	.word	0x08009f60
 80012ec:	2000083c 	.word	0x2000083c
 80012f0:	200007d0 	.word	0x200007d0
 80012f4:	20000848 	.word	0x20000848
 80012f8:	20000844 	.word	0x20000844
 80012fc:	20000840 	.word	0x20000840
 8001300:	08009f68 	.word	0x08009f68

08001304 <Format_data>:
void Format_data(float tim, float lat, float Longg)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b0a6      	sub	sp, #152	; 0x98
 8001308:	af06      	add	r7, sp, #24
 800130a:	ed87 0a03 	vstr	s0, [r7, #12]
 800130e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001312:	ed87 1a01 	vstr	s2, [r7, #4]
    char Data[100];
    int hours = (int)Time/ 10000;
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <Format_data+0xf0>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 1a90 	vmov	r1, s15
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <Format_data+0xf4>)
 8001326:	fb83 2301 	smull	r2, r3, r3, r1
 800132a:	131a      	asrs	r2, r3, #12
 800132c:	17cb      	asrs	r3, r1, #31
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	67fb      	str	r3, [r7, #124]	; 0x7c
    int MIN = (int)(Time - (hours * 10000)) / 100;
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <Format_data+0xf0>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800133a:	f242 7210 	movw	r2, #10000	; 0x2710
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 1a90 	vmov	r1, s15
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <Format_data+0xf8>)
 8001358:	fb83 2301 	smull	r2, r3, r3, r1
 800135c:	115a      	asrs	r2, r3, #5
 800135e:	17cb      	asrs	r3, r1, #31
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	67bb      	str	r3, [r7, #120]	; 0x78
    int sec = (int)(Time - ((hours * 10000) + (MIN * 100)));
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <Format_data+0xf0>)
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800136c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001370:	fb03 f202 	mul.w	r2, r3, r2
 8001374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001376:	2164      	movs	r1, #100	; 0x64
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	677b      	str	r3, [r7, #116]	; 0x74
    sprintf(Data, " \r\n time = %d:%d:%d lat = %f, Longg = %f", hours, MIN, sec, lat, Longg);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4604      	mov	r4, r0
 800139c:	460d      	mov	r5, r1
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f107 0010 	add.w	r0, r7, #16
 80013ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013bc:	4910      	ldr	r1, [pc, #64]	; (8001400 <Format_data+0xfc>)
 80013be:	f004 fc11 	bl	8005be4 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7fe ff52 	bl	8000270 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f107 0110 	add.w	r1, r7, #16
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <Format_data+0x100>)
 80013da:	f002 fec3 	bl	8004164 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\r\n", 3, HAL_MAX_DELAY);
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2203      	movs	r2, #3
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <Format_data+0x104>)
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <Format_data+0x100>)
 80013e8:	f002 febc 	bl	8004164 <HAL_UART_Transmit>
}
 80013ec:	bf00      	nop
 80013ee:	3780      	adds	r7, #128	; 0x80
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}
 80013f4:	20000840 	.word	0x20000840
 80013f8:	68db8bad 	.word	0x68db8bad
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	08009f7c 	.word	0x08009f7c
 8001404:	200008dc 	.word	0x200008dc
 8001408:	08009fa8 	.word	0x08009fa8

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b09e      	sub	sp, #120	; 0x78
 8001410:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char uart_buf[50];
	int uart_buf_len;
  /* USER CODE END 1 */
	 uint32_t sensor_data = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	66fb      	str	r3, [r7, #108]	; 0x6c
	   char uart_tx_buffer[50];
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f000 fcf7 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f8c9 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fa2b 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 8001422:	f000 fa09 	bl	8001838 <MX_DMA_Init>
  MX_TIM6_Init();
 8001426:	f000 f97d 	bl	8001724 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800142a:	f000 f9db 	bl	80017e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800142e:	f000 f927 	bl	8001680 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001432:	f000 f9ad 	bl	8001790 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

   HAL_TIM_Base_Start(&htim6);
 8001436:	4851      	ldr	r0, [pc, #324]	; (800157c <main+0x170>)
 8001438:	f002 fcb4 	bl	8003da4 <HAL_TIM_Base_Start>
   HAL_UART_Receive_DMA( &huart1 ,(uint8_t*)RXdata,700);
 800143c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001440:	494f      	ldr	r1, [pc, #316]	; (8001580 <main+0x174>)
 8001442:	4850      	ldr	r0, [pc, #320]	; (8001584 <main+0x178>)
 8001444:	f002 ff19 	bl	800427a <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  ///// code temperature sensor ds18b20
		  Presence = DS18B20_Start ();
 8001448:	f7ff fe28 	bl	800109c <DS18B20_Start>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <main+0x17c>)
 8001452:	701a      	strb	r2, [r3, #0]
		  HAL_Delay (1);
 8001454:	2001      	movs	r0, #1
 8001456:	f000 fd49 	bl	8001eec <HAL_Delay>
     	  DS18B20_Write (0xCC);  // skip ROM
 800145a:	20cc      	movs	r0, #204	; 0xcc
 800145c:	f7ff fe4e 	bl	80010fc <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 8001460:	2044      	movs	r0, #68	; 0x44
 8001462:	f7ff fe4b 	bl	80010fc <DS18B20_Write>
		  HAL_Delay (800);
 8001466:	f44f 7048 	mov.w	r0, #800	; 0x320
 800146a:	f000 fd3f 	bl	8001eec <HAL_Delay>

		  Presence = DS18B20_Start ();
 800146e:	f7ff fe15 	bl	800109c <DS18B20_Start>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <main+0x17c>)
 8001478:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f000 fd36 	bl	8001eec <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 8001480:	20cc      	movs	r0, #204	; 0xcc
 8001482:	f7ff fe3b 	bl	80010fc <DS18B20_Write>
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 8001486:	20be      	movs	r0, #190	; 0xbe
 8001488:	f7ff fe38 	bl	80010fc <DS18B20_Write>

		  Temp_byte1 = DS18B20_Read();
 800148c:	f7ff fe7c 	bl	8001188 <DS18B20_Read>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <main+0x180>)
 8001496:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 8001498:	f7ff fe76 	bl	8001188 <DS18B20_Read>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <main+0x184>)
 80014a2:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <main+0x184>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <main+0x180>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <main+0x188>)
 80014ba:	801a      	strh	r2, [r3, #0]
		  Temperature = (float)TEMP/16.0 ;
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <main+0x188>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80014cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <main+0x18c>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
		  uart_buf_len = snprintf(uart_buf, sizeof(uart_buf), "Temperature: %.2f C\r\n", Temperature);
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x18c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f834 	bl	8000548 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80014e8:	e9cd 2300 	strd	r2, r3, [sp]
 80014ec:	4a2b      	ldr	r2, [pc, #172]	; (800159c <main+0x190>)
 80014ee:	2132      	movs	r1, #50	; 0x32
 80014f0:	f004 fb44 	bl	8005b7c <sniprintf>
 80014f4:	66b8      	str	r0, [r7, #104]	; 0x68
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80014f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <main+0x194>)
 8001504:	f002 fe2e 	bl	8004164 <HAL_UART_Transmit>

		  HAL_Delay(1000);
 8001508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150c:	f000 fcee 	bl	8001eec <HAL_Delay>


		  // battemenent cardiaque sensor
		  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001510:	4824      	ldr	r0, [pc, #144]	; (80015a4 <main+0x198>)
 8001512:	f000 fd53 	bl	8001fbc <HAL_ADC_Start>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <main+0x114>
		      {
		        Error_Handler();
 800151c:	f000 f9fc 	bl	8001918 <Error_Handler>
		      }
		      if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001520:	2164      	movs	r1, #100	; 0x64
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <main+0x198>)
 8001524:	f000 fe4f 	bl	80021c6 <HAL_ADC_PollForConversion>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <main+0x126>
		      {
		        Error_Handler();
 800152e:	f000 f9f3 	bl	8001918 <Error_Handler>
		      }
		      sensor_data = HAL_ADC_GetValue(&hadc1)/10;
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <main+0x198>)
 8001534:	f000 fed2 	bl	80022dc <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <main+0x19c>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	66fb      	str	r3, [r7, #108]	; 0x6c

		      /* Format data to send over USART2 */
		      sprintf(uart_tx_buffer, "{\"the pulse data\": %lu}\r\n", sensor_data);
 8001544:	463b      	mov	r3, r7
 8001546:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <main+0x1a0>)
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fb4a 	bl	8005be4 <siprintf>

		      /* Transmit data over USART2 */
		      HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 8001550:	463b      	mov	r3, r7
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fe8c 	bl	8000270 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	b29a      	uxth	r2, r3
 800155c:	4639      	mov	r1, r7
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <main+0x194>)
 8001564:	f002 fdfe 	bl	8004164 <HAL_UART_Transmit>

		      HAL_ADC_Stop(&hadc1);
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <main+0x198>)
 800156a:	f000 fdf9 	bl	8002160 <HAL_ADC_Stop>

		      HAL_Delay(1000); // Adjust this delay according to your requirements
 800156e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001572:	f000 fcbb 	bl	8001eec <HAL_Delay>

             /// module gps
		       get_location();
 8001576:	f7ff fe55 	bl	8001224 <get_location>
		  Presence = DS18B20_Start ();
 800157a:	e765      	b.n	8001448 <main+0x3c>
 800157c:	20000894 	.word	0x20000894
 8001580:	200001f0 	.word	0x200001f0
 8001584:	200008dc 	.word	0x200008dc
 8001588:	200009d4 	.word	0x200009d4
 800158c:	200009cc 	.word	0x200009cc
 8001590:	200009cd 	.word	0x200009cd
 8001594:	200009ce 	.word	0x200009ce
 8001598:	200009d0 	.word	0x200009d0
 800159c:	08009fac 	.word	0x08009fac
 80015a0:	20000924 	.word	0x20000924
 80015a4:	2000084c 	.word	0x2000084c
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	08009fc4 	.word	0x08009fc4

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	; 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	; 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fb73 	bl	8005caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <SystemClock_Config+0xc8>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <SystemClock_Config+0xc8>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <SystemClock_Config+0xcc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <SystemClock_Config+0xcc>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001620:	2304      	movs	r3, #4
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001624:	2332      	movs	r3, #50	; 0x32
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fecd 	bl	80033d4 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001640:	f000 f96a 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f002 f92f 	bl	80038c4 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800166c:	f000 f954 	bl	8001918 <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3750      	adds	r7, #80	; 0x50
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_ADC1_Init+0x98>)
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <MX_ADC1_Init+0x9c>)
 8001696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_ADC1_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_ADC1_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_ADC1_Init+0x98>)
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_ADC1_Init+0xa0>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_ADC1_Init+0x98>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_ADC1_Init+0x98>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_ADC1_Init+0x98>)
 80016e0:	f000 fc28 	bl	8001f34 <HAL_ADC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f915 	bl	8001918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016ee:	2308      	movs	r3, #8
 80016f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_ADC1_Init+0x98>)
 8001700:	f000 fdfa 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800170a:	f000 f905 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000084c 	.word	0x2000084c
 800171c:	40012000 	.word	0x40012000
 8001720:	0f000001 	.word	0x0f000001

08001724 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_TIM6_Init+0x64>)
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <MX_TIM6_Init+0x68>)
 8001736:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <MX_TIM6_Init+0x64>)
 800173a:	2231      	movs	r2, #49	; 0x31
 800173c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_TIM6_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <MX_TIM6_Init+0x64>)
 8001746:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800174a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_TIM6_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM6_Init+0x64>)
 8001754:	f002 fad6 	bl	8003d04 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800175e:	f000 f8db 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM6_Init+0x64>)
 8001770:	f002 fc2c 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800177a:	f000 f8cd 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000894 	.word	0x20000894
 800178c:	40001000 	.word	0x40001000

08001790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_USART1_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 800179c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017c8:	f002 fc7c 	bl	80040c4 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f000 f8a1 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200008dc 	.word	0x200008dc
 80017e0:	40011000 	.word	0x40011000

080017e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART2_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART2_UART_Init+0x4c>)
 800181c:	f002 fc52 	bl	80040c4 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f000 f877 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000924 	.word	0x20000924
 8001834:	40004400 	.word	0x40004400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_DMA_Init+0x3c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <MX_DMA_Init+0x3c>)
 8001848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_DMA_Init+0x3c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	203a      	movs	r0, #58	; 0x3a
 8001860:	f001 f843 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001864:	203a      	movs	r0, #58	; 0x3a
 8001866:	f001 f85c 	bl	8002922 <HAL_NVIC_EnableIRQ>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_GPIO_Init+0x98>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <MX_GPIO_Init+0x98>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_GPIO_Init+0x98>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_GPIO_Init+0x98>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <MX_GPIO_Init+0x98>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_GPIO_Init+0x98>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_GPIO_Init+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <MX_GPIO_Init+0x98>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_GPIO_Init+0x98>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2102      	movs	r1, #2
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <MX_GPIO_Init+0x9c>)
 80018e8:	f001 fd5a 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_GPIO_Init+0x9c>)
 8001904:	f001 fb98 	bl	8003038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_ADC_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d127      	bne.n	80019e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_ADC_MspInit+0x80>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d2:	2303      	movs	r3, #3
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_ADC_MspInit+0x84>)
 80019e2:	f001 fb29 	bl	8003038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40012000 	.word	0x40012000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40001000 	.word	0x40001000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_UART_MspInit+0x144>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d15b      	bne.n	8001b1a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aac:	2307      	movs	r3, #7
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4835      	ldr	r0, [pc, #212]	; (8001b8c <HAL_UART_MspInit+0x14c>)
 8001ab8:	f001 fabe 	bl	8003038 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001abe:	4a35      	ldr	r2, [pc, #212]	; (8001b94 <HAL_UART_MspInit+0x154>)
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001ac4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001adc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001afc:	4824      	ldr	r0, [pc, #144]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001afe:	f000 ff2b 	bl	8002958 <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b08:	f7ff ff06 	bl	8001918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_UART_MspInit+0x150>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b18:	e030      	b.n	8001b7c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_UART_MspInit+0x158>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d12b      	bne.n	8001b7c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_UART_MspInit+0x148>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <HAL_UART_MspInit+0x14c>)
 8001b78:	f001 fa5e 	bl	8003038 <HAL_GPIO_Init>
}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	2000096c 	.word	0x2000096c
 8001b94:	40026440 	.word	0x40026440
 8001b98:	40004400 	.word	0x40004400

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f960 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA2_Stream2_IRQHandler+0x10>)
 8001bf6:	f000 ffb5 	bl	8002b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000096c 	.word	0x2000096c

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f004 f8ad 	bl	8005d7c <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
  }
  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f004 f812 	bl	8005d7c <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20020000 	.word	0x20020000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	200009d8 	.word	0x200009d8
 8001d8c:	20000b30 	.word	0x20000b30

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db8:	f7ff ffea 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f003 ffd1 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff fb11 	bl	800140c <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001df8:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 8001dfc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e00:	20000b2c 	.word	0x20000b2c

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 fd4f 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fd72 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fd67 	bl	800293e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 fd2f 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	200009dc 	.word	0x200009dc

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200009dc 	.word	0x200009dc

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e033      	b.n	8001fb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fd0e 	bl	8001974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fad8 	bl	800253c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa2:	e001      	b.n	8001fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Start+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0b2      	b.n	800213c <HAL_ADC_Start+0x180>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d018      	beq.n	800201e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_ADC_Start+0x18c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_ADC_Start+0x190>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9a      	lsrs	r2, r3, #18
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d17a      	bne.n	8002122 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d106      	bne.n	800207a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f023 0206 	bic.w	r2, r3, #6
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
 8002078:	e002      	b.n	8002080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_ADC_Start+0x194>)
 800208a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002094:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12a      	bne.n	80020f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_ADC_Start+0x198>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d015      	beq.n	80020d8 <HAL_ADC_Start+0x11c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_ADC_Start+0x19c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_Start+0x106>
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_ADC_Start+0x194>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_ADC_Start+0x1a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d136      	bne.n	800213a <HAL_ADC_Start+0x17e>
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_ADC_Start+0x194>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d130      	bne.n	800213a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d129      	bne.n	800213a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	e020      	b.n	800213a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_ADC_Start+0x198>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11b      	bne.n	800213a <HAL_ADC_Start+0x17e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d114      	bne.n	800213a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e00b      	b.n	800213a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000
 800214c:	431bde83 	.word	0x431bde83
 8002150:	40012300 	.word	0x40012300
 8002154:	40012000 	.word	0x40012000
 8002158:	40012100 	.word	0x40012100
 800215c:	40012200 	.word	0x40012200

08002160 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Stop+0x16>
 8002172:	2302      	movs	r3, #2
 8002174:	e021      	b.n	80021ba <HAL_ADC_Stop+0x5a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e2:	d113      	bne.n	800220c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f2:	d10b      	bne.n	800220c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e063      	b.n	80022d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800220c:	f7ff fe62 	bl	8001ed4 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002212:	e021      	b.n	8002258 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d01d      	beq.n	8002258 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_ADC_PollForConversion+0x6c>
 8002222:	f7ff fe57 	bl	8001ed4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d212      	bcs.n	8002258 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	d00b      	beq.n	8002258 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e03d      	b.n	80022d4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d1d6      	bne.n	8002214 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0212 	mvn.w	r2, #18
 800226e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d123      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11f      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d111      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e105      	b.n	8002520 <HAL_ADC_ConfigChannel+0x228>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d925      	bls.n	8002370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68d9      	ldr	r1, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68d9      	ldr	r1, [r3, #12]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	4603      	mov	r3, r0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4403      	add	r3, r0
 8002362:	3b1e      	subs	r3, #30
 8002364:	409a      	lsls	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	e022      	b.n	80023b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	2207      	movs	r2, #7
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4403      	add	r3, r0
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d824      	bhi.n	8002408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b05      	subs	r3, #5
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b05      	subs	r3, #5
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
 8002406:	e04c      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d824      	bhi.n	800245a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b23      	subs	r3, #35	; 0x23
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	; 0x23
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
 8002458:	e023      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b41      	subs	r3, #65	; 0x41
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	; 0x41
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_ADC_ConfigChannel+0x234>)
 80024a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <HAL_ADC_ConfigChannel+0x238>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d109      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1cc>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_ADC_ConfigChannel+0x238>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d123      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d003      	beq.n	80024de <HAL_ADC_ConfigChannel+0x1e6>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b11      	cmp	r3, #17
 80024dc:	d11b      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d111      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_ADC_ConfigChannel+0x23c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_ADC_ConfigChannel+0x240>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9a      	lsrs	r2, r3, #18
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012300 	.word	0x40012300
 8002530:	40012000 	.word	0x40012000
 8002534:	20000000 	.word	0x20000000
 8002538:	431bde83 	.word	0x431bde83

0800253c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <ADC_Init+0x1f0>)
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <ADC_Init+0x1f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e00f      	b.n	800263a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002638:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0202 	bic.w	r2, r2, #2
 8002648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e1b      	ldrb	r3, [r3, #24]
 8002654:	005a      	lsls	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002676:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	3b01      	subs	r3, #1
 8002694:	035a      	lsls	r2, r3, #13
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	e007      	b.n	80026b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	051a      	lsls	r2, r3, #20
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026f2:	025a      	lsls	r2, r3, #9
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	029a      	lsls	r2, r3, #10
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40012300 	.word	0x40012300
 8002730:	0f000001 	.word	0x0f000001

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f7ff ff8e 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff29 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff3e 	bl	800277c <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff8e 	bl	8002828 <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5d 	bl	80027d4 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff31 	bl	8002798 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff fab6 	bl	8001ed4 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e099      	b.n	8002aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	e00f      	b.n	80029b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002996:	f7ff fa9d 	bl	8001ed4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d908      	bls.n	80029b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e078      	b.n	8002aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_DMA_Init+0x158>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d117      	bne.n	8002a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa6f 	bl	8002f40 <DMA_CheckFifoParam>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a76:	2301      	movs	r3, #1
 8002a78:	e016      	b.n	8002aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa26 	bl	8002ed4 <DMA_CalcBaseAndBitshift>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	f010803f 	.word	0xf010803f

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Start_IT+0x26>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e040      	b.n	8002b5c <HAL_DMA_Start_IT+0xa8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12f      	bne.n	8002b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9b8 	bl	8002e78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	223f      	movs	r2, #63	; 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0216 	orr.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e005      	b.n	8002b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_DMA_IRQHandler+0x248>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8e      	ldr	r2, [pc, #568]	; (8002db0 <HAL_DMA_IRQHandler+0x24c>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2208      	movs	r2, #8
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2204      	movs	r2, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2210      	movs	r2, #16
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d043      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d03c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2210      	movs	r2, #16
 8002c60:	409a      	lsls	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	e01f      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0208 	bic.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2220      	movs	r2, #32
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 808f 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8087 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d136      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0216 	bic.w	r2, r2, #22
 8002d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x1da>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	223f      	movs	r2, #63	; 0x3f
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d07e      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
        }
        return;
 8002d7a:	e079      	b.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	e02c      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000
 8002db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e01e      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0210 	bic.w	r2, r2, #16
 8002de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d032      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d307      	bcc.n	8002e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f2      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x2cc>
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e70:	bf00      	nop
    }
  }
}
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d108      	bne.n	8002eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eb6:	e007      	b.n	8002ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3b10      	subs	r3, #16
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <DMA_CalcBaseAndBitshift+0x64>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <DMA_CalcBaseAndBitshift+0x68>)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d909      	bls.n	8002f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	; 0x58
 8002f14:	e007      	b.n	8002f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	aaaaaaab 	.word	0xaaaaaaab
 8002f3c:	0800a004 	.word	0x0800a004

08002f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11f      	bne.n	8002f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d856      	bhi.n	800300e <DMA_CheckFifoParam+0xce>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x28>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f8b 	.word	0x08002f8b
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	0800300f 	.word	0x0800300f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d046      	beq.n	8003012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f88:	e043      	b.n	8003012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f92:	d140      	bne.n	8003016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f98:	e03d      	b.n	8003016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	d121      	bne.n	8002fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d837      	bhi.n	800301a <DMA_CheckFifoParam+0xda>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <DMA_CheckFifoParam+0x70>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fc7 	.word	0x08002fc7
 8002fb8:	08002fc1 	.word	0x08002fc1
 8002fbc:	08002fd9 	.word	0x08002fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc4:	e030      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d025      	beq.n	800301e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd6:	e022      	b.n	800301e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe0:	d11f      	bne.n	8003022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fe6:	e01c      	b.n	8003022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d903      	bls.n	8002ff6 <DMA_CheckFifoParam+0xb6>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d003      	beq.n	8002ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ff4:	e018      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8002ffa:	e015      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e00b      	b.n	8003026 <DMA_CheckFifoParam+0xe6>
      break;
 800300e:	bf00      	nop
 8003010:	e00a      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e008      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e006      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 800301a:	bf00      	nop
 800301c:	e004      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
 8003020:	e002      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;   
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
    }
  } 
  
  return status; 
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e16b      	b.n	800332c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	f040 815a 	bne.w	8003326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d005      	beq.n	800308a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	2b02      	cmp	r3, #2
 8003088:	d130      	bne.n	80030ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d017      	beq.n	8003128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d123      	bne.n	800317c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80b4 	beq.w	8003326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b60      	ldr	r3, [pc, #384]	; (8003344 <HAL_GPIO_Init+0x30c>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a5f      	ldr	r2, [pc, #380]	; (8003344 <HAL_GPIO_Init+0x30c>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_GPIO_Init+0x30c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031da:	4a5b      	ldr	r2, [pc, #364]	; (8003348 <HAL_GPIO_Init+0x310>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_GPIO_Init+0x314>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	; (8003350 <HAL_GPIO_Init+0x318>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d025      	beq.n	800325a <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_GPIO_Init+0x31c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x320>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x21a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_GPIO_Init+0x324>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x216>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_GPIO_Init+0x328>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x212>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4c      	ldr	r2, [pc, #304]	; (8003364 <HAL_GPIO_Init+0x32c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x20e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <HAL_GPIO_Init+0x330>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x20a>
 800323e:	2307      	movs	r3, #7
 8003240:	e00e      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003242:	2308      	movs	r3, #8
 8003244:	e00c      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003246:	2306      	movs	r3, #6
 8003248:	e00a      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800324a:	2305      	movs	r3, #5
 800324c:	e008      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800324e:	2304      	movs	r3, #4
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003252:	2303      	movs	r3, #3
 8003254:	e004      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003256:	2302      	movs	r3, #2
 8003258:	e002      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800325e:	2300      	movs	r3, #0
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f002 0203 	and.w	r2, r2, #3
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	4093      	lsls	r3, r2
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003270:	4935      	ldr	r1, [pc, #212]	; (8003348 <HAL_GPIO_Init+0x310>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_GPIO_Init+0x334>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a32      	ldr	r2, [pc, #200]	; (800336c <HAL_GPIO_Init+0x334>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_GPIO_Init+0x334>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <HAL_GPIO_Init+0x334>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_GPIO_Init+0x334>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f6:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_GPIO_Init+0x334>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_GPIO_Init+0x334>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003320:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_GPIO_Init+0x334>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3301      	adds	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	f67f ae90 	bls.w	8003054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40013800 	.word	0x40013800
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400
 8003354:	40020800 	.word	0x40020800
 8003358:	40020c00 	.word	0x40020c00
 800335c:	40021000 	.word	0x40021000
 8003360:	40021400 	.word	0x40021400
 8003364:	40021800 	.word	0x40021800
 8003368:	40021c00 	.word	0x40021c00
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e001      	b.n	8003392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
 80033ac:	4613      	mov	r3, r2
 80033ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b0:	787b      	ldrb	r3, [r7, #1]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033bc:	e003      	b.n	80033c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e267      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d075      	beq.n	80034de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f2:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00c      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fe:	4b85      	ldr	r3, [pc, #532]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003406:	2b08      	cmp	r3, #8
 8003408:	d112      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b82      	ldr	r3, [pc, #520]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e242      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x74>
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a75      	ldr	r2, [pc, #468]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6f      	ldr	r2, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6c      	ldr	r2, [pc, #432]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a68      	ldr	r2, [pc, #416]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fd22 	bl	8001ed4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fd1e 	bl	8001ed4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e207      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xc0>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fd0e 	bl	8001ed4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fd0a 	bl	8001ed4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1f3      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b44      	ldr	r3, [pc, #272]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c7      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4937      	ldr	r1, [pc, #220]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe fcc3 	bl	8001ed4 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fcbf 	bl	8001ed4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a8      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4925      	ldr	r1, [pc, #148]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fca2 	bl	8001ed4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe fc9e 	bl	8001ed4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e187      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d036      	beq.n	800362c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCC_OscConfig+0x248>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fc82 	bl	8001ed4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe fc7e 	bl	8001ed4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e167      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x200>
 80035f2:	e01b      	b.n	800362c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x248>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe fc6b 	bl	8001ed4 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	e00e      	b.n	8003620 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003602:	f7fe fc67 	bl	8001ed4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d907      	bls.n	8003620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e150      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003614:	40023800 	.word	0x40023800
 8003618:	42470000 	.word	0x42470000
 800361c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ea      	bne.n	8003602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8097 	beq.w	8003768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363e:	4b81      	ldr	r3, [pc, #516]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a7c      	ldr	r2, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b77      	ldr	r3, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b74      	ldr	r3, [pc, #464]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe fc27 	bl	8001ed4 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe fc23 	bl	8001ed4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e10c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x2ea>
 80036b0:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x30c>
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a5e      	ldr	r2, [pc, #376]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036e0:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a57      	ldr	r2, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a54      	ldr	r2, [pc, #336]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0304 	bic.w	r3, r3, #4
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe fbe8 	bl	8001ed4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fbe4 	bl	8001ed4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0cb      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ee      	beq.n	8003708 <HAL_RCC_OscConfig+0x334>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe fbd2 	bl	8001ed4 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe fbce 	bl	8001ed4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0b5      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ee      	bne.n	8003734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a1 	beq.w	80038b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d05c      	beq.n	8003838 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d141      	bne.n	800380a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fba2 	bl	8001ed4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fb9e 	bl	8001ed4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e087      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	019b      	lsls	r3, r3, #6
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	3b01      	subs	r3, #1
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	491b      	ldr	r1, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x478>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fb77 	bl	8001ed4 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe fb73 	bl	8001ed4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e05c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x416>
 8003808:	e054      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_OscConfig+0x478>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fb60 	bl	8001ed4 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe fb5c 	bl	8001ed4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e045      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x444>
 8003836:	e03d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e038      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000
 800384c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x4ec>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d028      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d121      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d11a      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	3b01      	subs	r3, #1
 800389a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e067      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fa8e 	bl	8001ed4 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fe fa8a 	bl	8001ed4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f821 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490a      	ldr	r1, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f9ee 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08009fec 	.word	0x08009fec
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000004 	.word	0x20000004

08003a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a94:	b094      	sub	sp, #80	; 0x50
 8003a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa8:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	f200 80e1 	bhi.w	8003c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac2:	e0db      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ac8:	e0db      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aca:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ace:	e0d8      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ada:	4b6d      	ldr	r3, [pc, #436]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d063      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	2200      	movs	r2, #0
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
 8003afa:	2300      	movs	r3, #0
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
 8003afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	f04f 0000 	mov.w	r0, #0
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	0159      	lsls	r1, r3, #5
 8003b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b14:	0150      	lsls	r0, r2, #5
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	1a51      	subs	r1, r2, r1
 8003b1e:	6139      	str	r1, [r7, #16]
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb63 0301 	sbc.w	r3, r3, r1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b34:	4659      	mov	r1, fp
 8003b36:	018b      	lsls	r3, r1, #6
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3e:	4651      	mov	r1, sl
 8003b40:	018a      	lsls	r2, r1, #6
 8003b42:	4651      	mov	r1, sl
 8003b44:	ebb2 0801 	subs.w	r8, r2, r1
 8003b48:	4659      	mov	r1, fp
 8003b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b62:	4690      	mov	r8, r2
 8003b64:	4699      	mov	r9, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	eb18 0303 	adds.w	r3, r8, r3
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	462b      	mov	r3, r5
 8003b70:	eb49 0303 	adc.w	r3, r9, r3
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b82:	4629      	mov	r1, r5
 8003b84:	024b      	lsls	r3, r1, #9
 8003b86:	4621      	mov	r1, r4
 8003b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	024a      	lsls	r2, r1, #9
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b96:	2200      	movs	r2, #0
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba0:	f7fd f872 	bl	8000c88 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	e058      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4611      	mov	r1, r2
 8003bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	f04f 0000 	mov.w	r0, #0
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	0159      	lsls	r1, r3, #5
 8003bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bda:	0150      	lsls	r0, r2, #5
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4641      	mov	r1, r8
 8003be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c00:	ebb2 040a 	subs.w	r4, r2, sl
 8003c04:	eb63 050b 	sbc.w	r5, r3, fp
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	00eb      	lsls	r3, r5, #3
 8003c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c16:	00e2      	lsls	r2, r4, #3
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	18e3      	adds	r3, r4, r3
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	464b      	mov	r3, r9
 8003c24:	eb45 0303 	adc.w	r3, r5, r3
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c36:	4629      	mov	r1, r5
 8003c38:	028b      	lsls	r3, r1, #10
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c40:	4621      	mov	r1, r4
 8003c42:	028a      	lsls	r2, r1, #10
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	61fa      	str	r2, [r7, #28]
 8003c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c54:	f7fd f818 	bl	8000c88 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3750      	adds	r7, #80	; 0x50
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08009ffc 	.word	0x08009ffc

08003cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ce0:	f7ff ffdc 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	0b5b      	lsrs	r3, r3, #13
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	4903      	ldr	r1, [pc, #12]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08009ffc 	.word	0x08009ffc

08003d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e041      	b.n	8003d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fe66 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 f896 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d001      	beq.n	8003dbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e046      	b.n	8003e4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_TIM_Base_Start+0xb4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_TIM_Base_Start+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_TIM_Base_Start+0xbc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_TIM_Base_Start+0xc0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_TIM_Base_Start+0xc4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_TIM_Base_Start+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start+0x70>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_TIM_Base_Start+0xcc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	e007      	b.n	8003e48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40001800 	.word	0x40001800

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a46      	ldr	r2, [pc, #280]	; (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a41      	ldr	r2, [pc, #260]	; (8003fac <TIM_Base_SetConfig+0x138>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d027      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d023      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <TIM_Base_SetConfig+0x140>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <TIM_Base_SetConfig+0x144>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <TIM_Base_SetConfig+0x148>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <TIM_Base_SetConfig+0x14c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <TIM_Base_SetConfig+0x150>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <TIM_Base_SetConfig+0x154>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0xf8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]
  }
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800
 8003fc0:	40001800 	.word	0x40001800
 8003fc4:	40001c00 	.word	0x40001c00
 8003fc8:	40002000 	.word	0x40002000

08003fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e05a      	b.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d01d      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10c      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40010400 	.word	0x40010400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40001800 	.word	0x40001800

080040c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e042      	b.n	800415c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd fca8 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb79 	bl	8004800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800411c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800412c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b20      	cmp	r3, #32
 8004182:	d175      	bne.n	8004270 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Transmit+0x2c>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e06e      	b.n	8004272 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2221      	movs	r2, #33	; 0x21
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a2:	f7fd fe97 	bl	8001ed4 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d108      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e003      	b.n	80041d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041d8:	e02e      	b.n	8004238 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f98b 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e03a      	b.n	8004272 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3302      	adds	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e007      	b.n	800422a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1cb      	bne.n	80041da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f957 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e006      	b.n	8004272 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d112      	bne.n	80042ba <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive_DMA+0x26>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e00b      	b.n	80042bc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	461a      	mov	r2, r3
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f97f 	bl	80045b4 <UART_Start_Receive_DMA>
 80042b6:	4603      	mov	r3, r0
 80042b8:	e000      	b.n	80042bc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b09c      	sub	sp, #112	; 0x70
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d172      	bne.n	8004406 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	2200      	movs	r2, #0
 8004324:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004346:	65ba      	str	r2, [r7, #88]	; 0x58
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800434c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	667b      	str	r3, [r7, #100]	; 0x64
 8004372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800437a:	647a      	str	r2, [r7, #68]	; 0x44
 800437c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	623b      	str	r3, [r7, #32]
   return(result);
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a4:	663b      	str	r3, [r7, #96]	; 0x60
 80043a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d119      	bne.n	8004406 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f023 0310 	bic.w	r3, r3, #16
 80043e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043f2:	61fa      	str	r2, [r7, #28]
 80043f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	2b01      	cmp	r3, #1
 8004412:	d106      	bne.n	8004422 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004418:	4619      	mov	r1, r3
 800441a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800441c:	f7ff ff66 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004420:	e002      	b.n	8004428 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004422:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004424:	f7fc feee 	bl	8001204 <HAL_UART_RxCpltCallback>
}
 8004428:	bf00      	nop
 800442a:	3770      	adds	r7, #112	; 0x70
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	b29b      	uxth	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff48 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800445c:	e002      	b.n	8004464 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ff30 	bl	80042c4 <HAL_UART_RxHalfCpltCallback>
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b21      	cmp	r3, #33	; 0x21
 800449e:	d108      	bne.n	80044b2 <UART_DMAError+0x46>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044ac:	68b8      	ldr	r0, [r7, #8]
 80044ae:	f000 f91b 	bl	80046e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b22      	cmp	r3, #34	; 0x22
 80044d2:	d108      	bne.n	80044e6 <UART_DMAError+0x7a>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044e0:	68b8      	ldr	r0, [r7, #8]
 80044e2:	f000 f929 	bl	8004738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f7ff fef0 	bl	80042d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e03b      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d037      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd fcdb 	bl	8001ed4 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e03a      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d023      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d020      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d01d      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d116      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f8e0 	bl	8004738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2208      	movs	r2, #8
 800457c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d0b4      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b098      	sub	sp, #96	; 0x60
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2222      	movs	r2, #34	; 0x22
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <UART_Start_Receive_DMA+0x128>)
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <UART_Start_Receive_DMA+0x12c>)
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <UART_Start_Receive_DMA+0x130>)
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2200      	movs	r2, #0
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	f7fe fa4e 	bl	8002ab4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d019      	beq.n	800466a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464c:	65bb      	str	r3, [r7, #88]	; 0x58
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004656:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800465c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	657b      	str	r3, [r7, #84]	; 0x54
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800468a:	63ba      	str	r2, [r7, #56]	; 0x38
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	617b      	str	r3, [r7, #20]
   return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b4:	653b      	str	r3, [r7, #80]	; 0x50
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046be:	627a      	str	r2, [r7, #36]	; 0x24
 80046c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6a39      	ldr	r1, [r7, #32]
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3760      	adds	r7, #96	; 0x60
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08004305 	.word	0x08004305
 80046e0:	08004431 	.word	0x08004431
 80046e4:	0800446d 	.word	0x0800446d

080046e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	61ba      	str	r2, [r7, #24]
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	613b      	str	r3, [r7, #16]
   return(result);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e5      	bne.n	80046f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800472c:	bf00      	nop
 800472e:	3724      	adds	r7, #36	; 0x24
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b095      	sub	sp, #84	; 0x54
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004760:	643a      	str	r2, [r7, #64]	; 0x40
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	61fb      	str	r3, [r7, #28]
   return(result);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3314      	adds	r3, #20
 8004792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e5      	bne.n	8004774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d119      	bne.n	80047e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0310 	bic.w	r3, r3, #16
 80047c6:	647b      	str	r3, [r7, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d0:	61ba      	str	r2, [r7, #24]
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6979      	ldr	r1, [r7, #20]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	613b      	str	r3, [r7, #16]
   return(result);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047f2:	bf00      	nop
 80047f4:	3754      	adds	r7, #84	; 0x54
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b0c0      	sub	sp, #256	; 0x100
 8004806:	af00      	add	r7, sp, #0
 8004808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	68d9      	ldr	r1, [r3, #12]
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	ea40 0301 	orr.w	r3, r0, r1
 8004828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004858:	f021 010c 	bic.w	r1, r1, #12
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004866:	430b      	orrs	r3, r1
 8004868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	6999      	ldr	r1, [r3, #24]
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	ea40 0301 	orr.w	r3, r0, r1
 8004886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <UART_SetConfig+0x2cc>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0xa0>
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <UART_SetConfig+0x2d0>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7ff fa1c 	bl	8003cdc <HAL_RCC_GetPCLK2Freq>
 80048a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048a8:	e003      	b.n	80048b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048aa:	f7ff fa03 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 80048ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	f040 810c 	bne.w	8004ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048d2:	4622      	mov	r2, r4
 80048d4:	462b      	mov	r3, r5
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048da:	415b      	adcs	r3, r3
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e2:	4621      	mov	r1, r4
 80048e4:	eb12 0801 	adds.w	r8, r2, r1
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb43 0901 	adc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004910:	462b      	mov	r3, r5
 8004912:	eb49 0303 	adc.w	r3, r9, r3
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800492a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800492e:	460b      	mov	r3, r1
 8004930:	18db      	adds	r3, r3, r3
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	4613      	mov	r3, r2
 8004936:	eb42 0303 	adc.w	r3, r2, r3
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
 800493c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004944:	f7fc f9a0 	bl	8000c88 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <UART_SetConfig+0x2d4>)
 800494e:	fba3 2302 	umull	r2, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	011c      	lsls	r4, r3, #4
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004970:	415b      	adcs	r3, r3
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004978:	4641      	mov	r1, r8
 800497a:	eb12 0a01 	adds.w	sl, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0b01 	adc.w	fp, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004998:	4692      	mov	sl, r2
 800499a:	469b      	mov	fp, r3
 800499c:	4643      	mov	r3, r8
 800499e:	eb1a 0303 	adds.w	r3, sl, r3
 80049a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a6:	464b      	mov	r3, r9
 80049a8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049da:	f7fc f955 	bl	8000c88 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	; 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a08:	441c      	add	r4, r3
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a24:	415b      	adcs	r3, r3
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6339      	str	r1, [r7, #48]	; 0x30
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a60:	464b      	mov	r3, r9
 8004a62:	460a      	mov	r2, r1
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a80:	460b      	mov	r3, r1
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a86:	4613      	mov	r3, r2
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a96:	f7fc f8f7 	bl	8000c88 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2164      	movs	r1, #100	; 0x64
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3332      	adds	r3, #50	; 0x32
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 0207 	and.w	r2, r3, #7
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4422      	add	r2, r4
 8004ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac8:	e106      	b.n	8004cd8 <UART_SetConfig+0x4d8>
 8004aca:	bf00      	nop
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40011400 	.word	0x40011400
 8004ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aea:	4642      	mov	r2, r8
 8004aec:	464b      	mov	r3, r9
 8004aee:	1891      	adds	r1, r2, r2
 8004af0:	6239      	str	r1, [r7, #32]
 8004af2:	415b      	adcs	r3, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004afa:	4641      	mov	r1, r8
 8004afc:	1854      	adds	r4, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0501 	adc.w	r5, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	00eb      	lsls	r3, r5, #3
 8004b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	4614      	mov	r4, r2
 8004b16:	461d      	mov	r5, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	18e3      	adds	r3, r4, r3
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b20:	464b      	mov	r3, r9
 8004b22:	eb45 0303 	adc.w	r3, r5, r3
 8004b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b46:	4629      	mov	r1, r5
 8004b48:	008b      	lsls	r3, r1, #2
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b50:	4621      	mov	r1, r4
 8004b52:	008a      	lsls	r2, r1, #2
 8004b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b58:	f7fc f896 	bl	8000c88 <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004b62:	fba3 2302 	umull	r2, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	011c      	lsls	r4, r3, #4
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	61b9      	str	r1, [r7, #24]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6139      	str	r1, [r7, #16]
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be4:	4649      	mov	r1, r9
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bee:	4641      	mov	r1, r8
 8004bf0:	008a      	lsls	r2, r1, #2
 8004bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bf6:	f7fc f847 	bl	8000c88 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 2301 	umull	r2, r3, r3, r1
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2264      	movs	r2, #100	; 0x64
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	1acb      	subs	r3, r1, r3
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c20:	441c      	add	r4, r3
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	673b      	str	r3, [r7, #112]	; 0x70
 8004c2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c72:	464b      	mov	r3, r9
 8004c74:	460a      	mov	r2, r1
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	663b      	str	r3, [r7, #96]	; 0x60
 8004c86:	667a      	str	r2, [r7, #100]	; 0x64
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c94:	4649      	mov	r1, r9
 8004c96:	008b      	lsls	r3, r1, #2
 8004c98:	4641      	mov	r1, r8
 8004c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	008a      	lsls	r2, r1, #2
 8004ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca6:	f7fb ffef 	bl	8000c88 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4422      	add	r2, r4
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <__cvt>:
 8004ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	ec55 4b10 	vmov	r4, r5, d0
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	bfbb      	ittet	lt
 8004cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cfe:	461d      	movlt	r5, r3
 8004d00:	2300      	movge	r3, #0
 8004d02:	232d      	movlt	r3, #45	; 0x2d
 8004d04:	700b      	strb	r3, [r1, #0]
 8004d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d0c:	4691      	mov	r9, r2
 8004d0e:	f023 0820 	bic.w	r8, r3, #32
 8004d12:	bfbc      	itt	lt
 8004d14:	4622      	movlt	r2, r4
 8004d16:	4614      	movlt	r4, r2
 8004d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d1c:	d005      	beq.n	8004d2a <__cvt+0x42>
 8004d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d22:	d100      	bne.n	8004d26 <__cvt+0x3e>
 8004d24:	3601      	adds	r6, #1
 8004d26:	2102      	movs	r1, #2
 8004d28:	e000      	b.n	8004d2c <__cvt+0x44>
 8004d2a:	2103      	movs	r1, #3
 8004d2c:	ab03      	add	r3, sp, #12
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	ab02      	add	r3, sp, #8
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	ec45 4b10 	vmov	d0, r4, r5
 8004d38:	4653      	mov	r3, sl
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	f001 f8e4 	bl	8005f08 <_dtoa_r>
 8004d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d44:	4607      	mov	r7, r0
 8004d46:	d102      	bne.n	8004d4e <__cvt+0x66>
 8004d48:	f019 0f01 	tst.w	r9, #1
 8004d4c:	d022      	beq.n	8004d94 <__cvt+0xac>
 8004d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d52:	eb07 0906 	add.w	r9, r7, r6
 8004d56:	d110      	bne.n	8004d7a <__cvt+0x92>
 8004d58:	783b      	ldrb	r3, [r7, #0]
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d10a      	bne.n	8004d74 <__cvt+0x8c>
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2300      	movs	r3, #0
 8004d62:	4620      	mov	r0, r4
 8004d64:	4629      	mov	r1, r5
 8004d66:	f7fb feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d6a:	b918      	cbnz	r0, 8004d74 <__cvt+0x8c>
 8004d6c:	f1c6 0601 	rsb	r6, r6, #1
 8004d70:	f8ca 6000 	str.w	r6, [sl]
 8004d74:	f8da 3000 	ldr.w	r3, [sl]
 8004d78:	4499      	add	r9, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fb fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d86:	b108      	cbz	r0, 8004d8c <__cvt+0xa4>
 8004d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d8c:	2230      	movs	r2, #48	; 0x30
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	454b      	cmp	r3, r9
 8004d92:	d307      	bcc.n	8004da4 <__cvt+0xbc>
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d98:	1bdb      	subs	r3, r3, r7
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	b004      	add	sp, #16
 8004da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da4:	1c59      	adds	r1, r3, #1
 8004da6:	9103      	str	r1, [sp, #12]
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e7f0      	b.n	8004d8e <__cvt+0xa6>

08004dac <__exponent>:
 8004dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dae:	4603      	mov	r3, r0
 8004db0:	2900      	cmp	r1, #0
 8004db2:	bfb8      	it	lt
 8004db4:	4249      	neglt	r1, r1
 8004db6:	f803 2b02 	strb.w	r2, [r3], #2
 8004dba:	bfb4      	ite	lt
 8004dbc:	222d      	movlt	r2, #45	; 0x2d
 8004dbe:	222b      	movge	r2, #43	; 0x2b
 8004dc0:	2909      	cmp	r1, #9
 8004dc2:	7042      	strb	r2, [r0, #1]
 8004dc4:	dd2a      	ble.n	8004e1c <__exponent+0x70>
 8004dc6:	f10d 0207 	add.w	r2, sp, #7
 8004dca:	4617      	mov	r7, r2
 8004dcc:	260a      	movs	r6, #10
 8004dce:	4694      	mov	ip, r2
 8004dd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8004dd4:	fb06 1415 	mls	r4, r6, r5, r1
 8004dd8:	3430      	adds	r4, #48	; 0x30
 8004dda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004dde:	460c      	mov	r4, r1
 8004de0:	2c63      	cmp	r4, #99	; 0x63
 8004de2:	f102 32ff 	add.w	r2, r2, #4294967295
 8004de6:	4629      	mov	r1, r5
 8004de8:	dcf1      	bgt.n	8004dce <__exponent+0x22>
 8004dea:	3130      	adds	r1, #48	; 0x30
 8004dec:	f1ac 0402 	sub.w	r4, ip, #2
 8004df0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004df4:	1c41      	adds	r1, r0, #1
 8004df6:	4622      	mov	r2, r4
 8004df8:	42ba      	cmp	r2, r7
 8004dfa:	d30a      	bcc.n	8004e12 <__exponent+0x66>
 8004dfc:	f10d 0209 	add.w	r2, sp, #9
 8004e00:	eba2 020c 	sub.w	r2, r2, ip
 8004e04:	42bc      	cmp	r4, r7
 8004e06:	bf88      	it	hi
 8004e08:	2200      	movhi	r2, #0
 8004e0a:	4413      	add	r3, r2
 8004e0c:	1a18      	subs	r0, r3, r0
 8004e0e:	b003      	add	sp, #12
 8004e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e1a:	e7ed      	b.n	8004df8 <__exponent+0x4c>
 8004e1c:	2330      	movs	r3, #48	; 0x30
 8004e1e:	3130      	adds	r1, #48	; 0x30
 8004e20:	7083      	strb	r3, [r0, #2]
 8004e22:	70c1      	strb	r1, [r0, #3]
 8004e24:	1d03      	adds	r3, r0, #4
 8004e26:	e7f1      	b.n	8004e0c <__exponent+0x60>

08004e28 <_printf_float>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	ed2d 8b02 	vpush	{d8}
 8004e30:	b08d      	sub	sp, #52	; 0x34
 8004e32:	460c      	mov	r4, r1
 8004e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e38:	4616      	mov	r6, r2
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	f000 ff53 	bl	8005ce8 <_localeconv_r>
 8004e42:	f8d0 a000 	ldr.w	sl, [r0]
 8004e46:	4650      	mov	r0, sl
 8004e48:	f7fb fa12 	bl	8000270 <strlen>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	9305      	str	r3, [sp, #20]
 8004e54:	f8d8 3000 	ldr.w	r3, [r8]
 8004e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	f103 0208 	add.w	r2, r3, #8
 8004e66:	f8c8 2000 	str.w	r2, [r8]
 8004e6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e72:	9307      	str	r3, [sp, #28]
 8004e74:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e78:	ee08 0a10 	vmov	s16, r0
 8004e7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e84:	4b9e      	ldr	r3, [pc, #632]	; (8005100 <_printf_float+0x2d8>)
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	f7fb fe4f 	bl	8000b2c <__aeabi_dcmpun>
 8004e8e:	bb88      	cbnz	r0, 8004ef4 <_printf_float+0xcc>
 8004e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e94:	4b9a      	ldr	r3, [pc, #616]	; (8005100 <_printf_float+0x2d8>)
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	f7fb fe29 	bl	8000af0 <__aeabi_dcmple>
 8004e9e:	bb48      	cbnz	r0, 8004ef4 <_printf_float+0xcc>
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	f7fb fe18 	bl	8000adc <__aeabi_dcmplt>
 8004eac:	b110      	cbz	r0, 8004eb4 <_printf_float+0x8c>
 8004eae:	232d      	movs	r3, #45	; 0x2d
 8004eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb4:	4a93      	ldr	r2, [pc, #588]	; (8005104 <_printf_float+0x2dc>)
 8004eb6:	4b94      	ldr	r3, [pc, #592]	; (8005108 <_printf_float+0x2e0>)
 8004eb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ebc:	bf94      	ite	ls
 8004ebe:	4690      	movls	r8, r2
 8004ec0:	4698      	movhi	r8, r3
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	9b05      	ldr	r3, [sp, #20]
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	f04f 0900 	mov.w	r9, #0
 8004ed2:	9700      	str	r7, [sp, #0]
 8004ed4:	4633      	mov	r3, r6
 8004ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f9da 	bl	8005294 <_printf_common>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	f040 8090 	bne.w	8005006 <_printf_float+0x1de>
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	b00d      	add	sp, #52	; 0x34
 8004eec:	ecbd 8b02 	vpop	{d8}
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4649      	mov	r1, r9
 8004efc:	f7fb fe16 	bl	8000b2c <__aeabi_dcmpun>
 8004f00:	b140      	cbz	r0, 8004f14 <_printf_float+0xec>
 8004f02:	464b      	mov	r3, r9
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bfbc      	itt	lt
 8004f08:	232d      	movlt	r3, #45	; 0x2d
 8004f0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f0e:	4a7f      	ldr	r2, [pc, #508]	; (800510c <_printf_float+0x2e4>)
 8004f10:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <_printf_float+0x2e8>)
 8004f12:	e7d1      	b.n	8004eb8 <_printf_float+0x90>
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f1a:	9206      	str	r2, [sp, #24]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	d13f      	bne.n	8004fa0 <_printf_float+0x178>
 8004f20:	2306      	movs	r3, #6
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	9b05      	ldr	r3, [sp, #20]
 8004f26:	6861      	ldr	r1, [r4, #4]
 8004f28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	ab0a      	add	r3, sp, #40	; 0x28
 8004f32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f36:	ab09      	add	r3, sp, #36	; 0x24
 8004f38:	ec49 8b10 	vmov	d0, r8, r9
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f44:	4628      	mov	r0, r5
 8004f46:	f7ff fecf 	bl	8004ce8 <__cvt>
 8004f4a:	9b06      	ldr	r3, [sp, #24]
 8004f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f4e:	2b47      	cmp	r3, #71	; 0x47
 8004f50:	4680      	mov	r8, r0
 8004f52:	d108      	bne.n	8004f66 <_printf_float+0x13e>
 8004f54:	1cc8      	adds	r0, r1, #3
 8004f56:	db02      	blt.n	8004f5e <_printf_float+0x136>
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	4299      	cmp	r1, r3
 8004f5c:	dd41      	ble.n	8004fe2 <_printf_float+0x1ba>
 8004f5e:	f1ab 0302 	sub.w	r3, fp, #2
 8004f62:	fa5f fb83 	uxtb.w	fp, r3
 8004f66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f6a:	d820      	bhi.n	8004fae <_printf_float+0x186>
 8004f6c:	3901      	subs	r1, #1
 8004f6e:	465a      	mov	r2, fp
 8004f70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f74:	9109      	str	r1, [sp, #36]	; 0x24
 8004f76:	f7ff ff19 	bl	8004dac <__exponent>
 8004f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7c:	1813      	adds	r3, r2, r0
 8004f7e:	2a01      	cmp	r2, #1
 8004f80:	4681      	mov	r9, r0
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	dc02      	bgt.n	8004f8c <_printf_float+0x164>
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	07d2      	lsls	r2, r2, #31
 8004f8a:	d501      	bpl.n	8004f90 <_printf_float+0x168>
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	6123      	str	r3, [r4, #16]
 8004f90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d09c      	beq.n	8004ed2 <_printf_float+0xaa>
 8004f98:	232d      	movs	r3, #45	; 0x2d
 8004f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9e:	e798      	b.n	8004ed2 <_printf_float+0xaa>
 8004fa0:	9a06      	ldr	r2, [sp, #24]
 8004fa2:	2a47      	cmp	r2, #71	; 0x47
 8004fa4:	d1be      	bne.n	8004f24 <_printf_float+0xfc>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1bc      	bne.n	8004f24 <_printf_float+0xfc>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7b9      	b.n	8004f22 <_printf_float+0xfa>
 8004fae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fb2:	d118      	bne.n	8004fe6 <_printf_float+0x1be>
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	dd0b      	ble.n	8004fd2 <_printf_float+0x1aa>
 8004fba:	6121      	str	r1, [r4, #16]
 8004fbc:	b913      	cbnz	r3, 8004fc4 <_printf_float+0x19c>
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	07d0      	lsls	r0, r2, #31
 8004fc2:	d502      	bpl.n	8004fca <_printf_float+0x1a2>
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fcc:	f04f 0900 	mov.w	r9, #0
 8004fd0:	e7de      	b.n	8004f90 <_printf_float+0x168>
 8004fd2:	b913      	cbnz	r3, 8004fda <_printf_float+0x1b2>
 8004fd4:	6822      	ldr	r2, [r4, #0]
 8004fd6:	07d2      	lsls	r2, r2, #31
 8004fd8:	d501      	bpl.n	8004fde <_printf_float+0x1b6>
 8004fda:	3302      	adds	r3, #2
 8004fdc:	e7f4      	b.n	8004fc8 <_printf_float+0x1a0>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7f2      	b.n	8004fc8 <_printf_float+0x1a0>
 8004fe2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	db05      	blt.n	8004ff8 <_printf_float+0x1d0>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	6121      	str	r1, [r4, #16]
 8004ff0:	07d8      	lsls	r0, r3, #31
 8004ff2:	d5ea      	bpl.n	8004fca <_printf_float+0x1a2>
 8004ff4:	1c4b      	adds	r3, r1, #1
 8004ff6:	e7e7      	b.n	8004fc8 <_printf_float+0x1a0>
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	bfd4      	ite	le
 8004ffc:	f1c1 0202 	rsble	r2, r1, #2
 8005000:	2201      	movgt	r2, #1
 8005002:	4413      	add	r3, r2
 8005004:	e7e0      	b.n	8004fc8 <_printf_float+0x1a0>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	055a      	lsls	r2, r3, #21
 800500a:	d407      	bmi.n	800501c <_printf_float+0x1f4>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	4642      	mov	r2, r8
 8005010:	4631      	mov	r1, r6
 8005012:	4628      	mov	r0, r5
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	d12c      	bne.n	8005074 <_printf_float+0x24c>
 800501a:	e764      	b.n	8004ee6 <_printf_float+0xbe>
 800501c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005020:	f240 80e0 	bls.w	80051e4 <_printf_float+0x3bc>
 8005024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	f7fb fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005030:	2800      	cmp	r0, #0
 8005032:	d034      	beq.n	800509e <_printf_float+0x276>
 8005034:	4a37      	ldr	r2, [pc, #220]	; (8005114 <_printf_float+0x2ec>)
 8005036:	2301      	movs	r3, #1
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	f43f af51 	beq.w	8004ee6 <_printf_float+0xbe>
 8005044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005048:	429a      	cmp	r2, r3
 800504a:	db02      	blt.n	8005052 <_printf_float+0x22a>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	07d8      	lsls	r0, r3, #31
 8005050:	d510      	bpl.n	8005074 <_printf_float+0x24c>
 8005052:	ee18 3a10 	vmov	r3, s16
 8005056:	4652      	mov	r2, sl
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f af41 	beq.w	8004ee6 <_printf_float+0xbe>
 8005064:	f04f 0800 	mov.w	r8, #0
 8005068:	f104 091a 	add.w	r9, r4, #26
 800506c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	4543      	cmp	r3, r8
 8005072:	dc09      	bgt.n	8005088 <_printf_float+0x260>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	079b      	lsls	r3, r3, #30
 8005078:	f100 8107 	bmi.w	800528a <_printf_float+0x462>
 800507c:	68e0      	ldr	r0, [r4, #12]
 800507e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005080:	4298      	cmp	r0, r3
 8005082:	bfb8      	it	lt
 8005084:	4618      	movlt	r0, r3
 8005086:	e730      	b.n	8004eea <_printf_float+0xc2>
 8005088:	2301      	movs	r3, #1
 800508a:	464a      	mov	r2, r9
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f af27 	beq.w	8004ee6 <_printf_float+0xbe>
 8005098:	f108 0801 	add.w	r8, r8, #1
 800509c:	e7e6      	b.n	800506c <_printf_float+0x244>
 800509e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dc39      	bgt.n	8005118 <_printf_float+0x2f0>
 80050a4:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <_printf_float+0x2ec>)
 80050a6:	2301      	movs	r3, #1
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af19 	beq.w	8004ee6 <_printf_float+0xbe>
 80050b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050b8:	4313      	orrs	r3, r2
 80050ba:	d102      	bne.n	80050c2 <_printf_float+0x29a>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07d9      	lsls	r1, r3, #31
 80050c0:	d5d8      	bpl.n	8005074 <_printf_float+0x24c>
 80050c2:	ee18 3a10 	vmov	r3, s16
 80050c6:	4652      	mov	r2, sl
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af09 	beq.w	8004ee6 <_printf_float+0xbe>
 80050d4:	f04f 0900 	mov.w	r9, #0
 80050d8:	f104 0a1a 	add.w	sl, r4, #26
 80050dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050de:	425b      	negs	r3, r3
 80050e0:	454b      	cmp	r3, r9
 80050e2:	dc01      	bgt.n	80050e8 <_printf_float+0x2c0>
 80050e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e6:	e792      	b.n	800500e <_printf_float+0x1e6>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4652      	mov	r2, sl
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f aef7 	beq.w	8004ee6 <_printf_float+0xbe>
 80050f8:	f109 0901 	add.w	r9, r9, #1
 80050fc:	e7ee      	b.n	80050dc <_printf_float+0x2b4>
 80050fe:	bf00      	nop
 8005100:	7fefffff 	.word	0x7fefffff
 8005104:	0800a00c 	.word	0x0800a00c
 8005108:	0800a010 	.word	0x0800a010
 800510c:	0800a014 	.word	0x0800a014
 8005110:	0800a018 	.word	0x0800a018
 8005114:	0800a3a8 	.word	0x0800a3a8
 8005118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800511a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800511c:	429a      	cmp	r2, r3
 800511e:	bfa8      	it	ge
 8005120:	461a      	movge	r2, r3
 8005122:	2a00      	cmp	r2, #0
 8005124:	4691      	mov	r9, r2
 8005126:	dc37      	bgt.n	8005198 <_printf_float+0x370>
 8005128:	f04f 0b00 	mov.w	fp, #0
 800512c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005130:	f104 021a 	add.w	r2, r4, #26
 8005134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	eba3 0309 	sub.w	r3, r3, r9
 800513c:	455b      	cmp	r3, fp
 800513e:	dc33      	bgt.n	80051a8 <_printf_float+0x380>
 8005140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005144:	429a      	cmp	r2, r3
 8005146:	db3b      	blt.n	80051c0 <_printf_float+0x398>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07da      	lsls	r2, r3, #31
 800514c:	d438      	bmi.n	80051c0 <_printf_float+0x398>
 800514e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005152:	eba2 0903 	sub.w	r9, r2, r3
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	4591      	cmp	r9, r2
 800515c:	bfa8      	it	ge
 800515e:	4691      	movge	r9, r2
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	dc35      	bgt.n	80051d2 <_printf_float+0x3aa>
 8005166:	f04f 0800 	mov.w	r8, #0
 800516a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800516e:	f104 0a1a 	add.w	sl, r4, #26
 8005172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	eba3 0309 	sub.w	r3, r3, r9
 800517c:	4543      	cmp	r3, r8
 800517e:	f77f af79 	ble.w	8005074 <_printf_float+0x24c>
 8005182:	2301      	movs	r3, #1
 8005184:	4652      	mov	r2, sl
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f aeaa 	beq.w	8004ee6 <_printf_float+0xbe>
 8005192:	f108 0801 	add.w	r8, r8, #1
 8005196:	e7ec      	b.n	8005172 <_printf_float+0x34a>
 8005198:	4613      	mov	r3, r2
 800519a:	4631      	mov	r1, r6
 800519c:	4642      	mov	r2, r8
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	d1c0      	bne.n	8005128 <_printf_float+0x300>
 80051a6:	e69e      	b.n	8004ee6 <_printf_float+0xbe>
 80051a8:	2301      	movs	r3, #1
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	9205      	str	r2, [sp, #20]
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f ae97 	beq.w	8004ee6 <_printf_float+0xbe>
 80051b8:	9a05      	ldr	r2, [sp, #20]
 80051ba:	f10b 0b01 	add.w	fp, fp, #1
 80051be:	e7b9      	b.n	8005134 <_printf_float+0x30c>
 80051c0:	ee18 3a10 	vmov	r3, s16
 80051c4:	4652      	mov	r2, sl
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	d1be      	bne.n	800514e <_printf_float+0x326>
 80051d0:	e689      	b.n	8004ee6 <_printf_float+0xbe>
 80051d2:	9a05      	ldr	r2, [sp, #20]
 80051d4:	464b      	mov	r3, r9
 80051d6:	4442      	add	r2, r8
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	d1c1      	bne.n	8005166 <_printf_float+0x33e>
 80051e2:	e680      	b.n	8004ee6 <_printf_float+0xbe>
 80051e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051e6:	2a01      	cmp	r2, #1
 80051e8:	dc01      	bgt.n	80051ee <_printf_float+0x3c6>
 80051ea:	07db      	lsls	r3, r3, #31
 80051ec:	d53a      	bpl.n	8005264 <_printf_float+0x43c>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4642      	mov	r2, r8
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f ae74 	beq.w	8004ee6 <_printf_float+0xbe>
 80051fe:	ee18 3a10 	vmov	r3, s16
 8005202:	4652      	mov	r2, sl
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f ae6b 	beq.w	8004ee6 <_printf_float+0xbe>
 8005210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005214:	2200      	movs	r2, #0
 8005216:	2300      	movs	r3, #0
 8005218:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800521c:	f7fb fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005220:	b9d8      	cbnz	r0, 800525a <_printf_float+0x432>
 8005222:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005226:	f108 0201 	add.w	r2, r8, #1
 800522a:	4631      	mov	r1, r6
 800522c:	4628      	mov	r0, r5
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	d10e      	bne.n	8005252 <_printf_float+0x42a>
 8005234:	e657      	b.n	8004ee6 <_printf_float+0xbe>
 8005236:	2301      	movs	r3, #1
 8005238:	4652      	mov	r2, sl
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae50 	beq.w	8004ee6 <_printf_float+0xbe>
 8005246:	f108 0801 	add.w	r8, r8, #1
 800524a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524c:	3b01      	subs	r3, #1
 800524e:	4543      	cmp	r3, r8
 8005250:	dcf1      	bgt.n	8005236 <_printf_float+0x40e>
 8005252:	464b      	mov	r3, r9
 8005254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005258:	e6da      	b.n	8005010 <_printf_float+0x1e8>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 0a1a 	add.w	sl, r4, #26
 8005262:	e7f2      	b.n	800524a <_printf_float+0x422>
 8005264:	2301      	movs	r3, #1
 8005266:	4642      	mov	r2, r8
 8005268:	e7df      	b.n	800522a <_printf_float+0x402>
 800526a:	2301      	movs	r3, #1
 800526c:	464a      	mov	r2, r9
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae36 	beq.w	8004ee6 <_printf_float+0xbe>
 800527a:	f108 0801 	add.w	r8, r8, #1
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	4543      	cmp	r3, r8
 8005286:	dcf0      	bgt.n	800526a <_printf_float+0x442>
 8005288:	e6f8      	b.n	800507c <_printf_float+0x254>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	f104 0919 	add.w	r9, r4, #25
 8005292:	e7f4      	b.n	800527e <_printf_float+0x456>

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4699      	mov	r9, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfb8      	it	lt
 80052a8:	4613      	movlt	r3, r2
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b0:	4607      	mov	r7, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc26      	bgt.n	800532a <_printf_common+0x96>
 80052dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e0:	1e13      	subs	r3, r2, #0
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d42b      	bmi.n	8005344 <_printf_common+0xb0>
 80052ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f0:	4649      	mov	r1, r9
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d01e      	beq.n	8005338 <_printf_common+0xa4>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf02      	ittt	eq
 8005306:	68e5      	ldreq	r5, [r4, #12]
 8005308:	6833      	ldreq	r3, [r6, #0]
 800530a:	1aed      	subeq	r5, r5, r3
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	bf0c      	ite	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	2500      	movne	r5, #0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfc4      	itt	gt
 800531a:	1a9b      	subgt	r3, r3, r2
 800531c:	18ed      	addgt	r5, r5, r3
 800531e:	2600      	movs	r6, #0
 8005320:	341a      	adds	r4, #26
 8005322:	42b5      	cmp	r5, r6
 8005324:	d11a      	bne.n	800535c <_printf_common+0xc8>
 8005326:	2000      	movs	r0, #0
 8005328:	e008      	b.n	800533c <_printf_common+0xa8>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4649      	mov	r1, r9
 8005330:	4638      	mov	r0, r7
 8005332:	47c0      	blx	r8
 8005334:	3001      	adds	r0, #1
 8005336:	d103      	bne.n	8005340 <_printf_common+0xac>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	3501      	adds	r5, #1
 8005342:	e7c6      	b.n	80052d2 <_printf_common+0x3e>
 8005344:	18e1      	adds	r1, r4, r3
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	2030      	movs	r0, #48	; 0x30
 800534a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800534e:	4422      	add	r2, r4
 8005350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005358:	3302      	adds	r3, #2
 800535a:	e7c7      	b.n	80052ec <_printf_common+0x58>
 800535c:	2301      	movs	r3, #1
 800535e:	4622      	mov	r2, r4
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d0e6      	beq.n	8005338 <_printf_common+0xa4>
 800536a:	3601      	adds	r6, #1
 800536c:	e7d9      	b.n	8005322 <_printf_common+0x8e>
	...

08005370 <_printf_i>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	7e0f      	ldrb	r7, [r1, #24]
 8005376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005378:	2f78      	cmp	r7, #120	; 0x78
 800537a:	4691      	mov	r9, r2
 800537c:	4680      	mov	r8, r0
 800537e:	460c      	mov	r4, r1
 8005380:	469a      	mov	sl, r3
 8005382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005386:	d807      	bhi.n	8005398 <_printf_i+0x28>
 8005388:	2f62      	cmp	r7, #98	; 0x62
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x32>
 800538c:	2f00      	cmp	r7, #0
 800538e:	f000 80d4 	beq.w	800553a <_printf_i+0x1ca>
 8005392:	2f58      	cmp	r7, #88	; 0x58
 8005394:	f000 80c0 	beq.w	8005518 <_printf_i+0x1a8>
 8005398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800539c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a0:	e03a      	b.n	8005418 <_printf_i+0xa8>
 80053a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053a6:	2b15      	cmp	r3, #21
 80053a8:	d8f6      	bhi.n	8005398 <_printf_i+0x28>
 80053aa:	a101      	add	r1, pc, #4	; (adr r1, 80053b0 <_printf_i+0x40>)
 80053ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	08005399 	.word	0x08005399
 80053bc:	08005399 	.word	0x08005399
 80053c0:	08005399 	.word	0x08005399
 80053c4:	08005399 	.word	0x08005399
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005399 	.word	0x08005399
 80053d0:	08005399 	.word	0x08005399
 80053d4:	08005399 	.word	0x08005399
 80053d8:	08005399 	.word	0x08005399
 80053dc:	08005521 	.word	0x08005521
 80053e0:	08005449 	.word	0x08005449
 80053e4:	080054db 	.word	0x080054db
 80053e8:	08005399 	.word	0x08005399
 80053ec:	08005399 	.word	0x08005399
 80053f0:	08005543 	.word	0x08005543
 80053f4:	08005399 	.word	0x08005399
 80053f8:	08005449 	.word	0x08005449
 80053fc:	08005399 	.word	0x08005399
 8005400:	08005399 	.word	0x08005399
 8005404:	080054e3 	.word	0x080054e3
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005418:	2301      	movs	r3, #1
 800541a:	e09f      	b.n	800555c <_printf_i+0x1ec>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	0607      	lsls	r7, r0, #24
 8005422:	f103 0104 	add.w	r1, r3, #4
 8005426:	6029      	str	r1, [r5, #0]
 8005428:	d501      	bpl.n	800542e <_printf_i+0xbe>
 800542a:	681e      	ldr	r6, [r3, #0]
 800542c:	e003      	b.n	8005436 <_printf_i+0xc6>
 800542e:	0646      	lsls	r6, r0, #25
 8005430:	d5fb      	bpl.n	800542a <_printf_i+0xba>
 8005432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005436:	2e00      	cmp	r6, #0
 8005438:	da03      	bge.n	8005442 <_printf_i+0xd2>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	4276      	negs	r6, r6
 800543e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005442:	485a      	ldr	r0, [pc, #360]	; (80055ac <_printf_i+0x23c>)
 8005444:	230a      	movs	r3, #10
 8005446:	e012      	b.n	800546e <_printf_i+0xfe>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	6029      	str	r1, [r5, #0]
 8005450:	0605      	lsls	r5, r0, #24
 8005452:	d501      	bpl.n	8005458 <_printf_i+0xe8>
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	e002      	b.n	800545e <_printf_i+0xee>
 8005458:	0641      	lsls	r1, r0, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0xe4>
 800545c:	881e      	ldrh	r6, [r3, #0]
 800545e:	4853      	ldr	r0, [pc, #332]	; (80055ac <_printf_i+0x23c>)
 8005460:	2f6f      	cmp	r7, #111	; 0x6f
 8005462:	bf0c      	ite	eq
 8005464:	2308      	moveq	r3, #8
 8005466:	230a      	movne	r3, #10
 8005468:	2100      	movs	r1, #0
 800546a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800546e:	6865      	ldr	r5, [r4, #4]
 8005470:	60a5      	str	r5, [r4, #8]
 8005472:	2d00      	cmp	r5, #0
 8005474:	bfa2      	ittt	ge
 8005476:	6821      	ldrge	r1, [r4, #0]
 8005478:	f021 0104 	bicge.w	r1, r1, #4
 800547c:	6021      	strge	r1, [r4, #0]
 800547e:	b90e      	cbnz	r6, 8005484 <_printf_i+0x114>
 8005480:	2d00      	cmp	r5, #0
 8005482:	d04b      	beq.n	800551c <_printf_i+0x1ac>
 8005484:	4615      	mov	r5, r2
 8005486:	fbb6 f1f3 	udiv	r1, r6, r3
 800548a:	fb03 6711 	mls	r7, r3, r1, r6
 800548e:	5dc7      	ldrb	r7, [r0, r7]
 8005490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005494:	4637      	mov	r7, r6
 8005496:	42bb      	cmp	r3, r7
 8005498:	460e      	mov	r6, r1
 800549a:	d9f4      	bls.n	8005486 <_printf_i+0x116>
 800549c:	2b08      	cmp	r3, #8
 800549e:	d10b      	bne.n	80054b8 <_printf_i+0x148>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	07de      	lsls	r6, r3, #31
 80054a4:	d508      	bpl.n	80054b8 <_printf_i+0x148>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	6861      	ldr	r1, [r4, #4]
 80054aa:	4299      	cmp	r1, r3
 80054ac:	bfde      	ittt	le
 80054ae:	2330      	movle	r3, #48	; 0x30
 80054b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054b8:	1b52      	subs	r2, r2, r5
 80054ba:	6122      	str	r2, [r4, #16]
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	464b      	mov	r3, r9
 80054c2:	aa03      	add	r2, sp, #12
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fee4 	bl	8005294 <_printf_common>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d14a      	bne.n	8005566 <_printf_i+0x1f6>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	b004      	add	sp, #16
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f043 0320 	orr.w	r3, r3, #32
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	4833      	ldr	r0, [pc, #204]	; (80055b0 <_printf_i+0x240>)
 80054e4:	2778      	movs	r7, #120	; 0x78
 80054e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6829      	ldr	r1, [r5, #0]
 80054ee:	061f      	lsls	r7, r3, #24
 80054f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054f4:	d402      	bmi.n	80054fc <_printf_i+0x18c>
 80054f6:	065f      	lsls	r7, r3, #25
 80054f8:	bf48      	it	mi
 80054fa:	b2b6      	uxthmi	r6, r6
 80054fc:	07df      	lsls	r7, r3, #31
 80054fe:	bf48      	it	mi
 8005500:	f043 0320 	orrmi.w	r3, r3, #32
 8005504:	6029      	str	r1, [r5, #0]
 8005506:	bf48      	it	mi
 8005508:	6023      	strmi	r3, [r4, #0]
 800550a:	b91e      	cbnz	r6, 8005514 <_printf_i+0x1a4>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2310      	movs	r3, #16
 8005516:	e7a7      	b.n	8005468 <_printf_i+0xf8>
 8005518:	4824      	ldr	r0, [pc, #144]	; (80055ac <_printf_i+0x23c>)
 800551a:	e7e4      	b.n	80054e6 <_printf_i+0x176>
 800551c:	4615      	mov	r5, r2
 800551e:	e7bd      	b.n	800549c <_printf_i+0x12c>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	6826      	ldr	r6, [r4, #0]
 8005524:	6961      	ldr	r1, [r4, #20]
 8005526:	1d18      	adds	r0, r3, #4
 8005528:	6028      	str	r0, [r5, #0]
 800552a:	0635      	lsls	r5, r6, #24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	d501      	bpl.n	8005534 <_printf_i+0x1c4>
 8005530:	6019      	str	r1, [r3, #0]
 8005532:	e002      	b.n	800553a <_printf_i+0x1ca>
 8005534:	0670      	lsls	r0, r6, #25
 8005536:	d5fb      	bpl.n	8005530 <_printf_i+0x1c0>
 8005538:	8019      	strh	r1, [r3, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	4615      	mov	r5, r2
 8005540:	e7bc      	b.n	80054bc <_printf_i+0x14c>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	602a      	str	r2, [r5, #0]
 8005548:	681d      	ldr	r5, [r3, #0]
 800554a:	6862      	ldr	r2, [r4, #4]
 800554c:	2100      	movs	r1, #0
 800554e:	4628      	mov	r0, r5
 8005550:	f7fa fe3e 	bl	80001d0 <memchr>
 8005554:	b108      	cbz	r0, 800555a <_printf_i+0x1ea>
 8005556:	1b40      	subs	r0, r0, r5
 8005558:	6060      	str	r0, [r4, #4]
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	2300      	movs	r3, #0
 8005560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005564:	e7aa      	b.n	80054bc <_printf_i+0x14c>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	462a      	mov	r2, r5
 800556a:	4649      	mov	r1, r9
 800556c:	4640      	mov	r0, r8
 800556e:	47d0      	blx	sl
 8005570:	3001      	adds	r0, #1
 8005572:	d0ad      	beq.n	80054d0 <_printf_i+0x160>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	079b      	lsls	r3, r3, #30
 8005578:	d413      	bmi.n	80055a2 <_printf_i+0x232>
 800557a:	68e0      	ldr	r0, [r4, #12]
 800557c:	9b03      	ldr	r3, [sp, #12]
 800557e:	4298      	cmp	r0, r3
 8005580:	bfb8      	it	lt
 8005582:	4618      	movlt	r0, r3
 8005584:	e7a6      	b.n	80054d4 <_printf_i+0x164>
 8005586:	2301      	movs	r3, #1
 8005588:	4632      	mov	r2, r6
 800558a:	4649      	mov	r1, r9
 800558c:	4640      	mov	r0, r8
 800558e:	47d0      	blx	sl
 8005590:	3001      	adds	r0, #1
 8005592:	d09d      	beq.n	80054d0 <_printf_i+0x160>
 8005594:	3501      	adds	r5, #1
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	9903      	ldr	r1, [sp, #12]
 800559a:	1a5b      	subs	r3, r3, r1
 800559c:	42ab      	cmp	r3, r5
 800559e:	dcf2      	bgt.n	8005586 <_printf_i+0x216>
 80055a0:	e7eb      	b.n	800557a <_printf_i+0x20a>
 80055a2:	2500      	movs	r5, #0
 80055a4:	f104 0619 	add.w	r6, r4, #25
 80055a8:	e7f5      	b.n	8005596 <_printf_i+0x226>
 80055aa:	bf00      	nop
 80055ac:	0800a01c 	.word	0x0800a01c
 80055b0:	0800a02d 	.word	0x0800a02d

080055b4 <_scanf_float>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	b087      	sub	sp, #28
 80055ba:	4617      	mov	r7, r2
 80055bc:	9303      	str	r3, [sp, #12]
 80055be:	688b      	ldr	r3, [r1, #8]
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055c6:	bf83      	ittte	hi
 80055c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055cc:	195b      	addhi	r3, r3, r5
 80055ce:	9302      	strhi	r3, [sp, #8]
 80055d0:	2300      	movls	r3, #0
 80055d2:	bf86      	itte	hi
 80055d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055d8:	608b      	strhi	r3, [r1, #8]
 80055da:	9302      	strls	r3, [sp, #8]
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	468b      	mov	fp, r1
 80055e0:	2500      	movs	r5, #0
 80055e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80055ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055ee:	4680      	mov	r8, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	465e      	mov	r6, fp
 80055f4:	46aa      	mov	sl, r5
 80055f6:	46a9      	mov	r9, r5
 80055f8:	9501      	str	r5, [sp, #4]
 80055fa:	68a2      	ldr	r2, [r4, #8]
 80055fc:	b152      	cbz	r2, 8005614 <_scanf_float+0x60>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b4e      	cmp	r3, #78	; 0x4e
 8005604:	d864      	bhi.n	80056d0 <_scanf_float+0x11c>
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d83c      	bhi.n	8005684 <_scanf_float+0xd0>
 800560a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800560e:	b2c8      	uxtb	r0, r1
 8005610:	280e      	cmp	r0, #14
 8005612:	d93a      	bls.n	800568a <_scanf_float+0xd6>
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	d003      	beq.n	8005622 <_scanf_float+0x6e>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005626:	f1ba 0f01 	cmp.w	sl, #1
 800562a:	f200 8113 	bhi.w	8005854 <_scanf_float+0x2a0>
 800562e:	455e      	cmp	r6, fp
 8005630:	f200 8105 	bhi.w	800583e <_scanf_float+0x28a>
 8005634:	2501      	movs	r5, #1
 8005636:	4628      	mov	r0, r5
 8005638:	b007      	add	sp, #28
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005642:	2a0d      	cmp	r2, #13
 8005644:	d8e6      	bhi.n	8005614 <_scanf_float+0x60>
 8005646:	a101      	add	r1, pc, #4	; (adr r1, 800564c <_scanf_float+0x98>)
 8005648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800564c:	0800578b 	.word	0x0800578b
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	08005615 	.word	0x08005615
 800565c:	080057eb 	.word	0x080057eb
 8005660:	080057c3 	.word	0x080057c3
 8005664:	08005615 	.word	0x08005615
 8005668:	08005615 	.word	0x08005615
 800566c:	08005799 	.word	0x08005799
 8005670:	08005615 	.word	0x08005615
 8005674:	08005615 	.word	0x08005615
 8005678:	08005615 	.word	0x08005615
 800567c:	08005615 	.word	0x08005615
 8005680:	08005751 	.word	0x08005751
 8005684:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005688:	e7db      	b.n	8005642 <_scanf_float+0x8e>
 800568a:	290e      	cmp	r1, #14
 800568c:	d8c2      	bhi.n	8005614 <_scanf_float+0x60>
 800568e:	a001      	add	r0, pc, #4	; (adr r0, 8005694 <_scanf_float+0xe0>)
 8005690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005694:	08005743 	.word	0x08005743
 8005698:	08005615 	.word	0x08005615
 800569c:	08005743 	.word	0x08005743
 80056a0:	080057d7 	.word	0x080057d7
 80056a4:	08005615 	.word	0x08005615
 80056a8:	080056f1 	.word	0x080056f1
 80056ac:	0800572d 	.word	0x0800572d
 80056b0:	0800572d 	.word	0x0800572d
 80056b4:	0800572d 	.word	0x0800572d
 80056b8:	0800572d 	.word	0x0800572d
 80056bc:	0800572d 	.word	0x0800572d
 80056c0:	0800572d 	.word	0x0800572d
 80056c4:	0800572d 	.word	0x0800572d
 80056c8:	0800572d 	.word	0x0800572d
 80056cc:	0800572d 	.word	0x0800572d
 80056d0:	2b6e      	cmp	r3, #110	; 0x6e
 80056d2:	d809      	bhi.n	80056e8 <_scanf_float+0x134>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d8b2      	bhi.n	800563e <_scanf_float+0x8a>
 80056d8:	2b54      	cmp	r3, #84	; 0x54
 80056da:	d077      	beq.n	80057cc <_scanf_float+0x218>
 80056dc:	2b59      	cmp	r3, #89	; 0x59
 80056de:	d199      	bne.n	8005614 <_scanf_float+0x60>
 80056e0:	2d07      	cmp	r5, #7
 80056e2:	d197      	bne.n	8005614 <_scanf_float+0x60>
 80056e4:	2508      	movs	r5, #8
 80056e6:	e029      	b.n	800573c <_scanf_float+0x188>
 80056e8:	2b74      	cmp	r3, #116	; 0x74
 80056ea:	d06f      	beq.n	80057cc <_scanf_float+0x218>
 80056ec:	2b79      	cmp	r3, #121	; 0x79
 80056ee:	e7f6      	b.n	80056de <_scanf_float+0x12a>
 80056f0:	6821      	ldr	r1, [r4, #0]
 80056f2:	05c8      	lsls	r0, r1, #23
 80056f4:	d51a      	bpl.n	800572c <_scanf_float+0x178>
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056fc:	6021      	str	r1, [r4, #0]
 80056fe:	f109 0901 	add.w	r9, r9, #1
 8005702:	b11b      	cbz	r3, 800570c <_scanf_float+0x158>
 8005704:	3b01      	subs	r3, #1
 8005706:	3201      	adds	r2, #1
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	60a2      	str	r2, [r4, #8]
 800570c:	68a3      	ldr	r3, [r4, #8]
 800570e:	3b01      	subs	r3, #1
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	3301      	adds	r3, #1
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	f340 8084 	ble.w	800582c <_scanf_float+0x278>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	e766      	b.n	80055fa <_scanf_float+0x46>
 800572c:	eb1a 0f05 	cmn.w	sl, r5
 8005730:	f47f af70 	bne.w	8005614 <_scanf_float+0x60>
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	f806 3b01 	strb.w	r3, [r6], #1
 8005740:	e7e4      	b.n	800570c <_scanf_float+0x158>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	0610      	lsls	r0, r2, #24
 8005746:	f57f af65 	bpl.w	8005614 <_scanf_float+0x60>
 800574a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574e:	e7f4      	b.n	800573a <_scanf_float+0x186>
 8005750:	f1ba 0f00 	cmp.w	sl, #0
 8005754:	d10e      	bne.n	8005774 <_scanf_float+0x1c0>
 8005756:	f1b9 0f00 	cmp.w	r9, #0
 800575a:	d10e      	bne.n	800577a <_scanf_float+0x1c6>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005762:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005766:	d108      	bne.n	800577a <_scanf_float+0x1c6>
 8005768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	f04f 0a01 	mov.w	sl, #1
 8005772:	e7e3      	b.n	800573c <_scanf_float+0x188>
 8005774:	f1ba 0f02 	cmp.w	sl, #2
 8005778:	d055      	beq.n	8005826 <_scanf_float+0x272>
 800577a:	2d01      	cmp	r5, #1
 800577c:	d002      	beq.n	8005784 <_scanf_float+0x1d0>
 800577e:	2d04      	cmp	r5, #4
 8005780:	f47f af48 	bne.w	8005614 <_scanf_float+0x60>
 8005784:	3501      	adds	r5, #1
 8005786:	b2ed      	uxtb	r5, r5
 8005788:	e7d8      	b.n	800573c <_scanf_float+0x188>
 800578a:	f1ba 0f01 	cmp.w	sl, #1
 800578e:	f47f af41 	bne.w	8005614 <_scanf_float+0x60>
 8005792:	f04f 0a02 	mov.w	sl, #2
 8005796:	e7d1      	b.n	800573c <_scanf_float+0x188>
 8005798:	b97d      	cbnz	r5, 80057ba <_scanf_float+0x206>
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	f47f af3c 	bne.w	800561a <_scanf_float+0x66>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057ac:	f47f af39 	bne.w	8005622 <_scanf_float+0x6e>
 80057b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	2501      	movs	r5, #1
 80057b8:	e7c0      	b.n	800573c <_scanf_float+0x188>
 80057ba:	2d03      	cmp	r5, #3
 80057bc:	d0e2      	beq.n	8005784 <_scanf_float+0x1d0>
 80057be:	2d05      	cmp	r5, #5
 80057c0:	e7de      	b.n	8005780 <_scanf_float+0x1cc>
 80057c2:	2d02      	cmp	r5, #2
 80057c4:	f47f af26 	bne.w	8005614 <_scanf_float+0x60>
 80057c8:	2503      	movs	r5, #3
 80057ca:	e7b7      	b.n	800573c <_scanf_float+0x188>
 80057cc:	2d06      	cmp	r5, #6
 80057ce:	f47f af21 	bne.w	8005614 <_scanf_float+0x60>
 80057d2:	2507      	movs	r5, #7
 80057d4:	e7b2      	b.n	800573c <_scanf_float+0x188>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	0591      	lsls	r1, r2, #22
 80057da:	f57f af1b 	bpl.w	8005614 <_scanf_float+0x60>
 80057de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057e8:	e7a8      	b.n	800573c <_scanf_float+0x188>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057f4:	d006      	beq.n	8005804 <_scanf_float+0x250>
 80057f6:	0550      	lsls	r0, r2, #21
 80057f8:	f57f af0c 	bpl.w	8005614 <_scanf_float+0x60>
 80057fc:	f1b9 0f00 	cmp.w	r9, #0
 8005800:	f43f af0f 	beq.w	8005622 <_scanf_float+0x6e>
 8005804:	0591      	lsls	r1, r2, #22
 8005806:	bf58      	it	pl
 8005808:	9901      	ldrpl	r1, [sp, #4]
 800580a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800580e:	bf58      	it	pl
 8005810:	eba9 0101 	subpl.w	r1, r9, r1
 8005814:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005818:	bf58      	it	pl
 800581a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800581e:	6022      	str	r2, [r4, #0]
 8005820:	f04f 0900 	mov.w	r9, #0
 8005824:	e78a      	b.n	800573c <_scanf_float+0x188>
 8005826:	f04f 0a03 	mov.w	sl, #3
 800582a:	e787      	b.n	800573c <_scanf_float+0x188>
 800582c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005830:	4639      	mov	r1, r7
 8005832:	4640      	mov	r0, r8
 8005834:	4798      	blx	r3
 8005836:	2800      	cmp	r0, #0
 8005838:	f43f aedf 	beq.w	80055fa <_scanf_float+0x46>
 800583c:	e6ea      	b.n	8005614 <_scanf_float+0x60>
 800583e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005846:	463a      	mov	r2, r7
 8005848:	4640      	mov	r0, r8
 800584a:	4798      	blx	r3
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	3b01      	subs	r3, #1
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	e6ec      	b.n	800562e <_scanf_float+0x7a>
 8005854:	1e6b      	subs	r3, r5, #1
 8005856:	2b06      	cmp	r3, #6
 8005858:	d825      	bhi.n	80058a6 <_scanf_float+0x2f2>
 800585a:	2d02      	cmp	r5, #2
 800585c:	d836      	bhi.n	80058cc <_scanf_float+0x318>
 800585e:	455e      	cmp	r6, fp
 8005860:	f67f aee8 	bls.w	8005634 <_scanf_float+0x80>
 8005864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005868:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800586c:	463a      	mov	r2, r7
 800586e:	4640      	mov	r0, r8
 8005870:	4798      	blx	r3
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	3b01      	subs	r3, #1
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	e7f1      	b.n	800585e <_scanf_float+0x2aa>
 800587a:	9802      	ldr	r0, [sp, #8]
 800587c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005880:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005884:	9002      	str	r0, [sp, #8]
 8005886:	463a      	mov	r2, r7
 8005888:	4640      	mov	r0, r8
 800588a:	4798      	blx	r3
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	3b01      	subs	r3, #1
 8005890:	6123      	str	r3, [r4, #16]
 8005892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005896:	fa5f fa8a 	uxtb.w	sl, sl
 800589a:	f1ba 0f02 	cmp.w	sl, #2
 800589e:	d1ec      	bne.n	800587a <_scanf_float+0x2c6>
 80058a0:	3d03      	subs	r5, #3
 80058a2:	b2ed      	uxtb	r5, r5
 80058a4:	1b76      	subs	r6, r6, r5
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	05da      	lsls	r2, r3, #23
 80058aa:	d52f      	bpl.n	800590c <_scanf_float+0x358>
 80058ac:	055b      	lsls	r3, r3, #21
 80058ae:	d510      	bpl.n	80058d2 <_scanf_float+0x31e>
 80058b0:	455e      	cmp	r6, fp
 80058b2:	f67f aebf 	bls.w	8005634 <_scanf_float+0x80>
 80058b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058be:	463a      	mov	r2, r7
 80058c0:	4640      	mov	r0, r8
 80058c2:	4798      	blx	r3
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	e7f1      	b.n	80058b0 <_scanf_float+0x2fc>
 80058cc:	46aa      	mov	sl, r5
 80058ce:	9602      	str	r6, [sp, #8]
 80058d0:	e7df      	b.n	8005892 <_scanf_float+0x2de>
 80058d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	2965      	cmp	r1, #101	; 0x65
 80058da:	f103 33ff 	add.w	r3, r3, #4294967295
 80058de:	f106 35ff 	add.w	r5, r6, #4294967295
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	d00c      	beq.n	8005900 <_scanf_float+0x34c>
 80058e6:	2945      	cmp	r1, #69	; 0x45
 80058e8:	d00a      	beq.n	8005900 <_scanf_float+0x34c>
 80058ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ee:	463a      	mov	r2, r7
 80058f0:	4640      	mov	r0, r8
 80058f2:	4798      	blx	r3
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	1eb5      	subs	r5, r6, #2
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005904:	463a      	mov	r2, r7
 8005906:	4640      	mov	r0, r8
 8005908:	4798      	blx	r3
 800590a:	462e      	mov	r6, r5
 800590c:	6825      	ldr	r5, [r4, #0]
 800590e:	f015 0510 	ands.w	r5, r5, #16
 8005912:	d158      	bne.n	80059c6 <_scanf_float+0x412>
 8005914:	7035      	strb	r5, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005920:	d11c      	bne.n	800595c <_scanf_float+0x3a8>
 8005922:	9b01      	ldr	r3, [sp, #4]
 8005924:	454b      	cmp	r3, r9
 8005926:	eba3 0209 	sub.w	r2, r3, r9
 800592a:	d124      	bne.n	8005976 <_scanf_float+0x3c2>
 800592c:	2200      	movs	r2, #0
 800592e:	4659      	mov	r1, fp
 8005930:	4640      	mov	r0, r8
 8005932:	f002 fc95 	bl	8008260 <_strtod_r>
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f011 0f02 	tst.w	r1, #2
 8005940:	ec57 6b10 	vmov	r6, r7, d0
 8005944:	f103 0204 	add.w	r2, r3, #4
 8005948:	d020      	beq.n	800598c <_scanf_float+0x3d8>
 800594a:	9903      	ldr	r1, [sp, #12]
 800594c:	600a      	str	r2, [r1, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	e9c3 6700 	strd	r6, r7, [r3]
 8005954:	68e3      	ldr	r3, [r4, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60e3      	str	r3, [r4, #12]
 800595a:	e66c      	b.n	8005636 <_scanf_float+0x82>
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0e4      	beq.n	800592c <_scanf_float+0x378>
 8005962:	9905      	ldr	r1, [sp, #20]
 8005964:	230a      	movs	r3, #10
 8005966:	462a      	mov	r2, r5
 8005968:	3101      	adds	r1, #1
 800596a:	4640      	mov	r0, r8
 800596c:	f002 fd00 	bl	8008370 <_strtol_r>
 8005970:	9b04      	ldr	r3, [sp, #16]
 8005972:	9e05      	ldr	r6, [sp, #20]
 8005974:	1ac2      	subs	r2, r0, r3
 8005976:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800597a:	429e      	cmp	r6, r3
 800597c:	bf28      	it	cs
 800597e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005982:	4912      	ldr	r1, [pc, #72]	; (80059cc <_scanf_float+0x418>)
 8005984:	4630      	mov	r0, r6
 8005986:	f000 f92d 	bl	8005be4 <siprintf>
 800598a:	e7cf      	b.n	800592c <_scanf_float+0x378>
 800598c:	f011 0f04 	tst.w	r1, #4
 8005990:	9903      	ldr	r1, [sp, #12]
 8005992:	600a      	str	r2, [r1, #0]
 8005994:	d1db      	bne.n	800594e <_scanf_float+0x39a>
 8005996:	f8d3 8000 	ldr.w	r8, [r3]
 800599a:	ee10 2a10 	vmov	r2, s0
 800599e:	ee10 0a10 	vmov	r0, s0
 80059a2:	463b      	mov	r3, r7
 80059a4:	4639      	mov	r1, r7
 80059a6:	f7fb f8c1 	bl	8000b2c <__aeabi_dcmpun>
 80059aa:	b128      	cbz	r0, 80059b8 <_scanf_float+0x404>
 80059ac:	4808      	ldr	r0, [pc, #32]	; (80059d0 <_scanf_float+0x41c>)
 80059ae:	f000 fa1b 	bl	8005de8 <nanf>
 80059b2:	ed88 0a00 	vstr	s0, [r8]
 80059b6:	e7cd      	b.n	8005954 <_scanf_float+0x3a0>
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fb f914 	bl	8000be8 <__aeabi_d2f>
 80059c0:	f8c8 0000 	str.w	r0, [r8]
 80059c4:	e7c6      	b.n	8005954 <_scanf_float+0x3a0>
 80059c6:	2500      	movs	r5, #0
 80059c8:	e635      	b.n	8005636 <_scanf_float+0x82>
 80059ca:	bf00      	nop
 80059cc:	0800a03e 	.word	0x0800a03e
 80059d0:	0800a3f0 	.word	0x0800a3f0

080059d4 <std>:
 80059d4:	2300      	movs	r3, #0
 80059d6:	b510      	push	{r4, lr}
 80059d8:	4604      	mov	r4, r0
 80059da:	e9c0 3300 	strd	r3, r3, [r0]
 80059de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059e2:	6083      	str	r3, [r0, #8]
 80059e4:	8181      	strh	r1, [r0, #12]
 80059e6:	6643      	str	r3, [r0, #100]	; 0x64
 80059e8:	81c2      	strh	r2, [r0, #14]
 80059ea:	6183      	str	r3, [r0, #24]
 80059ec:	4619      	mov	r1, r3
 80059ee:	2208      	movs	r2, #8
 80059f0:	305c      	adds	r0, #92	; 0x5c
 80059f2:	f000 f95a 	bl	8005caa <memset>
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <std+0x58>)
 80059f8:	6263      	str	r3, [r4, #36]	; 0x24
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <std+0x5c>)
 80059fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80059fe:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <std+0x60>)
 8005a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <std+0x64>)
 8005a04:	6323      	str	r3, [r4, #48]	; 0x30
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <std+0x68>)
 8005a08:	6224      	str	r4, [r4, #32]
 8005a0a:	429c      	cmp	r4, r3
 8005a0c:	d006      	beq.n	8005a1c <std+0x48>
 8005a0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a12:	4294      	cmp	r4, r2
 8005a14:	d002      	beq.n	8005a1c <std+0x48>
 8005a16:	33d0      	adds	r3, #208	; 0xd0
 8005a18:	429c      	cmp	r4, r3
 8005a1a:	d105      	bne.n	8005a28 <std+0x54>
 8005a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a24:	f000 b9d4 	b.w	8005dd0 <__retarget_lock_init_recursive>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	bf00      	nop
 8005a2c:	08005c25 	.word	0x08005c25
 8005a30:	08005c47 	.word	0x08005c47
 8005a34:	08005c7f 	.word	0x08005c7f
 8005a38:	08005ca3 	.word	0x08005ca3
 8005a3c:	200009e0 	.word	0x200009e0

08005a40 <stdio_exit_handler>:
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <stdio_exit_handler+0xc>)
 8005a42:	4903      	ldr	r1, [pc, #12]	; (8005a50 <stdio_exit_handler+0x10>)
 8005a44:	4803      	ldr	r0, [pc, #12]	; (8005a54 <stdio_exit_handler+0x14>)
 8005a46:	f000 b869 	b.w	8005b1c <_fwalk_sglue>
 8005a4a:	bf00      	nop
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	08008d39 	.word	0x08008d39
 8005a54:	20000018 	.word	0x20000018

08005a58 <cleanup_stdio>:
 8005a58:	6841      	ldr	r1, [r0, #4]
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <cleanup_stdio+0x34>)
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	4604      	mov	r4, r0
 8005a62:	d001      	beq.n	8005a68 <cleanup_stdio+0x10>
 8005a64:	f003 f968 	bl	8008d38 <_fflush_r>
 8005a68:	68a1      	ldr	r1, [r4, #8]
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <cleanup_stdio+0x38>)
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <cleanup_stdio+0x1e>
 8005a70:	4620      	mov	r0, r4
 8005a72:	f003 f961 	bl	8008d38 <_fflush_r>
 8005a76:	68e1      	ldr	r1, [r4, #12]
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <cleanup_stdio+0x3c>)
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d004      	beq.n	8005a88 <cleanup_stdio+0x30>
 8005a7e:	4620      	mov	r0, r4
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f003 b958 	b.w	8008d38 <_fflush_r>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200009e0 	.word	0x200009e0
 8005a90:	20000a48 	.word	0x20000a48
 8005a94:	20000ab0 	.word	0x20000ab0

08005a98 <global_stdio_init.part.0>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <global_stdio_init.part.0+0x30>)
 8005a9c:	4c0b      	ldr	r4, [pc, #44]	; (8005acc <global_stdio_init.part.0+0x34>)
 8005a9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <global_stdio_init.part.0+0x38>)
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	f7ff ff94 	bl	80059d4 <std>
 8005aac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2109      	movs	r1, #9
 8005ab4:	f7ff ff8e 	bl	80059d4 <std>
 8005ab8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005abc:	2202      	movs	r2, #2
 8005abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac2:	2112      	movs	r1, #18
 8005ac4:	f7ff bf86 	b.w	80059d4 <std>
 8005ac8:	20000b18 	.word	0x20000b18
 8005acc:	200009e0 	.word	0x200009e0
 8005ad0:	08005a41 	.word	0x08005a41

08005ad4 <__sfp_lock_acquire>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__sfp_lock_acquire+0x8>)
 8005ad6:	f000 b97c 	b.w	8005dd2 <__retarget_lock_acquire_recursive>
 8005ada:	bf00      	nop
 8005adc:	20000b21 	.word	0x20000b21

08005ae0 <__sfp_lock_release>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__sfp_lock_release+0x8>)
 8005ae2:	f000 b977 	b.w	8005dd4 <__retarget_lock_release_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	20000b21 	.word	0x20000b21

08005aec <__sinit>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	4604      	mov	r4, r0
 8005af0:	f7ff fff0 	bl	8005ad4 <__sfp_lock_acquire>
 8005af4:	6a23      	ldr	r3, [r4, #32]
 8005af6:	b11b      	cbz	r3, 8005b00 <__sinit+0x14>
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	f7ff bff0 	b.w	8005ae0 <__sfp_lock_release>
 8005b00:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <__sinit+0x28>)
 8005b02:	6223      	str	r3, [r4, #32]
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <__sinit+0x2c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f5      	bne.n	8005af8 <__sinit+0xc>
 8005b0c:	f7ff ffc4 	bl	8005a98 <global_stdio_init.part.0>
 8005b10:	e7f2      	b.n	8005af8 <__sinit+0xc>
 8005b12:	bf00      	nop
 8005b14:	08005a59 	.word	0x08005a59
 8005b18:	20000b18 	.word	0x20000b18

08005b1c <_fwalk_sglue>:
 8005b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	4607      	mov	r7, r0
 8005b22:	4688      	mov	r8, r1
 8005b24:	4614      	mov	r4, r2
 8005b26:	2600      	movs	r6, #0
 8005b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b30:	d505      	bpl.n	8005b3e <_fwalk_sglue+0x22>
 8005b32:	6824      	ldr	r4, [r4, #0]
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	d1f7      	bne.n	8005b28 <_fwalk_sglue+0xc>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d907      	bls.n	8005b54 <_fwalk_sglue+0x38>
 8005b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	d003      	beq.n	8005b54 <_fwalk_sglue+0x38>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4638      	mov	r0, r7
 8005b50:	47c0      	blx	r8
 8005b52:	4306      	orrs	r6, r0
 8005b54:	3568      	adds	r5, #104	; 0x68
 8005b56:	e7e9      	b.n	8005b2c <_fwalk_sglue+0x10>

08005b58 <iscanf>:
 8005b58:	b40f      	push	{r0, r1, r2, r3}
 8005b5a:	b507      	push	{r0, r1, r2, lr}
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <iscanf+0x20>)
 8005b5e:	ab04      	add	r3, sp, #16
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b66:	6841      	ldr	r1, [r0, #4]
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	f002 fefd 	bl	8008968 <_vfiscanf_r>
 8005b6e:	b003      	add	sp, #12
 8005b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b74:	b004      	add	sp, #16
 8005b76:	4770      	bx	lr
 8005b78:	20000064 	.word	0x20000064

08005b7c <sniprintf>:
 8005b7c:	b40c      	push	{r2, r3}
 8005b7e:	b530      	push	{r4, r5, lr}
 8005b80:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <sniprintf+0x64>)
 8005b82:	1e0c      	subs	r4, r1, #0
 8005b84:	681d      	ldr	r5, [r3, #0]
 8005b86:	b09d      	sub	sp, #116	; 0x74
 8005b88:	da08      	bge.n	8005b9c <sniprintf+0x20>
 8005b8a:	238b      	movs	r3, #139	; 0x8b
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	b01d      	add	sp, #116	; 0x74
 8005b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b98:	b002      	add	sp, #8
 8005b9a:	4770      	bx	lr
 8005b9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ba4:	bf14      	ite	ne
 8005ba6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005baa:	4623      	moveq	r3, r4
 8005bac:	9304      	str	r3, [sp, #16]
 8005bae:	9307      	str	r3, [sp, #28]
 8005bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bb4:	9002      	str	r0, [sp, #8]
 8005bb6:	9006      	str	r0, [sp, #24]
 8005bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005bbe:	ab21      	add	r3, sp, #132	; 0x84
 8005bc0:	a902      	add	r1, sp, #8
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	f002 fc2f 	bl	8008428 <_svfiprintf_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	bfbc      	itt	lt
 8005bce:	238b      	movlt	r3, #139	; 0x8b
 8005bd0:	602b      	strlt	r3, [r5, #0]
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	d0dd      	beq.n	8005b92 <sniprintf+0x16>
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e7d9      	b.n	8005b92 <sniprintf+0x16>
 8005bde:	bf00      	nop
 8005be0:	20000064 	.word	0x20000064

08005be4 <siprintf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	b500      	push	{lr}
 8005be8:	b09c      	sub	sp, #112	; 0x70
 8005bea:	ab1d      	add	r3, sp, #116	; 0x74
 8005bec:	9002      	str	r0, [sp, #8]
 8005bee:	9006      	str	r0, [sp, #24]
 8005bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bf4:	4809      	ldr	r0, [pc, #36]	; (8005c1c <siprintf+0x38>)
 8005bf6:	9107      	str	r1, [sp, #28]
 8005bf8:	9104      	str	r1, [sp, #16]
 8005bfa:	4909      	ldr	r1, [pc, #36]	; (8005c20 <siprintf+0x3c>)
 8005bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c00:	9105      	str	r1, [sp, #20]
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	a902      	add	r1, sp, #8
 8005c08:	f002 fc0e 	bl	8008428 <_svfiprintf_r>
 8005c0c:	9b02      	ldr	r3, [sp, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	b01c      	add	sp, #112	; 0x70
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b003      	add	sp, #12
 8005c1a:	4770      	bx	lr
 8005c1c:	20000064 	.word	0x20000064
 8005c20:	ffff0208 	.word	0xffff0208

08005c24 <__sread>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	460c      	mov	r4, r1
 8005c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2c:	f000 f882 	bl	8005d34 <_read_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	bfab      	itete	ge
 8005c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c36:	89a3      	ldrhlt	r3, [r4, #12]
 8005c38:	181b      	addge	r3, r3, r0
 8005c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c3e:	bfac      	ite	ge
 8005c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c42:	81a3      	strhlt	r3, [r4, #12]
 8005c44:	bd10      	pop	{r4, pc}

08005c46 <__swrite>:
 8005c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	898b      	ldrh	r3, [r1, #12]
 8005c4e:	05db      	lsls	r3, r3, #23
 8005c50:	4605      	mov	r5, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	4616      	mov	r6, r2
 8005c56:	d505      	bpl.n	8005c64 <__swrite+0x1e>
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f000 f856 	bl	8005d10 <_lseek_r>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	4632      	mov	r2, r6
 8005c72:	463b      	mov	r3, r7
 8005c74:	4628      	mov	r0, r5
 8005c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	f000 b86d 	b.w	8005d58 <_write_r>

08005c7e <__sseek>:
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	460c      	mov	r4, r1
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 f843 	bl	8005d10 <_lseek_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	bf15      	itete	ne
 8005c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c9a:	81a3      	strheq	r3, [r4, #12]
 8005c9c:	bf18      	it	ne
 8005c9e:	81a3      	strhne	r3, [r4, #12]
 8005ca0:	bd10      	pop	{r4, pc}

08005ca2 <__sclose>:
 8005ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca6:	f000 b823 	b.w	8005cf0 <_close_r>

08005caa <memset>:
 8005caa:	4402      	add	r2, r0
 8005cac:	4603      	mov	r3, r0
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d100      	bne.n	8005cb4 <memset+0xa>
 8005cb2:	4770      	bx	lr
 8005cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb8:	e7f9      	b.n	8005cae <memset+0x4>

08005cba <strstr>:
 8005cba:	780a      	ldrb	r2, [r1, #0]
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	b96a      	cbnz	r2, 8005cdc <strstr+0x22>
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d109      	bne.n	8005cda <strstr+0x20>
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4605      	mov	r5, r0
 8005cca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f6      	beq.n	8005cc0 <strstr+0x6>
 8005cd2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005cd6:	429e      	cmp	r6, r3
 8005cd8:	d0f7      	beq.n	8005cca <strstr+0x10>
 8005cda:	3001      	adds	r0, #1
 8005cdc:	7803      	ldrb	r3, [r0, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ef      	bne.n	8005cc2 <strstr+0x8>
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	e7ec      	b.n	8005cc0 <strstr+0x6>
	...

08005ce8 <_localeconv_r>:
 8005ce8:	4800      	ldr	r0, [pc, #0]	; (8005cec <_localeconv_r+0x4>)
 8005cea:	4770      	bx	lr
 8005cec:	20000158 	.word	0x20000158

08005cf0 <_close_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_close_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fb ffdd 	bl	8001cba <_close>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_close_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_close_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20000b1c 	.word	0x20000b1c

08005d10 <_lseek_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d07      	ldr	r5, [pc, #28]	; (8005d30 <_lseek_r+0x20>)
 8005d14:	4604      	mov	r4, r0
 8005d16:	4608      	mov	r0, r1
 8005d18:	4611      	mov	r1, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f7fb fff2 	bl	8001d08 <_lseek>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_lseek_r+0x1e>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_lseek_r+0x1e>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	20000b1c 	.word	0x20000b1c

08005d34 <_read_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d07      	ldr	r5, [pc, #28]	; (8005d54 <_read_r+0x20>)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7fb ff80 	bl	8001c48 <_read>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_read_r+0x1e>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_read_r+0x1e>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	20000b1c 	.word	0x20000b1c

08005d58 <_write_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d07      	ldr	r5, [pc, #28]	; (8005d78 <_write_r+0x20>)
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	602a      	str	r2, [r5, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fb ff8b 	bl	8001c82 <_write>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_write_r+0x1e>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_write_r+0x1e>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20000b1c 	.word	0x20000b1c

08005d7c <__errno>:
 8005d7c:	4b01      	ldr	r3, [pc, #4]	; (8005d84 <__errno+0x8>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000064 	.word	0x20000064

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	; (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	; (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f004 f8d4 	bl	8009f48 <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	0800a45c 	.word	0x0800a45c
 8005dc4:	0800a45c 	.word	0x0800a45c
 8005dc8:	0800a45c 	.word	0x0800a45c
 8005dcc:	0800a460 	.word	0x0800a460

08005dd0 <__retarget_lock_init_recursive>:
 8005dd0:	4770      	bx	lr

08005dd2 <__retarget_lock_acquire_recursive>:
 8005dd2:	4770      	bx	lr

08005dd4 <__retarget_lock_release_recursive>:
 8005dd4:	4770      	bx	lr

08005dd6 <strcpy>:
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ddc:	f803 2b01 	strb.w	r2, [r3], #1
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d1f9      	bne.n	8005dd8 <strcpy+0x2>
 8005de4:	4770      	bx	lr
	...

08005de8 <nanf>:
 8005de8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005df0 <nanf+0x8>
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	7fc00000 	.word	0x7fc00000

08005df4 <quorem>:
 8005df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	6903      	ldr	r3, [r0, #16]
 8005dfa:	690c      	ldr	r4, [r1, #16]
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	4607      	mov	r7, r0
 8005e00:	db7e      	blt.n	8005f00 <quorem+0x10c>
 8005e02:	3c01      	subs	r4, #1
 8005e04:	f101 0814 	add.w	r8, r1, #20
 8005e08:	f100 0514 	add.w	r5, r0, #20
 8005e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e26:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e2a:	d331      	bcc.n	8005e90 <quorem+0x9c>
 8005e2c:	f04f 0e00 	mov.w	lr, #0
 8005e30:	4640      	mov	r0, r8
 8005e32:	46ac      	mov	ip, r5
 8005e34:	46f2      	mov	sl, lr
 8005e36:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e3a:	b293      	uxth	r3, r2
 8005e3c:	fb06 e303 	mla	r3, r6, r3, lr
 8005e40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e44:	0c1a      	lsrs	r2, r3, #16
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ebaa 0303 	sub.w	r3, sl, r3
 8005e4c:	f8dc a000 	ldr.w	sl, [ip]
 8005e50:	fa13 f38a 	uxtah	r3, r3, sl
 8005e54:	fb06 220e 	mla	r2, r6, lr, r2
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e60:	b292      	uxth	r2, r2
 8005e62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e6e:	4581      	cmp	r9, r0
 8005e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e74:	f84c 3b04 	str.w	r3, [ip], #4
 8005e78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e7c:	d2db      	bcs.n	8005e36 <quorem+0x42>
 8005e7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e82:	b92b      	cbnz	r3, 8005e90 <quorem+0x9c>
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	3b04      	subs	r3, #4
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	d32c      	bcc.n	8005ee8 <quorem+0xf4>
 8005e8e:	613c      	str	r4, [r7, #16]
 8005e90:	4638      	mov	r0, r7
 8005e92:	f001 f9f1 	bl	8007278 <__mcmp>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	db22      	blt.n	8005ee0 <quorem+0xec>
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea4:	f8d1 c000 	ldr.w	ip, [r1]
 8005ea8:	b293      	uxth	r3, r2
 8005eaa:	1ac3      	subs	r3, r0, r3
 8005eac:	0c12      	lsrs	r2, r2, #16
 8005eae:	fa13 f38c 	uxtah	r3, r3, ip
 8005eb2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005eb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec0:	45c1      	cmp	r9, r8
 8005ec2:	f841 3b04 	str.w	r3, [r1], #4
 8005ec6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005eca:	d2e9      	bcs.n	8005ea0 <quorem+0xac>
 8005ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ed4:	b922      	cbnz	r2, 8005ee0 <quorem+0xec>
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	429d      	cmp	r5, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	d30a      	bcc.n	8005ef4 <quorem+0x100>
 8005ede:	613c      	str	r4, [r7, #16]
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	3b04      	subs	r3, #4
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d1ce      	bne.n	8005e8e <quorem+0x9a>
 8005ef0:	3c01      	subs	r4, #1
 8005ef2:	e7c9      	b.n	8005e88 <quorem+0x94>
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	3b04      	subs	r3, #4
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d1f0      	bne.n	8005ede <quorem+0xea>
 8005efc:	3c01      	subs	r4, #1
 8005efe:	e7eb      	b.n	8005ed8 <quorem+0xe4>
 8005f00:	2000      	movs	r0, #0
 8005f02:	e7ee      	b.n	8005ee2 <quorem+0xee>
 8005f04:	0000      	movs	r0, r0
	...

08005f08 <_dtoa_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	ed2d 8b04 	vpush	{d8-d9}
 8005f10:	69c5      	ldr	r5, [r0, #28]
 8005f12:	b093      	sub	sp, #76	; 0x4c
 8005f14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f18:	ec57 6b10 	vmov	r6, r7, d0
 8005f1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f20:	9107      	str	r1, [sp, #28]
 8005f22:	4604      	mov	r4, r0
 8005f24:	920a      	str	r2, [sp, #40]	; 0x28
 8005f26:	930d      	str	r3, [sp, #52]	; 0x34
 8005f28:	b975      	cbnz	r5, 8005f48 <_dtoa_r+0x40>
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f000 fe2a 	bl	8006b84 <malloc>
 8005f30:	4602      	mov	r2, r0
 8005f32:	61e0      	str	r0, [r4, #28]
 8005f34:	b920      	cbnz	r0, 8005f40 <_dtoa_r+0x38>
 8005f36:	4bae      	ldr	r3, [pc, #696]	; (80061f0 <_dtoa_r+0x2e8>)
 8005f38:	21ef      	movs	r1, #239	; 0xef
 8005f3a:	48ae      	ldr	r0, [pc, #696]	; (80061f4 <_dtoa_r+0x2ec>)
 8005f3c:	f003 f8f4 	bl	8009128 <__assert_func>
 8005f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f44:	6005      	str	r5, [r0, #0]
 8005f46:	60c5      	str	r5, [r0, #12]
 8005f48:	69e3      	ldr	r3, [r4, #28]
 8005f4a:	6819      	ldr	r1, [r3, #0]
 8005f4c:	b151      	cbz	r1, 8005f64 <_dtoa_r+0x5c>
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	604a      	str	r2, [r1, #4]
 8005f52:	2301      	movs	r3, #1
 8005f54:	4093      	lsls	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 ff07 	bl	8006d6c <_Bfree>
 8005f5e:	69e3      	ldr	r3, [r4, #28]
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	1e3b      	subs	r3, r7, #0
 8005f66:	bfbb      	ittet	lt
 8005f68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	9303      	strlt	r3, [sp, #12]
 8005f6e:	2300      	movge	r3, #0
 8005f70:	2201      	movlt	r2, #1
 8005f72:	bfac      	ite	ge
 8005f74:	f8c8 3000 	strge.w	r3, [r8]
 8005f78:	f8c8 2000 	strlt.w	r2, [r8]
 8005f7c:	4b9e      	ldr	r3, [pc, #632]	; (80061f8 <_dtoa_r+0x2f0>)
 8005f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f82:	ea33 0308 	bics.w	r3, r3, r8
 8005f86:	d11b      	bne.n	8005fc0 <_dtoa_r+0xb8>
 8005f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f94:	4333      	orrs	r3, r6
 8005f96:	f000 8593 	beq.w	8006ac0 <_dtoa_r+0xbb8>
 8005f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f9c:	b963      	cbnz	r3, 8005fb8 <_dtoa_r+0xb0>
 8005f9e:	4b97      	ldr	r3, [pc, #604]	; (80061fc <_dtoa_r+0x2f4>)
 8005fa0:	e027      	b.n	8005ff2 <_dtoa_r+0xea>
 8005fa2:	4b97      	ldr	r3, [pc, #604]	; (8006200 <_dtoa_r+0x2f8>)
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	9800      	ldr	r0, [sp, #0]
 8005fae:	b013      	add	sp, #76	; 0x4c
 8005fb0:	ecbd 8b04 	vpop	{d8-d9}
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	4b90      	ldr	r3, [pc, #576]	; (80061fc <_dtoa_r+0x2f4>)
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	e7f3      	b.n	8005fa8 <_dtoa_r+0xa0>
 8005fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	ec51 0b17 	vmov	r0, r1, d7
 8005fca:	eeb0 8a47 	vmov.f32	s16, s14
 8005fce:	eef0 8a67 	vmov.f32	s17, s15
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f7fa fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd8:	4681      	mov	r9, r0
 8005fda:	b160      	cbz	r0, 8005ff6 <_dtoa_r+0xee>
 8005fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fde:	2301      	movs	r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8568 	beq.w	8006aba <_dtoa_r+0xbb2>
 8005fea:	4b86      	ldr	r3, [pc, #536]	; (8006204 <_dtoa_r+0x2fc>)
 8005fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	e7da      	b.n	8005fac <_dtoa_r+0xa4>
 8005ff6:	aa10      	add	r2, sp, #64	; 0x40
 8005ff8:	a911      	add	r1, sp, #68	; 0x44
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8006000:	eef0 0a68 	vmov.f32	s1, s17
 8006004:	f001 fa4e 	bl	80074a4 <__d2b>
 8006008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800600c:	4682      	mov	sl, r0
 800600e:	2d00      	cmp	r5, #0
 8006010:	d07f      	beq.n	8006112 <_dtoa_r+0x20a>
 8006012:	ee18 3a90 	vmov	r3, s17
 8006016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800601a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800601e:	ec51 0b18 	vmov	r0, r1, d8
 8006022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800602a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800602e:	4619      	mov	r1, r3
 8006030:	2200      	movs	r2, #0
 8006032:	4b75      	ldr	r3, [pc, #468]	; (8006208 <_dtoa_r+0x300>)
 8006034:	f7fa f928 	bl	8000288 <__aeabi_dsub>
 8006038:	a367      	add	r3, pc, #412	; (adr r3, 80061d8 <_dtoa_r+0x2d0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	a367      	add	r3, pc, #412	; (adr r3, 80061e0 <_dtoa_r+0x2d8>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f920 	bl	800028c <__adddf3>
 800604c:	4606      	mov	r6, r0
 800604e:	4628      	mov	r0, r5
 8006050:	460f      	mov	r7, r1
 8006052:	f7fa fa67 	bl	8000524 <__aeabi_i2d>
 8006056:	a364      	add	r3, pc, #400	; (adr r3, 80061e8 <_dtoa_r+0x2e0>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa facc 	bl	80005f8 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	f7fa fd72 	bl	8000b58 <__aeabi_d2iz>
 8006074:	2200      	movs	r2, #0
 8006076:	4683      	mov	fp, r0
 8006078:	2300      	movs	r3, #0
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	f7fa fd2d 	bl	8000adc <__aeabi_dcmplt>
 8006082:	b148      	cbz	r0, 8006098 <_dtoa_r+0x190>
 8006084:	4658      	mov	r0, fp
 8006086:	f7fa fa4d 	bl	8000524 <__aeabi_i2d>
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	f7fa fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006092:	b908      	cbnz	r0, 8006098 <_dtoa_r+0x190>
 8006094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006098:	f1bb 0f16 	cmp.w	fp, #22
 800609c:	d857      	bhi.n	800614e <_dtoa_r+0x246>
 800609e:	4b5b      	ldr	r3, [pc, #364]	; (800620c <_dtoa_r+0x304>)
 80060a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	ec51 0b18 	vmov	r0, r1, d8
 80060ac:	f7fa fd16 	bl	8000adc <__aeabi_dcmplt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d04e      	beq.n	8006152 <_dtoa_r+0x24a>
 80060b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060b8:	2300      	movs	r3, #0
 80060ba:	930c      	str	r3, [sp, #48]	; 0x30
 80060bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060be:	1b5b      	subs	r3, r3, r5
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	bf45      	ittet	mi
 80060c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80060c8:	9305      	strmi	r3, [sp, #20]
 80060ca:	2300      	movpl	r3, #0
 80060cc:	2300      	movmi	r3, #0
 80060ce:	9206      	str	r2, [sp, #24]
 80060d0:	bf54      	ite	pl
 80060d2:	9305      	strpl	r3, [sp, #20]
 80060d4:	9306      	strmi	r3, [sp, #24]
 80060d6:	f1bb 0f00 	cmp.w	fp, #0
 80060da:	db3c      	blt.n	8006156 <_dtoa_r+0x24e>
 80060dc:	9b06      	ldr	r3, [sp, #24]
 80060de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060e2:	445b      	add	r3, fp
 80060e4:	9306      	str	r3, [sp, #24]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9308      	str	r3, [sp, #32]
 80060ea:	9b07      	ldr	r3, [sp, #28]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d868      	bhi.n	80061c2 <_dtoa_r+0x2ba>
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	bfc4      	itt	gt
 80060f4:	3b04      	subgt	r3, #4
 80060f6:	9307      	strgt	r3, [sp, #28]
 80060f8:	9b07      	ldr	r3, [sp, #28]
 80060fa:	f1a3 0302 	sub.w	r3, r3, #2
 80060fe:	bfcc      	ite	gt
 8006100:	2500      	movgt	r5, #0
 8006102:	2501      	movle	r5, #1
 8006104:	2b03      	cmp	r3, #3
 8006106:	f200 8085 	bhi.w	8006214 <_dtoa_r+0x30c>
 800610a:	e8df f003 	tbb	[pc, r3]
 800610e:	3b2e      	.short	0x3b2e
 8006110:	5839      	.short	0x5839
 8006112:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006116:	441d      	add	r5, r3
 8006118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800611c:	2b20      	cmp	r3, #32
 800611e:	bfc1      	itttt	gt
 8006120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006124:	fa08 f803 	lslgt.w	r8, r8, r3
 8006128:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800612c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006130:	bfd6      	itet	le
 8006132:	f1c3 0320 	rsble	r3, r3, #32
 8006136:	ea48 0003 	orrgt.w	r0, r8, r3
 800613a:	fa06 f003 	lslle.w	r0, r6, r3
 800613e:	f7fa f9e1 	bl	8000504 <__aeabi_ui2d>
 8006142:	2201      	movs	r2, #1
 8006144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006148:	3d01      	subs	r5, #1
 800614a:	920e      	str	r2, [sp, #56]	; 0x38
 800614c:	e76f      	b.n	800602e <_dtoa_r+0x126>
 800614e:	2301      	movs	r3, #1
 8006150:	e7b3      	b.n	80060ba <_dtoa_r+0x1b2>
 8006152:	900c      	str	r0, [sp, #48]	; 0x30
 8006154:	e7b2      	b.n	80060bc <_dtoa_r+0x1b4>
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	eba3 030b 	sub.w	r3, r3, fp
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f1cb 0300 	rsb	r3, fp, #0
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	2300      	movs	r3, #0
 8006166:	930b      	str	r3, [sp, #44]	; 0x2c
 8006168:	e7bf      	b.n	80060ea <_dtoa_r+0x1e2>
 800616a:	2300      	movs	r3, #0
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc52      	bgt.n	800621a <_dtoa_r+0x312>
 8006174:	2301      	movs	r3, #1
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	461a      	mov	r2, r3
 800617c:	920a      	str	r2, [sp, #40]	; 0x28
 800617e:	e00b      	b.n	8006198 <_dtoa_r+0x290>
 8006180:	2301      	movs	r3, #1
 8006182:	e7f3      	b.n	800616c <_dtoa_r+0x264>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618a:	445b      	add	r3, fp
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	3301      	adds	r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	bfb8      	it	lt
 8006196:	2301      	movlt	r3, #1
 8006198:	69e0      	ldr	r0, [r4, #28]
 800619a:	2100      	movs	r1, #0
 800619c:	2204      	movs	r2, #4
 800619e:	f102 0614 	add.w	r6, r2, #20
 80061a2:	429e      	cmp	r6, r3
 80061a4:	d93d      	bls.n	8006222 <_dtoa_r+0x31a>
 80061a6:	6041      	str	r1, [r0, #4]
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fd9f 	bl	8006cec <_Balloc>
 80061ae:	9000      	str	r0, [sp, #0]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d139      	bne.n	8006228 <_dtoa_r+0x320>
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <_dtoa_r+0x308>)
 80061b6:	4602      	mov	r2, r0
 80061b8:	f240 11af 	movw	r1, #431	; 0x1af
 80061bc:	e6bd      	b.n	8005f3a <_dtoa_r+0x32>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7e1      	b.n	8006186 <_dtoa_r+0x27e>
 80061c2:	2501      	movs	r5, #1
 80061c4:	2300      	movs	r3, #0
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	9509      	str	r5, [sp, #36]	; 0x24
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2312      	movs	r3, #18
 80061d6:	e7d1      	b.n	800617c <_dtoa_r+0x274>
 80061d8:	636f4361 	.word	0x636f4361
 80061dc:	3fd287a7 	.word	0x3fd287a7
 80061e0:	8b60c8b3 	.word	0x8b60c8b3
 80061e4:	3fc68a28 	.word	0x3fc68a28
 80061e8:	509f79fb 	.word	0x509f79fb
 80061ec:	3fd34413 	.word	0x3fd34413
 80061f0:	0800a050 	.word	0x0800a050
 80061f4:	0800a067 	.word	0x0800a067
 80061f8:	7ff00000 	.word	0x7ff00000
 80061fc:	0800a04c 	.word	0x0800a04c
 8006200:	0800a043 	.word	0x0800a043
 8006204:	0800a3a9 	.word	0x0800a3a9
 8006208:	3ff80000 	.word	0x3ff80000
 800620c:	0800a158 	.word	0x0800a158
 8006210:	0800a0bf 	.word	0x0800a0bf
 8006214:	2301      	movs	r3, #1
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	e7d7      	b.n	80061ca <_dtoa_r+0x2c2>
 800621a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	e7ba      	b.n	8006198 <_dtoa_r+0x290>
 8006222:	3101      	adds	r1, #1
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	e7ba      	b.n	800619e <_dtoa_r+0x296>
 8006228:	69e3      	ldr	r3, [r4, #28]
 800622a:	9a00      	ldr	r2, [sp, #0]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	9b04      	ldr	r3, [sp, #16]
 8006230:	2b0e      	cmp	r3, #14
 8006232:	f200 80a8 	bhi.w	8006386 <_dtoa_r+0x47e>
 8006236:	2d00      	cmp	r5, #0
 8006238:	f000 80a5 	beq.w	8006386 <_dtoa_r+0x47e>
 800623c:	f1bb 0f00 	cmp.w	fp, #0
 8006240:	dd38      	ble.n	80062b4 <_dtoa_r+0x3ac>
 8006242:	4bc0      	ldr	r3, [pc, #768]	; (8006544 <_dtoa_r+0x63c>)
 8006244:	f00b 020f 	and.w	r2, fp, #15
 8006248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800624c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006250:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006254:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006258:	d019      	beq.n	800628e <_dtoa_r+0x386>
 800625a:	4bbb      	ldr	r3, [pc, #748]	; (8006548 <_dtoa_r+0x640>)
 800625c:	ec51 0b18 	vmov	r0, r1, d8
 8006260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006264:	f7fa faf2 	bl	800084c <__aeabi_ddiv>
 8006268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626c:	f008 080f 	and.w	r8, r8, #15
 8006270:	2503      	movs	r5, #3
 8006272:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006548 <_dtoa_r+0x640>
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	d10a      	bne.n	8006292 <_dtoa_r+0x38a>
 800627c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	f7fa fae2 	bl	800084c <__aeabi_ddiv>
 8006288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628c:	e02b      	b.n	80062e6 <_dtoa_r+0x3de>
 800628e:	2502      	movs	r5, #2
 8006290:	e7ef      	b.n	8006272 <_dtoa_r+0x36a>
 8006292:	f018 0f01 	tst.w	r8, #1
 8006296:	d008      	beq.n	80062aa <_dtoa_r+0x3a2>
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062a0:	f7fa f9aa 	bl	80005f8 <__aeabi_dmul>
 80062a4:	3501      	adds	r5, #1
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062ae:	f109 0908 	add.w	r9, r9, #8
 80062b2:	e7e0      	b.n	8006276 <_dtoa_r+0x36e>
 80062b4:	f000 809f 	beq.w	80063f6 <_dtoa_r+0x4ee>
 80062b8:	f1cb 0600 	rsb	r6, fp, #0
 80062bc:	4ba1      	ldr	r3, [pc, #644]	; (8006544 <_dtoa_r+0x63c>)
 80062be:	4fa2      	ldr	r7, [pc, #648]	; (8006548 <_dtoa_r+0x640>)
 80062c0:	f006 020f 	and.w	r2, r6, #15
 80062c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	ec51 0b18 	vmov	r0, r1, d8
 80062d0:	f7fa f992 	bl	80005f8 <__aeabi_dmul>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	1136      	asrs	r6, r6, #4
 80062da:	2300      	movs	r3, #0
 80062dc:	2502      	movs	r5, #2
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d17e      	bne.n	80063e0 <_dtoa_r+0x4d8>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d0      	bne.n	8006288 <_dtoa_r+0x380>
 80062e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8084 	beq.w	80063fa <_dtoa_r+0x4f2>
 80062f2:	4b96      	ldr	r3, [pc, #600]	; (800654c <_dtoa_r+0x644>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7fa fbef 	bl	8000adc <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d07b      	beq.n	80063fa <_dtoa_r+0x4f2>
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d078      	beq.n	80063fa <_dtoa_r+0x4f2>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dd39      	ble.n	8006382 <_dtoa_r+0x47a>
 800630e:	4b90      	ldr	r3, [pc, #576]	; (8006550 <_dtoa_r+0x648>)
 8006310:	2200      	movs	r2, #0
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7fa f96f 	bl	80005f8 <__aeabi_dmul>
 800631a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631e:	9e01      	ldr	r6, [sp, #4]
 8006320:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006324:	3501      	adds	r5, #1
 8006326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800632a:	4628      	mov	r0, r5
 800632c:	f7fa f8fa 	bl	8000524 <__aeabi_i2d>
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f7fa f960 	bl	80005f8 <__aeabi_dmul>
 8006338:	4b86      	ldr	r3, [pc, #536]	; (8006554 <_dtoa_r+0x64c>)
 800633a:	2200      	movs	r2, #0
 800633c:	f7f9 ffa6 	bl	800028c <__adddf3>
 8006340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	2e00      	cmp	r6, #0
 800634c:	d158      	bne.n	8006400 <_dtoa_r+0x4f8>
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <_dtoa_r+0x650>)
 8006350:	2200      	movs	r2, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7f9 ff97 	bl	8000288 <__aeabi_dsub>
 800635a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800635e:	4680      	mov	r8, r0
 8006360:	4689      	mov	r9, r1
 8006362:	f7fa fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8296 	bne.w	8006898 <_dtoa_r+0x990>
 800636c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006370:	4640      	mov	r0, r8
 8006372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006376:	4649      	mov	r1, r9
 8006378:	f7fa fbb0 	bl	8000adc <__aeabi_dcmplt>
 800637c:	2800      	cmp	r0, #0
 800637e:	f040 8289 	bne.w	8006894 <_dtoa_r+0x98c>
 8006382:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006388:	2b00      	cmp	r3, #0
 800638a:	f2c0 814e 	blt.w	800662a <_dtoa_r+0x722>
 800638e:	f1bb 0f0e 	cmp.w	fp, #14
 8006392:	f300 814a 	bgt.w	800662a <_dtoa_r+0x722>
 8006396:	4b6b      	ldr	r3, [pc, #428]	; (8006544 <_dtoa_r+0x63c>)
 8006398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800639c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f280 80dc 	bge.w	8006560 <_dtoa_r+0x658>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f300 80d8 	bgt.w	8006560 <_dtoa_r+0x658>
 80063b0:	f040 826f 	bne.w	8006892 <_dtoa_r+0x98a>
 80063b4:	4b68      	ldr	r3, [pc, #416]	; (8006558 <_dtoa_r+0x650>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa f91c 	bl	80005f8 <__aeabi_dmul>
 80063c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c4:	f7fa fb9e 	bl	8000b04 <__aeabi_dcmpge>
 80063c8:	9e04      	ldr	r6, [sp, #16]
 80063ca:	4637      	mov	r7, r6
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 8245 	bne.w	800685c <_dtoa_r+0x954>
 80063d2:	9d00      	ldr	r5, [sp, #0]
 80063d4:	2331      	movs	r3, #49	; 0x31
 80063d6:	f805 3b01 	strb.w	r3, [r5], #1
 80063da:	f10b 0b01 	add.w	fp, fp, #1
 80063de:	e241      	b.n	8006864 <_dtoa_r+0x95c>
 80063e0:	07f2      	lsls	r2, r6, #31
 80063e2:	d505      	bpl.n	80063f0 <_dtoa_r+0x4e8>
 80063e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e8:	f7fa f906 	bl	80005f8 <__aeabi_dmul>
 80063ec:	3501      	adds	r5, #1
 80063ee:	2301      	movs	r3, #1
 80063f0:	1076      	asrs	r6, r6, #1
 80063f2:	3708      	adds	r7, #8
 80063f4:	e773      	b.n	80062de <_dtoa_r+0x3d6>
 80063f6:	2502      	movs	r5, #2
 80063f8:	e775      	b.n	80062e6 <_dtoa_r+0x3de>
 80063fa:	9e04      	ldr	r6, [sp, #16]
 80063fc:	465f      	mov	r7, fp
 80063fe:	e792      	b.n	8006326 <_dtoa_r+0x41e>
 8006400:	9900      	ldr	r1, [sp, #0]
 8006402:	4b50      	ldr	r3, [pc, #320]	; (8006544 <_dtoa_r+0x63c>)
 8006404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006408:	4431      	add	r1, r6
 800640a:	9102      	str	r1, [sp, #8]
 800640c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800640e:	eeb0 9a47 	vmov.f32	s18, s14
 8006412:	eef0 9a67 	vmov.f32	s19, s15
 8006416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800641a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800641e:	2900      	cmp	r1, #0
 8006420:	d044      	beq.n	80064ac <_dtoa_r+0x5a4>
 8006422:	494e      	ldr	r1, [pc, #312]	; (800655c <_dtoa_r+0x654>)
 8006424:	2000      	movs	r0, #0
 8006426:	f7fa fa11 	bl	800084c <__aeabi_ddiv>
 800642a:	ec53 2b19 	vmov	r2, r3, d9
 800642e:	f7f9 ff2b 	bl	8000288 <__aeabi_dsub>
 8006432:	9d00      	ldr	r5, [sp, #0]
 8006434:	ec41 0b19 	vmov	d9, r0, r1
 8006438:	4649      	mov	r1, r9
 800643a:	4640      	mov	r0, r8
 800643c:	f7fa fb8c 	bl	8000b58 <__aeabi_d2iz>
 8006440:	4606      	mov	r6, r0
 8006442:	f7fa f86f 	bl	8000524 <__aeabi_i2d>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7f9 ff1b 	bl	8000288 <__aeabi_dsub>
 8006452:	3630      	adds	r6, #48	; 0x30
 8006454:	f805 6b01 	strb.w	r6, [r5], #1
 8006458:	ec53 2b19 	vmov	r2, r3, d9
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	f7fa fb3c 	bl	8000adc <__aeabi_dcmplt>
 8006464:	2800      	cmp	r0, #0
 8006466:	d164      	bne.n	8006532 <_dtoa_r+0x62a>
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4937      	ldr	r1, [pc, #220]	; (800654c <_dtoa_r+0x644>)
 800646e:	2000      	movs	r0, #0
 8006470:	f7f9 ff0a 	bl	8000288 <__aeabi_dsub>
 8006474:	ec53 2b19 	vmov	r2, r3, d9
 8006478:	f7fa fb30 	bl	8000adc <__aeabi_dcmplt>
 800647c:	2800      	cmp	r0, #0
 800647e:	f040 80b6 	bne.w	80065ee <_dtoa_r+0x6e6>
 8006482:	9b02      	ldr	r3, [sp, #8]
 8006484:	429d      	cmp	r5, r3
 8006486:	f43f af7c 	beq.w	8006382 <_dtoa_r+0x47a>
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <_dtoa_r+0x648>)
 800648c:	ec51 0b19 	vmov	r0, r1, d9
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f8b1 	bl	80005f8 <__aeabi_dmul>
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <_dtoa_r+0x648>)
 8006498:	ec41 0b19 	vmov	d9, r0, r1
 800649c:	2200      	movs	r2, #0
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa f8a9 	bl	80005f8 <__aeabi_dmul>
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	e7c5      	b.n	8006438 <_dtoa_r+0x530>
 80064ac:	ec51 0b17 	vmov	r0, r1, d7
 80064b0:	f7fa f8a2 	bl	80005f8 <__aeabi_dmul>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	9d00      	ldr	r5, [sp, #0]
 80064b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ba:	ec41 0b19 	vmov	d9, r0, r1
 80064be:	4649      	mov	r1, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	f7fa fb49 	bl	8000b58 <__aeabi_d2iz>
 80064c6:	4606      	mov	r6, r0
 80064c8:	f7fa f82c 	bl	8000524 <__aeabi_i2d>
 80064cc:	3630      	adds	r6, #48	; 0x30
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7f9 fed7 	bl	8000288 <__aeabi_dsub>
 80064da:	f805 6b01 	strb.w	r6, [r5], #1
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	429d      	cmp	r5, r3
 80064e2:	4680      	mov	r8, r0
 80064e4:	4689      	mov	r9, r1
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	d124      	bne.n	8006536 <_dtoa_r+0x62e>
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <_dtoa_r+0x654>)
 80064ee:	ec51 0b19 	vmov	r0, r1, d9
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7fa fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8006502:	2800      	cmp	r0, #0
 8006504:	d173      	bne.n	80065ee <_dtoa_r+0x6e6>
 8006506:	ec53 2b19 	vmov	r2, r3, d9
 800650a:	4914      	ldr	r1, [pc, #80]	; (800655c <_dtoa_r+0x654>)
 800650c:	2000      	movs	r0, #0
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa fadf 	bl	8000adc <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	f43f af2f 	beq.w	8006382 <_dtoa_r+0x47a>
 8006524:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006526:	1e6b      	subs	r3, r5, #1
 8006528:	930f      	str	r3, [sp, #60]	; 0x3c
 800652a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800652e:	2b30      	cmp	r3, #48	; 0x30
 8006530:	d0f8      	beq.n	8006524 <_dtoa_r+0x61c>
 8006532:	46bb      	mov	fp, r7
 8006534:	e04a      	b.n	80065cc <_dtoa_r+0x6c4>
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <_dtoa_r+0x648>)
 8006538:	f7fa f85e 	bl	80005f8 <__aeabi_dmul>
 800653c:	4680      	mov	r8, r0
 800653e:	4689      	mov	r9, r1
 8006540:	e7bd      	b.n	80064be <_dtoa_r+0x5b6>
 8006542:	bf00      	nop
 8006544:	0800a158 	.word	0x0800a158
 8006548:	0800a130 	.word	0x0800a130
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	40240000 	.word	0x40240000
 8006554:	401c0000 	.word	0x401c0000
 8006558:	40140000 	.word	0x40140000
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006564:	9d00      	ldr	r5, [sp, #0]
 8006566:	4642      	mov	r2, r8
 8006568:	464b      	mov	r3, r9
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa f96d 	bl	800084c <__aeabi_ddiv>
 8006572:	f7fa faf1 	bl	8000b58 <__aeabi_d2iz>
 8006576:	9001      	str	r0, [sp, #4]
 8006578:	f7f9 ffd4 	bl	8000524 <__aeabi_i2d>
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	f7fa f83a 	bl	80005f8 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	9e01      	ldr	r6, [sp, #4]
 8006592:	9f04      	ldr	r7, [sp, #16]
 8006594:	3630      	adds	r6, #48	; 0x30
 8006596:	f805 6b01 	strb.w	r6, [r5], #1
 800659a:	9e00      	ldr	r6, [sp, #0]
 800659c:	1bae      	subs	r6, r5, r6
 800659e:	42b7      	cmp	r7, r6
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	d134      	bne.n	8006610 <_dtoa_r+0x708>
 80065a6:	f7f9 fe71 	bl	800028c <__adddf3>
 80065aa:	4642      	mov	r2, r8
 80065ac:	464b      	mov	r3, r9
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	f7fa fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80065b6:	b9c8      	cbnz	r0, 80065ec <_dtoa_r+0x6e4>
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c4:	b110      	cbz	r0, 80065cc <_dtoa_r+0x6c4>
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	07db      	lsls	r3, r3, #31
 80065ca:	d40f      	bmi.n	80065ec <_dtoa_r+0x6e4>
 80065cc:	4651      	mov	r1, sl
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fbcc 	bl	8006d6c <_Bfree>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065d8:	702b      	strb	r3, [r5, #0]
 80065da:	f10b 0301 	add.w	r3, fp, #1
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f43f ace2 	beq.w	8005fac <_dtoa_r+0xa4>
 80065e8:	601d      	str	r5, [r3, #0]
 80065ea:	e4df      	b.n	8005fac <_dtoa_r+0xa4>
 80065ec:	465f      	mov	r7, fp
 80065ee:	462b      	mov	r3, r5
 80065f0:	461d      	mov	r5, r3
 80065f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f6:	2a39      	cmp	r2, #57	; 0x39
 80065f8:	d106      	bne.n	8006608 <_dtoa_r+0x700>
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d1f7      	bne.n	80065f0 <_dtoa_r+0x6e8>
 8006600:	9900      	ldr	r1, [sp, #0]
 8006602:	2230      	movs	r2, #48	; 0x30
 8006604:	3701      	adds	r7, #1
 8006606:	700a      	strb	r2, [r1, #0]
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	3201      	adds	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e790      	b.n	8006532 <_dtoa_r+0x62a>
 8006610:	4ba3      	ldr	r3, [pc, #652]	; (80068a0 <_dtoa_r+0x998>)
 8006612:	2200      	movs	r2, #0
 8006614:	f7f9 fff0 	bl	80005f8 <__aeabi_dmul>
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	f7fa fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006624:	2800      	cmp	r0, #0
 8006626:	d09e      	beq.n	8006566 <_dtoa_r+0x65e>
 8006628:	e7d0      	b.n	80065cc <_dtoa_r+0x6c4>
 800662a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662c:	2a00      	cmp	r2, #0
 800662e:	f000 80ca 	beq.w	80067c6 <_dtoa_r+0x8be>
 8006632:	9a07      	ldr	r2, [sp, #28]
 8006634:	2a01      	cmp	r2, #1
 8006636:	f300 80ad 	bgt.w	8006794 <_dtoa_r+0x88c>
 800663a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800663c:	2a00      	cmp	r2, #0
 800663e:	f000 80a5 	beq.w	800678c <_dtoa_r+0x884>
 8006642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006646:	9e08      	ldr	r6, [sp, #32]
 8006648:	9d05      	ldr	r5, [sp, #20]
 800664a:	9a05      	ldr	r2, [sp, #20]
 800664c:	441a      	add	r2, r3
 800664e:	9205      	str	r2, [sp, #20]
 8006650:	9a06      	ldr	r2, [sp, #24]
 8006652:	2101      	movs	r1, #1
 8006654:	441a      	add	r2, r3
 8006656:	4620      	mov	r0, r4
 8006658:	9206      	str	r2, [sp, #24]
 800665a:	f000 fc87 	bl	8006f6c <__i2b>
 800665e:	4607      	mov	r7, r0
 8006660:	b165      	cbz	r5, 800667c <_dtoa_r+0x774>
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd09      	ble.n	800667c <_dtoa_r+0x774>
 8006668:	42ab      	cmp	r3, r5
 800666a:	9a05      	ldr	r2, [sp, #20]
 800666c:	bfa8      	it	ge
 800666e:	462b      	movge	r3, r5
 8006670:	1ad2      	subs	r2, r2, r3
 8006672:	9205      	str	r2, [sp, #20]
 8006674:	9a06      	ldr	r2, [sp, #24]
 8006676:	1aed      	subs	r5, r5, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	9306      	str	r3, [sp, #24]
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	b1f3      	cbz	r3, 80066be <_dtoa_r+0x7b6>
 8006680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a3 	beq.w	80067ce <_dtoa_r+0x8c6>
 8006688:	2e00      	cmp	r6, #0
 800668a:	dd10      	ble.n	80066ae <_dtoa_r+0x7a6>
 800668c:	4639      	mov	r1, r7
 800668e:	4632      	mov	r2, r6
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fd2b 	bl	80070ec <__pow5mult>
 8006696:	4652      	mov	r2, sl
 8006698:	4601      	mov	r1, r0
 800669a:	4607      	mov	r7, r0
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fc7b 	bl	8006f98 <__multiply>
 80066a2:	4651      	mov	r1, sl
 80066a4:	4680      	mov	r8, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fb60 	bl	8006d6c <_Bfree>
 80066ac:	46c2      	mov	sl, r8
 80066ae:	9b08      	ldr	r3, [sp, #32]
 80066b0:	1b9a      	subs	r2, r3, r6
 80066b2:	d004      	beq.n	80066be <_dtoa_r+0x7b6>
 80066b4:	4651      	mov	r1, sl
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fd18 	bl	80070ec <__pow5mult>
 80066bc:	4682      	mov	sl, r0
 80066be:	2101      	movs	r1, #1
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fc53 	bl	8006f6c <__i2b>
 80066c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	f340 8081 	ble.w	80067d2 <_dtoa_r+0x8ca>
 80066d0:	461a      	mov	r2, r3
 80066d2:	4601      	mov	r1, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fd09 	bl	80070ec <__pow5mult>
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	4606      	mov	r6, r0
 80066e0:	dd7a      	ble.n	80067d8 <_dtoa_r+0x8d0>
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	6933      	ldr	r3, [r6, #16]
 80066e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066ec:	6918      	ldr	r0, [r3, #16]
 80066ee:	f000 fbef 	bl	8006ed0 <__hi0bits>
 80066f2:	f1c0 0020 	rsb	r0, r0, #32
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	4418      	add	r0, r3
 80066fa:	f010 001f 	ands.w	r0, r0, #31
 80066fe:	f000 8094 	beq.w	800682a <_dtoa_r+0x922>
 8006702:	f1c0 0320 	rsb	r3, r0, #32
 8006706:	2b04      	cmp	r3, #4
 8006708:	f340 8085 	ble.w	8006816 <_dtoa_r+0x90e>
 800670c:	9b05      	ldr	r3, [sp, #20]
 800670e:	f1c0 001c 	rsb	r0, r0, #28
 8006712:	4403      	add	r3, r0
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	4403      	add	r3, r0
 800671a:	4405      	add	r5, r0
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	9b05      	ldr	r3, [sp, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dd05      	ble.n	8006730 <_dtoa_r+0x828>
 8006724:	4651      	mov	r1, sl
 8006726:	461a      	mov	r2, r3
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fd39 	bl	80071a0 <__lshift>
 800672e:	4682      	mov	sl, r0
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd05      	ble.n	8006742 <_dtoa_r+0x83a>
 8006736:	4631      	mov	r1, r6
 8006738:	461a      	mov	r2, r3
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fd30 	bl	80071a0 <__lshift>
 8006740:	4606      	mov	r6, r0
 8006742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d072      	beq.n	800682e <_dtoa_r+0x926>
 8006748:	4631      	mov	r1, r6
 800674a:	4650      	mov	r0, sl
 800674c:	f000 fd94 	bl	8007278 <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	da6c      	bge.n	800682e <_dtoa_r+0x926>
 8006754:	2300      	movs	r3, #0
 8006756:	4651      	mov	r1, sl
 8006758:	220a      	movs	r2, #10
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fb28 	bl	8006db0 <__multadd>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006766:	4682      	mov	sl, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 81b0 	beq.w	8006ace <_dtoa_r+0xbc6>
 800676e:	2300      	movs	r3, #0
 8006770:	4639      	mov	r1, r7
 8006772:	220a      	movs	r2, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fb1b 	bl	8006db0 <__multadd>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	4607      	mov	r7, r0
 8006780:	f300 8096 	bgt.w	80068b0 <_dtoa_r+0x9a8>
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	2b02      	cmp	r3, #2
 8006788:	dc59      	bgt.n	800683e <_dtoa_r+0x936>
 800678a:	e091      	b.n	80068b0 <_dtoa_r+0x9a8>
 800678c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800678e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006792:	e758      	b.n	8006646 <_dtoa_r+0x73e>
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	1e5e      	subs	r6, r3, #1
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	42b3      	cmp	r3, r6
 800679c:	bfbf      	itttt	lt
 800679e:	9b08      	ldrlt	r3, [sp, #32]
 80067a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80067a2:	9608      	strlt	r6, [sp, #32]
 80067a4:	1af3      	sublt	r3, r6, r3
 80067a6:	bfb4      	ite	lt
 80067a8:	18d2      	addlt	r2, r2, r3
 80067aa:	1b9e      	subge	r6, r3, r6
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	bfbc      	itt	lt
 80067b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067b2:	2600      	movlt	r6, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb7      	itett	lt
 80067b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067c0:	1a9d      	sublt	r5, r3, r2
 80067c2:	2300      	movlt	r3, #0
 80067c4:	e741      	b.n	800664a <_dtoa_r+0x742>
 80067c6:	9e08      	ldr	r6, [sp, #32]
 80067c8:	9d05      	ldr	r5, [sp, #20]
 80067ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067cc:	e748      	b.n	8006660 <_dtoa_r+0x758>
 80067ce:	9a08      	ldr	r2, [sp, #32]
 80067d0:	e770      	b.n	80066b4 <_dtoa_r+0x7ac>
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	dc19      	bgt.n	800680c <_dtoa_r+0x904>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	b9bb      	cbnz	r3, 800680c <_dtoa_r+0x904>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e2:	b99b      	cbnz	r3, 800680c <_dtoa_r+0x904>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	0d1b      	lsrs	r3, r3, #20
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	b183      	cbz	r3, 8006812 <_dtoa_r+0x90a>
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	3301      	adds	r3, #1
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	f04f 0801 	mov.w	r8, #1
 8006800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f af6f 	bne.w	80066e6 <_dtoa_r+0x7de>
 8006808:	2001      	movs	r0, #1
 800680a:	e774      	b.n	80066f6 <_dtoa_r+0x7ee>
 800680c:	f04f 0800 	mov.w	r8, #0
 8006810:	e7f6      	b.n	8006800 <_dtoa_r+0x8f8>
 8006812:	4698      	mov	r8, r3
 8006814:	e7f4      	b.n	8006800 <_dtoa_r+0x8f8>
 8006816:	d082      	beq.n	800671e <_dtoa_r+0x816>
 8006818:	9a05      	ldr	r2, [sp, #20]
 800681a:	331c      	adds	r3, #28
 800681c:	441a      	add	r2, r3
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	9a06      	ldr	r2, [sp, #24]
 8006822:	441a      	add	r2, r3
 8006824:	441d      	add	r5, r3
 8006826:	9206      	str	r2, [sp, #24]
 8006828:	e779      	b.n	800671e <_dtoa_r+0x816>
 800682a:	4603      	mov	r3, r0
 800682c:	e7f4      	b.n	8006818 <_dtoa_r+0x910>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc37      	bgt.n	80068a4 <_dtoa_r+0x99c>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b02      	cmp	r3, #2
 8006838:	dd34      	ble.n	80068a4 <_dtoa_r+0x99c>
 800683a:	9b04      	ldr	r3, [sp, #16]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	b963      	cbnz	r3, 800685c <_dtoa_r+0x954>
 8006842:	4631      	mov	r1, r6
 8006844:	2205      	movs	r2, #5
 8006846:	4620      	mov	r0, r4
 8006848:	f000 fab2 	bl	8006db0 <__multadd>
 800684c:	4601      	mov	r1, r0
 800684e:	4606      	mov	r6, r0
 8006850:	4650      	mov	r0, sl
 8006852:	f000 fd11 	bl	8007278 <__mcmp>
 8006856:	2800      	cmp	r0, #0
 8006858:	f73f adbb 	bgt.w	80063d2 <_dtoa_r+0x4ca>
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	9d00      	ldr	r5, [sp, #0]
 8006860:	ea6f 0b03 	mvn.w	fp, r3
 8006864:	f04f 0800 	mov.w	r8, #0
 8006868:	4631      	mov	r1, r6
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fa7e 	bl	8006d6c <_Bfree>
 8006870:	2f00      	cmp	r7, #0
 8006872:	f43f aeab 	beq.w	80065cc <_dtoa_r+0x6c4>
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	d005      	beq.n	8006888 <_dtoa_r+0x980>
 800687c:	45b8      	cmp	r8, r7
 800687e:	d003      	beq.n	8006888 <_dtoa_r+0x980>
 8006880:	4641      	mov	r1, r8
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fa72 	bl	8006d6c <_Bfree>
 8006888:	4639      	mov	r1, r7
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fa6e 	bl	8006d6c <_Bfree>
 8006890:	e69c      	b.n	80065cc <_dtoa_r+0x6c4>
 8006892:	2600      	movs	r6, #0
 8006894:	4637      	mov	r7, r6
 8006896:	e7e1      	b.n	800685c <_dtoa_r+0x954>
 8006898:	46bb      	mov	fp, r7
 800689a:	4637      	mov	r7, r6
 800689c:	e599      	b.n	80063d2 <_dtoa_r+0x4ca>
 800689e:	bf00      	nop
 80068a0:	40240000 	.word	0x40240000
 80068a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80c8 	beq.w	8006a3c <_dtoa_r+0xb34>
 80068ac:	9b04      	ldr	r3, [sp, #16]
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	dd05      	ble.n	80068c0 <_dtoa_r+0x9b8>
 80068b4:	4639      	mov	r1, r7
 80068b6:	462a      	mov	r2, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fc71 	bl	80071a0 <__lshift>
 80068be:	4607      	mov	r7, r0
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	d05b      	beq.n	800697e <_dtoa_r+0xa76>
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fa0f 	bl	8006cec <_Balloc>
 80068ce:	4605      	mov	r5, r0
 80068d0:	b928      	cbnz	r0, 80068de <_dtoa_r+0x9d6>
 80068d2:	4b83      	ldr	r3, [pc, #524]	; (8006ae0 <_dtoa_r+0xbd8>)
 80068d4:	4602      	mov	r2, r0
 80068d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068da:	f7ff bb2e 	b.w	8005f3a <_dtoa_r+0x32>
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	3202      	adds	r2, #2
 80068e2:	0092      	lsls	r2, r2, #2
 80068e4:	f107 010c 	add.w	r1, r7, #12
 80068e8:	300c      	adds	r0, #12
 80068ea:	f002 fc07 	bl	80090fc <memcpy>
 80068ee:	2201      	movs	r2, #1
 80068f0:	4629      	mov	r1, r5
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fc54 	bl	80071a0 <__lshift>
 80068f8:	9b00      	ldr	r3, [sp, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006902:	4413      	add	r3, r2
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	46b8      	mov	r8, r7
 800690e:	9306      	str	r3, [sp, #24]
 8006910:	4607      	mov	r7, r0
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	4631      	mov	r1, r6
 8006916:	3b01      	subs	r3, #1
 8006918:	4650      	mov	r0, sl
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	f7ff fa6a 	bl	8005df4 <quorem>
 8006920:	4641      	mov	r1, r8
 8006922:	9002      	str	r0, [sp, #8]
 8006924:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006928:	4650      	mov	r0, sl
 800692a:	f000 fca5 	bl	8007278 <__mcmp>
 800692e:	463a      	mov	r2, r7
 8006930:	9005      	str	r0, [sp, #20]
 8006932:	4631      	mov	r1, r6
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fcbb 	bl	80072b0 <__mdiff>
 800693a:	68c2      	ldr	r2, [r0, #12]
 800693c:	4605      	mov	r5, r0
 800693e:	bb02      	cbnz	r2, 8006982 <_dtoa_r+0xa7a>
 8006940:	4601      	mov	r1, r0
 8006942:	4650      	mov	r0, sl
 8006944:	f000 fc98 	bl	8007278 <__mcmp>
 8006948:	4602      	mov	r2, r0
 800694a:	4629      	mov	r1, r5
 800694c:	4620      	mov	r0, r4
 800694e:	9209      	str	r2, [sp, #36]	; 0x24
 8006950:	f000 fa0c 	bl	8006d6c <_Bfree>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006958:	9d04      	ldr	r5, [sp, #16]
 800695a:	ea43 0102 	orr.w	r1, r3, r2
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	4319      	orrs	r1, r3
 8006962:	d110      	bne.n	8006986 <_dtoa_r+0xa7e>
 8006964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006968:	d029      	beq.n	80069be <_dtoa_r+0xab6>
 800696a:	9b05      	ldr	r3, [sp, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd02      	ble.n	8006976 <_dtoa_r+0xa6e>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006976:	9b01      	ldr	r3, [sp, #4]
 8006978:	f883 9000 	strb.w	r9, [r3]
 800697c:	e774      	b.n	8006868 <_dtoa_r+0x960>
 800697e:	4638      	mov	r0, r7
 8006980:	e7ba      	b.n	80068f8 <_dtoa_r+0x9f0>
 8006982:	2201      	movs	r2, #1
 8006984:	e7e1      	b.n	800694a <_dtoa_r+0xa42>
 8006986:	9b05      	ldr	r3, [sp, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	db04      	blt.n	8006996 <_dtoa_r+0xa8e>
 800698c:	9907      	ldr	r1, [sp, #28]
 800698e:	430b      	orrs	r3, r1
 8006990:	9906      	ldr	r1, [sp, #24]
 8006992:	430b      	orrs	r3, r1
 8006994:	d120      	bne.n	80069d8 <_dtoa_r+0xad0>
 8006996:	2a00      	cmp	r2, #0
 8006998:	dded      	ble.n	8006976 <_dtoa_r+0xa6e>
 800699a:	4651      	mov	r1, sl
 800699c:	2201      	movs	r2, #1
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fbfe 	bl	80071a0 <__lshift>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4682      	mov	sl, r0
 80069a8:	f000 fc66 	bl	8007278 <__mcmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dc03      	bgt.n	80069b8 <_dtoa_r+0xab0>
 80069b0:	d1e1      	bne.n	8006976 <_dtoa_r+0xa6e>
 80069b2:	f019 0f01 	tst.w	r9, #1
 80069b6:	d0de      	beq.n	8006976 <_dtoa_r+0xa6e>
 80069b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069bc:	d1d8      	bne.n	8006970 <_dtoa_r+0xa68>
 80069be:	9a01      	ldr	r2, [sp, #4]
 80069c0:	2339      	movs	r3, #57	; 0x39
 80069c2:	7013      	strb	r3, [r2, #0]
 80069c4:	462b      	mov	r3, r5
 80069c6:	461d      	mov	r5, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ce:	2a39      	cmp	r2, #57	; 0x39
 80069d0:	d06c      	beq.n	8006aac <_dtoa_r+0xba4>
 80069d2:	3201      	adds	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e747      	b.n	8006868 <_dtoa_r+0x960>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd07      	ble.n	80069ec <_dtoa_r+0xae4>
 80069dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069e0:	d0ed      	beq.n	80069be <_dtoa_r+0xab6>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	f109 0301 	add.w	r3, r9, #1
 80069e8:	7013      	strb	r3, [r2, #0]
 80069ea:	e73d      	b.n	8006868 <_dtoa_r+0x960>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	9a08      	ldr	r2, [sp, #32]
 80069f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d043      	beq.n	8006a80 <_dtoa_r+0xb78>
 80069f8:	4651      	mov	r1, sl
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 f9d6 	bl	8006db0 <__multadd>
 8006a04:	45b8      	cmp	r8, r7
 8006a06:	4682      	mov	sl, r0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f04f 020a 	mov.w	r2, #10
 8006a10:	4641      	mov	r1, r8
 8006a12:	4620      	mov	r0, r4
 8006a14:	d107      	bne.n	8006a26 <_dtoa_r+0xb1e>
 8006a16:	f000 f9cb 	bl	8006db0 <__multadd>
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	e775      	b.n	8006912 <_dtoa_r+0xa0a>
 8006a26:	f000 f9c3 	bl	8006db0 <__multadd>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	220a      	movs	r2, #10
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f9bc 	bl	8006db0 <__multadd>
 8006a38:	4607      	mov	r7, r0
 8006a3a:	e7f0      	b.n	8006a1e <_dtoa_r+0xb16>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	9d00      	ldr	r5, [sp, #0]
 8006a42:	4631      	mov	r1, r6
 8006a44:	4650      	mov	r0, sl
 8006a46:	f7ff f9d5 	bl	8005df4 <quorem>
 8006a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	f805 9b01 	strb.w	r9, [r5], #1
 8006a54:	1aea      	subs	r2, r5, r3
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	dd07      	ble.n	8006a6c <_dtoa_r+0xb64>
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	2300      	movs	r3, #0
 8006a60:	220a      	movs	r2, #10
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f9a4 	bl	8006db0 <__multadd>
 8006a68:	4682      	mov	sl, r0
 8006a6a:	e7ea      	b.n	8006a42 <_dtoa_r+0xb3a>
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfc8      	it	gt
 8006a72:	461d      	movgt	r5, r3
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	bfd8      	it	le
 8006a78:	2501      	movle	r5, #1
 8006a7a:	441d      	add	r5, r3
 8006a7c:	f04f 0800 	mov.w	r8, #0
 8006a80:	4651      	mov	r1, sl
 8006a82:	2201      	movs	r2, #1
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fb8b 	bl	80071a0 <__lshift>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	f000 fbf3 	bl	8007278 <__mcmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dc96      	bgt.n	80069c4 <_dtoa_r+0xabc>
 8006a96:	d102      	bne.n	8006a9e <_dtoa_r+0xb96>
 8006a98:	f019 0f01 	tst.w	r9, #1
 8006a9c:	d192      	bne.n	80069c4 <_dtoa_r+0xabc>
 8006a9e:	462b      	mov	r3, r5
 8006aa0:	461d      	mov	r5, r3
 8006aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa6:	2a30      	cmp	r2, #48	; 0x30
 8006aa8:	d0fa      	beq.n	8006aa0 <_dtoa_r+0xb98>
 8006aaa:	e6dd      	b.n	8006868 <_dtoa_r+0x960>
 8006aac:	9a00      	ldr	r2, [sp, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d189      	bne.n	80069c6 <_dtoa_r+0xabe>
 8006ab2:	f10b 0b01 	add.w	fp, fp, #1
 8006ab6:	2331      	movs	r3, #49	; 0x31
 8006ab8:	e796      	b.n	80069e8 <_dtoa_r+0xae0>
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <_dtoa_r+0xbdc>)
 8006abc:	f7ff ba99 	b.w	8005ff2 <_dtoa_r+0xea>
 8006ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f47f aa6d 	bne.w	8005fa2 <_dtoa_r+0x9a>
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <_dtoa_r+0xbe0>)
 8006aca:	f7ff ba92 	b.w	8005ff2 <_dtoa_r+0xea>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dcb5      	bgt.n	8006a40 <_dtoa_r+0xb38>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	f73f aeb1 	bgt.w	800683e <_dtoa_r+0x936>
 8006adc:	e7b0      	b.n	8006a40 <_dtoa_r+0xb38>
 8006ade:	bf00      	nop
 8006ae0:	0800a0bf 	.word	0x0800a0bf
 8006ae4:	0800a3a8 	.word	0x0800a3a8
 8006ae8:	0800a043 	.word	0x0800a043

08006aec <_free_r>:
 8006aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d044      	beq.n	8006b7c <_free_r+0x90>
 8006af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af6:	9001      	str	r0, [sp, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f1a1 0404 	sub.w	r4, r1, #4
 8006afe:	bfb8      	it	lt
 8006b00:	18e4      	addlt	r4, r4, r3
 8006b02:	f000 f8e7 	bl	8006cd4 <__malloc_lock>
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <_free_r+0x94>)
 8006b08:	9801      	ldr	r0, [sp, #4]
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	b933      	cbnz	r3, 8006b1c <_free_r+0x30>
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6014      	str	r4, [r2, #0]
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b18:	f000 b8e2 	b.w	8006ce0 <__malloc_unlock>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d908      	bls.n	8006b32 <_free_r+0x46>
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf01      	itttt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	1949      	addeq	r1, r1, r5
 8006b2e:	6021      	streq	r1, [r4, #0]
 8006b30:	e7ed      	b.n	8006b0e <_free_r+0x22>
 8006b32:	461a      	mov	r2, r3
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b10b      	cbz	r3, 8006b3c <_free_r+0x50>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d9fa      	bls.n	8006b32 <_free_r+0x46>
 8006b3c:	6811      	ldr	r1, [r2, #0]
 8006b3e:	1855      	adds	r5, r2, r1
 8006b40:	42a5      	cmp	r5, r4
 8006b42:	d10b      	bne.n	8006b5c <_free_r+0x70>
 8006b44:	6824      	ldr	r4, [r4, #0]
 8006b46:	4421      	add	r1, r4
 8006b48:	1854      	adds	r4, r2, r1
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	d1e0      	bne.n	8006b12 <_free_r+0x26>
 8006b50:	681c      	ldr	r4, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	440c      	add	r4, r1
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	e7da      	b.n	8006b12 <_free_r+0x26>
 8006b5c:	d902      	bls.n	8006b64 <_free_r+0x78>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	e7d6      	b.n	8006b12 <_free_r+0x26>
 8006b64:	6825      	ldr	r5, [r4, #0]
 8006b66:	1961      	adds	r1, r4, r5
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	bf04      	itt	eq
 8006b6c:	6819      	ldreq	r1, [r3, #0]
 8006b6e:	685b      	ldreq	r3, [r3, #4]
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	bf04      	itt	eq
 8006b74:	1949      	addeq	r1, r1, r5
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	6054      	str	r4, [r2, #4]
 8006b7a:	e7ca      	b.n	8006b12 <_free_r+0x26>
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	20000b24 	.word	0x20000b24

08006b84 <malloc>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <malloc+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 b823 	b.w	8006bd4 <_malloc_r>
 8006b8e:	bf00      	nop
 8006b90:	20000064 	.word	0x20000064

08006b94 <sbrk_aligned>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4e0e      	ldr	r6, [pc, #56]	; (8006bd0 <sbrk_aligned+0x3c>)
 8006b98:	460c      	mov	r4, r1
 8006b9a:	6831      	ldr	r1, [r6, #0]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b911      	cbnz	r1, 8006ba6 <sbrk_aligned+0x12>
 8006ba0:	f002 fa9c 	bl	80090dc <_sbrk_r>
 8006ba4:	6030      	str	r0, [r6, #0]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f002 fa97 	bl	80090dc <_sbrk_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d00a      	beq.n	8006bc8 <sbrk_aligned+0x34>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d007      	beq.n	8006bcc <sbrk_aligned+0x38>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f002 fa8c 	bl	80090dc <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d101      	bne.n	8006bcc <sbrk_aligned+0x38>
 8006bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	20000b28 	.word	0x20000b28

08006bd4 <_malloc_r>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	1ccd      	adds	r5, r1, #3
 8006bda:	f025 0503 	bic.w	r5, r5, #3
 8006bde:	3508      	adds	r5, #8
 8006be0:	2d0c      	cmp	r5, #12
 8006be2:	bf38      	it	cc
 8006be4:	250c      	movcc	r5, #12
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	4607      	mov	r7, r0
 8006bea:	db01      	blt.n	8006bf0 <_malloc_r+0x1c>
 8006bec:	42a9      	cmp	r1, r5
 8006bee:	d905      	bls.n	8006bfc <_malloc_r+0x28>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cd0 <_malloc_r+0xfc>
 8006c00:	f000 f868 	bl	8006cd4 <__malloc_lock>
 8006c04:	f8d8 3000 	ldr.w	r3, [r8]
 8006c08:	461c      	mov	r4, r3
 8006c0a:	bb5c      	cbnz	r4, 8006c64 <_malloc_r+0x90>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ffc0 	bl	8006b94 <sbrk_aligned>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	4604      	mov	r4, r0
 8006c18:	d155      	bne.n	8006cc6 <_malloc_r+0xf2>
 8006c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c1e:	4626      	mov	r6, r4
 8006c20:	2e00      	cmp	r6, #0
 8006c22:	d145      	bne.n	8006cb0 <_malloc_r+0xdc>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d048      	beq.n	8006cba <_malloc_r+0xe6>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	eb04 0903 	add.w	r9, r4, r3
 8006c32:	f002 fa53 	bl	80090dc <_sbrk_r>
 8006c36:	4581      	cmp	r9, r0
 8006c38:	d13f      	bne.n	8006cba <_malloc_r+0xe6>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1a6d      	subs	r5, r5, r1
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ffa7 	bl	8006b94 <sbrk_aligned>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d037      	beq.n	8006cba <_malloc_r+0xe6>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	442b      	add	r3, r5
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	f8d8 3000 	ldr.w	r3, [r8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d038      	beq.n	8006cca <_malloc_r+0xf6>
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	42a2      	cmp	r2, r4
 8006c5c:	d12b      	bne.n	8006cb6 <_malloc_r+0xe2>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	e00f      	b.n	8006c84 <_malloc_r+0xb0>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	1b52      	subs	r2, r2, r5
 8006c68:	d41f      	bmi.n	8006caa <_malloc_r+0xd6>
 8006c6a:	2a0b      	cmp	r2, #11
 8006c6c:	d917      	bls.n	8006c9e <_malloc_r+0xca>
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	bf18      	it	ne
 8006c76:	6059      	strne	r1, [r3, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	bf08      	it	eq
 8006c7c:	f8c8 1000 	streq.w	r1, [r8]
 8006c80:	5162      	str	r2, [r4, r5]
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	4638      	mov	r0, r7
 8006c86:	f104 060b 	add.w	r6, r4, #11
 8006c8a:	f000 f829 	bl	8006ce0 <__malloc_unlock>
 8006c8e:	f026 0607 	bic.w	r6, r6, #7
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	1af2      	subs	r2, r6, r3
 8006c96:	d0ae      	beq.n	8006bf6 <_malloc_r+0x22>
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	50a3      	str	r3, [r4, r2]
 8006c9c:	e7ab      	b.n	8006bf6 <_malloc_r+0x22>
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	d1dd      	bne.n	8006c60 <_malloc_r+0x8c>
 8006ca4:	f8c8 2000 	str.w	r2, [r8]
 8006ca8:	e7ec      	b.n	8006c84 <_malloc_r+0xb0>
 8006caa:	4623      	mov	r3, r4
 8006cac:	6864      	ldr	r4, [r4, #4]
 8006cae:	e7ac      	b.n	8006c0a <_malloc_r+0x36>
 8006cb0:	4634      	mov	r4, r6
 8006cb2:	6876      	ldr	r6, [r6, #4]
 8006cb4:	e7b4      	b.n	8006c20 <_malloc_r+0x4c>
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	e7cc      	b.n	8006c54 <_malloc_r+0x80>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f000 f80e 	bl	8006ce0 <__malloc_unlock>
 8006cc4:	e797      	b.n	8006bf6 <_malloc_r+0x22>
 8006cc6:	6025      	str	r5, [r4, #0]
 8006cc8:	e7dc      	b.n	8006c84 <_malloc_r+0xb0>
 8006cca:	605b      	str	r3, [r3, #4]
 8006ccc:	deff      	udf	#255	; 0xff
 8006cce:	bf00      	nop
 8006cd0:	20000b24 	.word	0x20000b24

08006cd4 <__malloc_lock>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__malloc_lock+0x8>)
 8006cd6:	f7ff b87c 	b.w	8005dd2 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000b20 	.word	0x20000b20

08006ce0 <__malloc_unlock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__malloc_unlock+0x8>)
 8006ce2:	f7ff b877 	b.w	8005dd4 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20000b20 	.word	0x20000b20

08006cec <_Balloc>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	69c6      	ldr	r6, [r0, #28]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	b976      	cbnz	r6, 8006d14 <_Balloc+0x28>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f7ff ff44 	bl	8006b84 <malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	61e0      	str	r0, [r4, #28]
 8006d00:	b920      	cbnz	r0, 8006d0c <_Balloc+0x20>
 8006d02:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <_Balloc+0x78>)
 8006d04:	4818      	ldr	r0, [pc, #96]	; (8006d68 <_Balloc+0x7c>)
 8006d06:	216b      	movs	r1, #107	; 0x6b
 8006d08:	f002 fa0e 	bl	8009128 <__assert_func>
 8006d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d10:	6006      	str	r6, [r0, #0]
 8006d12:	60c6      	str	r6, [r0, #12]
 8006d14:	69e6      	ldr	r6, [r4, #28]
 8006d16:	68f3      	ldr	r3, [r6, #12]
 8006d18:	b183      	cbz	r3, 8006d3c <_Balloc+0x50>
 8006d1a:	69e3      	ldr	r3, [r4, #28]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d22:	b9b8      	cbnz	r0, 8006d54 <_Balloc+0x68>
 8006d24:	2101      	movs	r1, #1
 8006d26:	fa01 f605 	lsl.w	r6, r1, r5
 8006d2a:	1d72      	adds	r2, r6, #5
 8006d2c:	0092      	lsls	r2, r2, #2
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f002 fa18 	bl	8009164 <_calloc_r>
 8006d34:	b160      	cbz	r0, 8006d50 <_Balloc+0x64>
 8006d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d3a:	e00e      	b.n	8006d5a <_Balloc+0x6e>
 8006d3c:	2221      	movs	r2, #33	; 0x21
 8006d3e:	2104      	movs	r1, #4
 8006d40:	4620      	mov	r0, r4
 8006d42:	f002 fa0f 	bl	8009164 <_calloc_r>
 8006d46:	69e3      	ldr	r3, [r4, #28]
 8006d48:	60f0      	str	r0, [r6, #12]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e4      	bne.n	8006d1a <_Balloc+0x2e>
 8006d50:	2000      	movs	r0, #0
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	6802      	ldr	r2, [r0, #0]
 8006d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d60:	e7f7      	b.n	8006d52 <_Balloc+0x66>
 8006d62:	bf00      	nop
 8006d64:	0800a050 	.word	0x0800a050
 8006d68:	0800a0d0 	.word	0x0800a0d0

08006d6c <_Bfree>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	69c6      	ldr	r6, [r0, #28]
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b976      	cbnz	r6, 8006d94 <_Bfree+0x28>
 8006d76:	2010      	movs	r0, #16
 8006d78:	f7ff ff04 	bl	8006b84 <malloc>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	61e8      	str	r0, [r5, #28]
 8006d80:	b920      	cbnz	r0, 8006d8c <_Bfree+0x20>
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <_Bfree+0x3c>)
 8006d84:	4809      	ldr	r0, [pc, #36]	; (8006dac <_Bfree+0x40>)
 8006d86:	218f      	movs	r1, #143	; 0x8f
 8006d88:	f002 f9ce 	bl	8009128 <__assert_func>
 8006d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d90:	6006      	str	r6, [r0, #0]
 8006d92:	60c6      	str	r6, [r0, #12]
 8006d94:	b13c      	cbz	r4, 8006da6 <_Bfree+0x3a>
 8006d96:	69eb      	ldr	r3, [r5, #28]
 8006d98:	6862      	ldr	r2, [r4, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006da0:	6021      	str	r1, [r4, #0]
 8006da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	0800a050 	.word	0x0800a050
 8006dac:	0800a0d0 	.word	0x0800a0d0

08006db0 <__multadd>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	690d      	ldr	r5, [r1, #16]
 8006db6:	4607      	mov	r7, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	461e      	mov	r6, r3
 8006dbc:	f101 0c14 	add.w	ip, r1, #20
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006dc6:	b299      	uxth	r1, r3
 8006dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8006dcc:	0c1e      	lsrs	r6, r3, #16
 8006dce:	0c0b      	lsrs	r3, r1, #16
 8006dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8006dd4:	b289      	uxth	r1, r1
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ddc:	4285      	cmp	r5, r0
 8006dde:	f84c 1b04 	str.w	r1, [ip], #4
 8006de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006de6:	dcec      	bgt.n	8006dc2 <__multadd+0x12>
 8006de8:	b30e      	cbz	r6, 8006e2e <__multadd+0x7e>
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	42ab      	cmp	r3, r5
 8006dee:	dc19      	bgt.n	8006e24 <__multadd+0x74>
 8006df0:	6861      	ldr	r1, [r4, #4]
 8006df2:	4638      	mov	r0, r7
 8006df4:	3101      	adds	r1, #1
 8006df6:	f7ff ff79 	bl	8006cec <_Balloc>
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	b928      	cbnz	r0, 8006e0a <__multadd+0x5a>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <__multadd+0x84>)
 8006e02:	480d      	ldr	r0, [pc, #52]	; (8006e38 <__multadd+0x88>)
 8006e04:	21ba      	movs	r1, #186	; 0xba
 8006e06:	f002 f98f 	bl	8009128 <__assert_func>
 8006e0a:	6922      	ldr	r2, [r4, #16]
 8006e0c:	3202      	adds	r2, #2
 8006e0e:	f104 010c 	add.w	r1, r4, #12
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	300c      	adds	r0, #12
 8006e16:	f002 f971 	bl	80090fc <memcpy>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f7ff ffa5 	bl	8006d6c <_Bfree>
 8006e22:	4644      	mov	r4, r8
 8006e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e28:	3501      	adds	r5, #1
 8006e2a:	615e      	str	r6, [r3, #20]
 8006e2c:	6125      	str	r5, [r4, #16]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e34:	0800a0bf 	.word	0x0800a0bf
 8006e38:	0800a0d0 	.word	0x0800a0d0

08006e3c <__s2b>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	460c      	mov	r4, r1
 8006e42:	4615      	mov	r5, r2
 8006e44:	461f      	mov	r7, r3
 8006e46:	2209      	movs	r2, #9
 8006e48:	3308      	adds	r3, #8
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e50:	2100      	movs	r1, #0
 8006e52:	2201      	movs	r2, #1
 8006e54:	429a      	cmp	r2, r3
 8006e56:	db09      	blt.n	8006e6c <__s2b+0x30>
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ff47 	bl	8006cec <_Balloc>
 8006e5e:	b940      	cbnz	r0, 8006e72 <__s2b+0x36>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <__s2b+0x8c>)
 8006e64:	4819      	ldr	r0, [pc, #100]	; (8006ecc <__s2b+0x90>)
 8006e66:	21d3      	movs	r1, #211	; 0xd3
 8006e68:	f002 f95e 	bl	8009128 <__assert_func>
 8006e6c:	0052      	lsls	r2, r2, #1
 8006e6e:	3101      	adds	r1, #1
 8006e70:	e7f0      	b.n	8006e54 <__s2b+0x18>
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	6143      	str	r3, [r0, #20]
 8006e76:	2d09      	cmp	r5, #9
 8006e78:	f04f 0301 	mov.w	r3, #1
 8006e7c:	6103      	str	r3, [r0, #16]
 8006e7e:	dd16      	ble.n	8006eae <__s2b+0x72>
 8006e80:	f104 0909 	add.w	r9, r4, #9
 8006e84:	46c8      	mov	r8, r9
 8006e86:	442c      	add	r4, r5
 8006e88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	3b30      	subs	r3, #48	; 0x30
 8006e90:	220a      	movs	r2, #10
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ff8c 	bl	8006db0 <__multadd>
 8006e98:	45a0      	cmp	r8, r4
 8006e9a:	d1f5      	bne.n	8006e88 <__s2b+0x4c>
 8006e9c:	f1a5 0408 	sub.w	r4, r5, #8
 8006ea0:	444c      	add	r4, r9
 8006ea2:	1b2d      	subs	r5, r5, r4
 8006ea4:	1963      	adds	r3, r4, r5
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	db04      	blt.n	8006eb4 <__s2b+0x78>
 8006eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eae:	340a      	adds	r4, #10
 8006eb0:	2509      	movs	r5, #9
 8006eb2:	e7f6      	b.n	8006ea2 <__s2b+0x66>
 8006eb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006eb8:	4601      	mov	r1, r0
 8006eba:	3b30      	subs	r3, #48	; 0x30
 8006ebc:	220a      	movs	r2, #10
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7ff ff76 	bl	8006db0 <__multadd>
 8006ec4:	e7ee      	b.n	8006ea4 <__s2b+0x68>
 8006ec6:	bf00      	nop
 8006ec8:	0800a0bf 	.word	0x0800a0bf
 8006ecc:	0800a0d0 	.word	0x0800a0d0

08006ed0 <__hi0bits>:
 8006ed0:	0c03      	lsrs	r3, r0, #16
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	b9d3      	cbnz	r3, 8006f0c <__hi0bits+0x3c>
 8006ed6:	0400      	lsls	r0, r0, #16
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ede:	bf04      	itt	eq
 8006ee0:	0200      	lsleq	r0, r0, #8
 8006ee2:	3308      	addeq	r3, #8
 8006ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ee8:	bf04      	itt	eq
 8006eea:	0100      	lsleq	r0, r0, #4
 8006eec:	3304      	addeq	r3, #4
 8006eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ef2:	bf04      	itt	eq
 8006ef4:	0080      	lsleq	r0, r0, #2
 8006ef6:	3302      	addeq	r3, #2
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	db05      	blt.n	8006f08 <__hi0bits+0x38>
 8006efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f00:	f103 0301 	add.w	r3, r3, #1
 8006f04:	bf08      	it	eq
 8006f06:	2320      	moveq	r3, #32
 8006f08:	4618      	mov	r0, r3
 8006f0a:	4770      	bx	lr
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e7e4      	b.n	8006eda <__hi0bits+0xa>

08006f10 <__lo0bits>:
 8006f10:	6803      	ldr	r3, [r0, #0]
 8006f12:	f013 0207 	ands.w	r2, r3, #7
 8006f16:	d00c      	beq.n	8006f32 <__lo0bits+0x22>
 8006f18:	07d9      	lsls	r1, r3, #31
 8006f1a:	d422      	bmi.n	8006f62 <__lo0bits+0x52>
 8006f1c:	079a      	lsls	r2, r3, #30
 8006f1e:	bf49      	itett	mi
 8006f20:	085b      	lsrmi	r3, r3, #1
 8006f22:	089b      	lsrpl	r3, r3, #2
 8006f24:	6003      	strmi	r3, [r0, #0]
 8006f26:	2201      	movmi	r2, #1
 8006f28:	bf5c      	itt	pl
 8006f2a:	6003      	strpl	r3, [r0, #0]
 8006f2c:	2202      	movpl	r2, #2
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4770      	bx	lr
 8006f32:	b299      	uxth	r1, r3
 8006f34:	b909      	cbnz	r1, 8006f3a <__lo0bits+0x2a>
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	2210      	movs	r2, #16
 8006f3a:	b2d9      	uxtb	r1, r3
 8006f3c:	b909      	cbnz	r1, 8006f42 <__lo0bits+0x32>
 8006f3e:	3208      	adds	r2, #8
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	0719      	lsls	r1, r3, #28
 8006f44:	bf04      	itt	eq
 8006f46:	091b      	lsreq	r3, r3, #4
 8006f48:	3204      	addeq	r2, #4
 8006f4a:	0799      	lsls	r1, r3, #30
 8006f4c:	bf04      	itt	eq
 8006f4e:	089b      	lsreq	r3, r3, #2
 8006f50:	3202      	addeq	r2, #2
 8006f52:	07d9      	lsls	r1, r3, #31
 8006f54:	d403      	bmi.n	8006f5e <__lo0bits+0x4e>
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	f102 0201 	add.w	r2, r2, #1
 8006f5c:	d003      	beq.n	8006f66 <__lo0bits+0x56>
 8006f5e:	6003      	str	r3, [r0, #0]
 8006f60:	e7e5      	b.n	8006f2e <__lo0bits+0x1e>
 8006f62:	2200      	movs	r2, #0
 8006f64:	e7e3      	b.n	8006f2e <__lo0bits+0x1e>
 8006f66:	2220      	movs	r2, #32
 8006f68:	e7e1      	b.n	8006f2e <__lo0bits+0x1e>
	...

08006f6c <__i2b>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	460c      	mov	r4, r1
 8006f70:	2101      	movs	r1, #1
 8006f72:	f7ff febb 	bl	8006cec <_Balloc>
 8006f76:	4602      	mov	r2, r0
 8006f78:	b928      	cbnz	r0, 8006f86 <__i2b+0x1a>
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <__i2b+0x24>)
 8006f7c:	4805      	ldr	r0, [pc, #20]	; (8006f94 <__i2b+0x28>)
 8006f7e:	f240 1145 	movw	r1, #325	; 0x145
 8006f82:	f002 f8d1 	bl	8009128 <__assert_func>
 8006f86:	2301      	movs	r3, #1
 8006f88:	6144      	str	r4, [r0, #20]
 8006f8a:	6103      	str	r3, [r0, #16]
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800a0bf 	.word	0x0800a0bf
 8006f94:	0800a0d0 	.word	0x0800a0d0

08006f98 <__multiply>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	4691      	mov	r9, r2
 8006f9e:	690a      	ldr	r2, [r1, #16]
 8006fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	bfb8      	it	lt
 8006fa8:	460b      	movlt	r3, r1
 8006faa:	460c      	mov	r4, r1
 8006fac:	bfbc      	itt	lt
 8006fae:	464c      	movlt	r4, r9
 8006fb0:	4699      	movlt	r9, r3
 8006fb2:	6927      	ldr	r7, [r4, #16]
 8006fb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fb8:	68a3      	ldr	r3, [r4, #8]
 8006fba:	6861      	ldr	r1, [r4, #4]
 8006fbc:	eb07 060a 	add.w	r6, r7, sl
 8006fc0:	42b3      	cmp	r3, r6
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	bfb8      	it	lt
 8006fc6:	3101      	addlt	r1, #1
 8006fc8:	f7ff fe90 	bl	8006cec <_Balloc>
 8006fcc:	b930      	cbnz	r0, 8006fdc <__multiply+0x44>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4b44      	ldr	r3, [pc, #272]	; (80070e4 <__multiply+0x14c>)
 8006fd2:	4845      	ldr	r0, [pc, #276]	; (80070e8 <__multiply+0x150>)
 8006fd4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fd8:	f002 f8a6 	bl	8009128 <__assert_func>
 8006fdc:	f100 0514 	add.w	r5, r0, #20
 8006fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4543      	cmp	r3, r8
 8006fea:	d321      	bcc.n	8007030 <__multiply+0x98>
 8006fec:	f104 0314 	add.w	r3, r4, #20
 8006ff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ff4:	f109 0314 	add.w	r3, r9, #20
 8006ff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ffc:	9202      	str	r2, [sp, #8]
 8006ffe:	1b3a      	subs	r2, r7, r4
 8007000:	3a15      	subs	r2, #21
 8007002:	f022 0203 	bic.w	r2, r2, #3
 8007006:	3204      	adds	r2, #4
 8007008:	f104 0115 	add.w	r1, r4, #21
 800700c:	428f      	cmp	r7, r1
 800700e:	bf38      	it	cc
 8007010:	2204      	movcc	r2, #4
 8007012:	9201      	str	r2, [sp, #4]
 8007014:	9a02      	ldr	r2, [sp, #8]
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d80c      	bhi.n	8007036 <__multiply+0x9e>
 800701c:	2e00      	cmp	r6, #0
 800701e:	dd03      	ble.n	8007028 <__multiply+0x90>
 8007020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007024:	2b00      	cmp	r3, #0
 8007026:	d05b      	beq.n	80070e0 <__multiply+0x148>
 8007028:	6106      	str	r6, [r0, #16]
 800702a:	b005      	add	sp, #20
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	f843 2b04 	str.w	r2, [r3], #4
 8007034:	e7d8      	b.n	8006fe8 <__multiply+0x50>
 8007036:	f8b3 a000 	ldrh.w	sl, [r3]
 800703a:	f1ba 0f00 	cmp.w	sl, #0
 800703e:	d024      	beq.n	800708a <__multiply+0xf2>
 8007040:	f104 0e14 	add.w	lr, r4, #20
 8007044:	46a9      	mov	r9, r5
 8007046:	f04f 0c00 	mov.w	ip, #0
 800704a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800704e:	f8d9 1000 	ldr.w	r1, [r9]
 8007052:	fa1f fb82 	uxth.w	fp, r2
 8007056:	b289      	uxth	r1, r1
 8007058:	fb0a 110b 	mla	r1, sl, fp, r1
 800705c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007060:	f8d9 2000 	ldr.w	r2, [r9]
 8007064:	4461      	add	r1, ip
 8007066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800706a:	fb0a c20b 	mla	r2, sl, fp, ip
 800706e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007072:	b289      	uxth	r1, r1
 8007074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007078:	4577      	cmp	r7, lr
 800707a:	f849 1b04 	str.w	r1, [r9], #4
 800707e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007082:	d8e2      	bhi.n	800704a <__multiply+0xb2>
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	f845 c002 	str.w	ip, [r5, r2]
 800708a:	9a03      	ldr	r2, [sp, #12]
 800708c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007090:	3304      	adds	r3, #4
 8007092:	f1b9 0f00 	cmp.w	r9, #0
 8007096:	d021      	beq.n	80070dc <__multiply+0x144>
 8007098:	6829      	ldr	r1, [r5, #0]
 800709a:	f104 0c14 	add.w	ip, r4, #20
 800709e:	46ae      	mov	lr, r5
 80070a0:	f04f 0a00 	mov.w	sl, #0
 80070a4:	f8bc b000 	ldrh.w	fp, [ip]
 80070a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070ac:	fb09 220b 	mla	r2, r9, fp, r2
 80070b0:	4452      	add	r2, sl
 80070b2:	b289      	uxth	r1, r1
 80070b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070b8:	f84e 1b04 	str.w	r1, [lr], #4
 80070bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070c4:	f8be 1000 	ldrh.w	r1, [lr]
 80070c8:	fb09 110a 	mla	r1, r9, sl, r1
 80070cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070d0:	4567      	cmp	r7, ip
 80070d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d6:	d8e5      	bhi.n	80070a4 <__multiply+0x10c>
 80070d8:	9a01      	ldr	r2, [sp, #4]
 80070da:	50a9      	str	r1, [r5, r2]
 80070dc:	3504      	adds	r5, #4
 80070de:	e799      	b.n	8007014 <__multiply+0x7c>
 80070e0:	3e01      	subs	r6, #1
 80070e2:	e79b      	b.n	800701c <__multiply+0x84>
 80070e4:	0800a0bf 	.word	0x0800a0bf
 80070e8:	0800a0d0 	.word	0x0800a0d0

080070ec <__pow5mult>:
 80070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f0:	4615      	mov	r5, r2
 80070f2:	f012 0203 	ands.w	r2, r2, #3
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	d007      	beq.n	800710c <__pow5mult+0x20>
 80070fc:	4c25      	ldr	r4, [pc, #148]	; (8007194 <__pow5mult+0xa8>)
 80070fe:	3a01      	subs	r2, #1
 8007100:	2300      	movs	r3, #0
 8007102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007106:	f7ff fe53 	bl	8006db0 <__multadd>
 800710a:	4607      	mov	r7, r0
 800710c:	10ad      	asrs	r5, r5, #2
 800710e:	d03d      	beq.n	800718c <__pow5mult+0xa0>
 8007110:	69f4      	ldr	r4, [r6, #28]
 8007112:	b97c      	cbnz	r4, 8007134 <__pow5mult+0x48>
 8007114:	2010      	movs	r0, #16
 8007116:	f7ff fd35 	bl	8006b84 <malloc>
 800711a:	4602      	mov	r2, r0
 800711c:	61f0      	str	r0, [r6, #28]
 800711e:	b928      	cbnz	r0, 800712c <__pow5mult+0x40>
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <__pow5mult+0xac>)
 8007122:	481e      	ldr	r0, [pc, #120]	; (800719c <__pow5mult+0xb0>)
 8007124:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007128:	f001 fffe 	bl	8009128 <__assert_func>
 800712c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007130:	6004      	str	r4, [r0, #0]
 8007132:	60c4      	str	r4, [r0, #12]
 8007134:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800713c:	b94c      	cbnz	r4, 8007152 <__pow5mult+0x66>
 800713e:	f240 2171 	movw	r1, #625	; 0x271
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff12 	bl	8006f6c <__i2b>
 8007148:	2300      	movs	r3, #0
 800714a:	f8c8 0008 	str.w	r0, [r8, #8]
 800714e:	4604      	mov	r4, r0
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	f04f 0900 	mov.w	r9, #0
 8007156:	07eb      	lsls	r3, r5, #31
 8007158:	d50a      	bpl.n	8007170 <__pow5mult+0x84>
 800715a:	4639      	mov	r1, r7
 800715c:	4622      	mov	r2, r4
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff ff1a 	bl	8006f98 <__multiply>
 8007164:	4639      	mov	r1, r7
 8007166:	4680      	mov	r8, r0
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff fdff 	bl	8006d6c <_Bfree>
 800716e:	4647      	mov	r7, r8
 8007170:	106d      	asrs	r5, r5, #1
 8007172:	d00b      	beq.n	800718c <__pow5mult+0xa0>
 8007174:	6820      	ldr	r0, [r4, #0]
 8007176:	b938      	cbnz	r0, 8007188 <__pow5mult+0x9c>
 8007178:	4622      	mov	r2, r4
 800717a:	4621      	mov	r1, r4
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff ff0b 	bl	8006f98 <__multiply>
 8007182:	6020      	str	r0, [r4, #0]
 8007184:	f8c0 9000 	str.w	r9, [r0]
 8007188:	4604      	mov	r4, r0
 800718a:	e7e4      	b.n	8007156 <__pow5mult+0x6a>
 800718c:	4638      	mov	r0, r7
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	bf00      	nop
 8007194:	0800a220 	.word	0x0800a220
 8007198:	0800a050 	.word	0x0800a050
 800719c:	0800a0d0 	.word	0x0800a0d0

080071a0 <__lshift>:
 80071a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	460c      	mov	r4, r1
 80071a6:	6849      	ldr	r1, [r1, #4]
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	4607      	mov	r7, r0
 80071b2:	4691      	mov	r9, r2
 80071b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071b8:	f108 0601 	add.w	r6, r8, #1
 80071bc:	42b3      	cmp	r3, r6
 80071be:	db0b      	blt.n	80071d8 <__lshift+0x38>
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7ff fd93 	bl	8006cec <_Balloc>
 80071c6:	4605      	mov	r5, r0
 80071c8:	b948      	cbnz	r0, 80071de <__lshift+0x3e>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b28      	ldr	r3, [pc, #160]	; (8007270 <__lshift+0xd0>)
 80071ce:	4829      	ldr	r0, [pc, #164]	; (8007274 <__lshift+0xd4>)
 80071d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071d4:	f001 ffa8 	bl	8009128 <__assert_func>
 80071d8:	3101      	adds	r1, #1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	e7ee      	b.n	80071bc <__lshift+0x1c>
 80071de:	2300      	movs	r3, #0
 80071e0:	f100 0114 	add.w	r1, r0, #20
 80071e4:	f100 0210 	add.w	r2, r0, #16
 80071e8:	4618      	mov	r0, r3
 80071ea:	4553      	cmp	r3, sl
 80071ec:	db33      	blt.n	8007256 <__lshift+0xb6>
 80071ee:	6920      	ldr	r0, [r4, #16]
 80071f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f4:	f104 0314 	add.w	r3, r4, #20
 80071f8:	f019 091f 	ands.w	r9, r9, #31
 80071fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007200:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007204:	d02b      	beq.n	800725e <__lshift+0xbe>
 8007206:	f1c9 0e20 	rsb	lr, r9, #32
 800720a:	468a      	mov	sl, r1
 800720c:	2200      	movs	r2, #0
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	fa00 f009 	lsl.w	r0, r0, r9
 8007214:	4310      	orrs	r0, r2
 8007216:	f84a 0b04 	str.w	r0, [sl], #4
 800721a:	f853 2b04 	ldr.w	r2, [r3], #4
 800721e:	459c      	cmp	ip, r3
 8007220:	fa22 f20e 	lsr.w	r2, r2, lr
 8007224:	d8f3      	bhi.n	800720e <__lshift+0x6e>
 8007226:	ebac 0304 	sub.w	r3, ip, r4
 800722a:	3b15      	subs	r3, #21
 800722c:	f023 0303 	bic.w	r3, r3, #3
 8007230:	3304      	adds	r3, #4
 8007232:	f104 0015 	add.w	r0, r4, #21
 8007236:	4584      	cmp	ip, r0
 8007238:	bf38      	it	cc
 800723a:	2304      	movcc	r3, #4
 800723c:	50ca      	str	r2, [r1, r3]
 800723e:	b10a      	cbz	r2, 8007244 <__lshift+0xa4>
 8007240:	f108 0602 	add.w	r6, r8, #2
 8007244:	3e01      	subs	r6, #1
 8007246:	4638      	mov	r0, r7
 8007248:	612e      	str	r6, [r5, #16]
 800724a:	4621      	mov	r1, r4
 800724c:	f7ff fd8e 	bl	8006d6c <_Bfree>
 8007250:	4628      	mov	r0, r5
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	f842 0f04 	str.w	r0, [r2, #4]!
 800725a:	3301      	adds	r3, #1
 800725c:	e7c5      	b.n	80071ea <__lshift+0x4a>
 800725e:	3904      	subs	r1, #4
 8007260:	f853 2b04 	ldr.w	r2, [r3], #4
 8007264:	f841 2f04 	str.w	r2, [r1, #4]!
 8007268:	459c      	cmp	ip, r3
 800726a:	d8f9      	bhi.n	8007260 <__lshift+0xc0>
 800726c:	e7ea      	b.n	8007244 <__lshift+0xa4>
 800726e:	bf00      	nop
 8007270:	0800a0bf 	.word	0x0800a0bf
 8007274:	0800a0d0 	.word	0x0800a0d0

08007278 <__mcmp>:
 8007278:	b530      	push	{r4, r5, lr}
 800727a:	6902      	ldr	r2, [r0, #16]
 800727c:	690c      	ldr	r4, [r1, #16]
 800727e:	1b12      	subs	r2, r2, r4
 8007280:	d10e      	bne.n	80072a0 <__mcmp+0x28>
 8007282:	f100 0314 	add.w	r3, r0, #20
 8007286:	3114      	adds	r1, #20
 8007288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800728c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007298:	42a5      	cmp	r5, r4
 800729a:	d003      	beq.n	80072a4 <__mcmp+0x2c>
 800729c:	d305      	bcc.n	80072aa <__mcmp+0x32>
 800729e:	2201      	movs	r2, #1
 80072a0:	4610      	mov	r0, r2
 80072a2:	bd30      	pop	{r4, r5, pc}
 80072a4:	4283      	cmp	r3, r0
 80072a6:	d3f3      	bcc.n	8007290 <__mcmp+0x18>
 80072a8:	e7fa      	b.n	80072a0 <__mcmp+0x28>
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	e7f7      	b.n	80072a0 <__mcmp+0x28>

080072b0 <__mdiff>:
 80072b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	460c      	mov	r4, r1
 80072b6:	4606      	mov	r6, r0
 80072b8:	4611      	mov	r1, r2
 80072ba:	4620      	mov	r0, r4
 80072bc:	4690      	mov	r8, r2
 80072be:	f7ff ffdb 	bl	8007278 <__mcmp>
 80072c2:	1e05      	subs	r5, r0, #0
 80072c4:	d110      	bne.n	80072e8 <__mdiff+0x38>
 80072c6:	4629      	mov	r1, r5
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7ff fd0f 	bl	8006cec <_Balloc>
 80072ce:	b930      	cbnz	r0, 80072de <__mdiff+0x2e>
 80072d0:	4b3a      	ldr	r3, [pc, #232]	; (80073bc <__mdiff+0x10c>)
 80072d2:	4602      	mov	r2, r0
 80072d4:	f240 2137 	movw	r1, #567	; 0x237
 80072d8:	4839      	ldr	r0, [pc, #228]	; (80073c0 <__mdiff+0x110>)
 80072da:	f001 ff25 	bl	8009128 <__assert_func>
 80072de:	2301      	movs	r3, #1
 80072e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e8:	bfa4      	itt	ge
 80072ea:	4643      	movge	r3, r8
 80072ec:	46a0      	movge	r8, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072f4:	bfa6      	itte	ge
 80072f6:	461c      	movge	r4, r3
 80072f8:	2500      	movge	r5, #0
 80072fa:	2501      	movlt	r5, #1
 80072fc:	f7ff fcf6 	bl	8006cec <_Balloc>
 8007300:	b920      	cbnz	r0, 800730c <__mdiff+0x5c>
 8007302:	4b2e      	ldr	r3, [pc, #184]	; (80073bc <__mdiff+0x10c>)
 8007304:	4602      	mov	r2, r0
 8007306:	f240 2145 	movw	r1, #581	; 0x245
 800730a:	e7e5      	b.n	80072d8 <__mdiff+0x28>
 800730c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007310:	6926      	ldr	r6, [r4, #16]
 8007312:	60c5      	str	r5, [r0, #12]
 8007314:	f104 0914 	add.w	r9, r4, #20
 8007318:	f108 0514 	add.w	r5, r8, #20
 800731c:	f100 0e14 	add.w	lr, r0, #20
 8007320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007328:	f108 0210 	add.w	r2, r8, #16
 800732c:	46f2      	mov	sl, lr
 800732e:	2100      	movs	r1, #0
 8007330:	f859 3b04 	ldr.w	r3, [r9], #4
 8007334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007338:	fa11 f88b 	uxtah	r8, r1, fp
 800733c:	b299      	uxth	r1, r3
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	eba8 0801 	sub.w	r8, r8, r1
 8007344:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007348:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800734c:	fa1f f888 	uxth.w	r8, r8
 8007350:	1419      	asrs	r1, r3, #16
 8007352:	454e      	cmp	r6, r9
 8007354:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007358:	f84a 3b04 	str.w	r3, [sl], #4
 800735c:	d8e8      	bhi.n	8007330 <__mdiff+0x80>
 800735e:	1b33      	subs	r3, r6, r4
 8007360:	3b15      	subs	r3, #21
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	3304      	adds	r3, #4
 8007368:	3415      	adds	r4, #21
 800736a:	42a6      	cmp	r6, r4
 800736c:	bf38      	it	cc
 800736e:	2304      	movcc	r3, #4
 8007370:	441d      	add	r5, r3
 8007372:	4473      	add	r3, lr
 8007374:	469e      	mov	lr, r3
 8007376:	462e      	mov	r6, r5
 8007378:	4566      	cmp	r6, ip
 800737a:	d30e      	bcc.n	800739a <__mdiff+0xea>
 800737c:	f10c 0203 	add.w	r2, ip, #3
 8007380:	1b52      	subs	r2, r2, r5
 8007382:	f022 0203 	bic.w	r2, r2, #3
 8007386:	3d03      	subs	r5, #3
 8007388:	45ac      	cmp	ip, r5
 800738a:	bf38      	it	cc
 800738c:	2200      	movcc	r2, #0
 800738e:	4413      	add	r3, r2
 8007390:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007394:	b17a      	cbz	r2, 80073b6 <__mdiff+0x106>
 8007396:	6107      	str	r7, [r0, #16]
 8007398:	e7a4      	b.n	80072e4 <__mdiff+0x34>
 800739a:	f856 8b04 	ldr.w	r8, [r6], #4
 800739e:	fa11 f288 	uxtah	r2, r1, r8
 80073a2:	1414      	asrs	r4, r2, #16
 80073a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073a8:	b292      	uxth	r2, r2
 80073aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073ae:	f84e 2b04 	str.w	r2, [lr], #4
 80073b2:	1421      	asrs	r1, r4, #16
 80073b4:	e7e0      	b.n	8007378 <__mdiff+0xc8>
 80073b6:	3f01      	subs	r7, #1
 80073b8:	e7ea      	b.n	8007390 <__mdiff+0xe0>
 80073ba:	bf00      	nop
 80073bc:	0800a0bf 	.word	0x0800a0bf
 80073c0:	0800a0d0 	.word	0x0800a0d0

080073c4 <__ulp>:
 80073c4:	b082      	sub	sp, #8
 80073c6:	ed8d 0b00 	vstr	d0, [sp]
 80073ca:	9a01      	ldr	r2, [sp, #4]
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <__ulp+0x48>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc08      	bgt.n	80073ea <__ulp+0x26>
 80073d8:	425b      	negs	r3, r3
 80073da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80073de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073e2:	da04      	bge.n	80073ee <__ulp+0x2a>
 80073e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073e8:	4113      	asrs	r3, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	e008      	b.n	8007400 <__ulp+0x3c>
 80073ee:	f1a2 0314 	sub.w	r3, r2, #20
 80073f2:	2b1e      	cmp	r3, #30
 80073f4:	bfda      	itte	le
 80073f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80073fa:	40da      	lsrle	r2, r3
 80073fc:	2201      	movgt	r2, #1
 80073fe:	2300      	movs	r3, #0
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	ec41 0b10 	vmov	d0, r0, r1
 8007408:	b002      	add	sp, #8
 800740a:	4770      	bx	lr
 800740c:	7ff00000 	.word	0x7ff00000

08007410 <__b2d>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	6906      	ldr	r6, [r0, #16]
 8007416:	f100 0814 	add.w	r8, r0, #20
 800741a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800741e:	1f37      	subs	r7, r6, #4
 8007420:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007424:	4610      	mov	r0, r2
 8007426:	f7ff fd53 	bl	8006ed0 <__hi0bits>
 800742a:	f1c0 0320 	rsb	r3, r0, #32
 800742e:	280a      	cmp	r0, #10
 8007430:	600b      	str	r3, [r1, #0]
 8007432:	491b      	ldr	r1, [pc, #108]	; (80074a0 <__b2d+0x90>)
 8007434:	dc15      	bgt.n	8007462 <__b2d+0x52>
 8007436:	f1c0 0c0b 	rsb	ip, r0, #11
 800743a:	fa22 f30c 	lsr.w	r3, r2, ip
 800743e:	45b8      	cmp	r8, r7
 8007440:	ea43 0501 	orr.w	r5, r3, r1
 8007444:	bf34      	ite	cc
 8007446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800744a:	2300      	movcs	r3, #0
 800744c:	3015      	adds	r0, #21
 800744e:	fa02 f000 	lsl.w	r0, r2, r0
 8007452:	fa23 f30c 	lsr.w	r3, r3, ip
 8007456:	4303      	orrs	r3, r0
 8007458:	461c      	mov	r4, r3
 800745a:	ec45 4b10 	vmov	d0, r4, r5
 800745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007462:	45b8      	cmp	r8, r7
 8007464:	bf3a      	itte	cc
 8007466:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800746a:	f1a6 0708 	subcc.w	r7, r6, #8
 800746e:	2300      	movcs	r3, #0
 8007470:	380b      	subs	r0, #11
 8007472:	d012      	beq.n	800749a <__b2d+0x8a>
 8007474:	f1c0 0120 	rsb	r1, r0, #32
 8007478:	fa23 f401 	lsr.w	r4, r3, r1
 800747c:	4082      	lsls	r2, r0
 800747e:	4322      	orrs	r2, r4
 8007480:	4547      	cmp	r7, r8
 8007482:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007486:	bf8c      	ite	hi
 8007488:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800748c:	2200      	movls	r2, #0
 800748e:	4083      	lsls	r3, r0
 8007490:	40ca      	lsrs	r2, r1
 8007492:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007496:	4313      	orrs	r3, r2
 8007498:	e7de      	b.n	8007458 <__b2d+0x48>
 800749a:	ea42 0501 	orr.w	r5, r2, r1
 800749e:	e7db      	b.n	8007458 <__b2d+0x48>
 80074a0:	3ff00000 	.word	0x3ff00000

080074a4 <__d2b>:
 80074a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	460f      	mov	r7, r1
 80074aa:	2101      	movs	r1, #1
 80074ac:	ec59 8b10 	vmov	r8, r9, d0
 80074b0:	4616      	mov	r6, r2
 80074b2:	f7ff fc1b 	bl	8006cec <_Balloc>
 80074b6:	4604      	mov	r4, r0
 80074b8:	b930      	cbnz	r0, 80074c8 <__d2b+0x24>
 80074ba:	4602      	mov	r2, r0
 80074bc:	4b24      	ldr	r3, [pc, #144]	; (8007550 <__d2b+0xac>)
 80074be:	4825      	ldr	r0, [pc, #148]	; (8007554 <__d2b+0xb0>)
 80074c0:	f240 310f 	movw	r1, #783	; 0x30f
 80074c4:	f001 fe30 	bl	8009128 <__assert_func>
 80074c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074d0:	bb2d      	cbnz	r5, 800751e <__d2b+0x7a>
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	f1b8 0300 	subs.w	r3, r8, #0
 80074d8:	d026      	beq.n	8007528 <__d2b+0x84>
 80074da:	4668      	mov	r0, sp
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	f7ff fd17 	bl	8006f10 <__lo0bits>
 80074e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074e6:	b1e8      	cbz	r0, 8007524 <__d2b+0x80>
 80074e8:	f1c0 0320 	rsb	r3, r0, #32
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	430b      	orrs	r3, r1
 80074f2:	40c2      	lsrs	r2, r0
 80074f4:	6163      	str	r3, [r4, #20]
 80074f6:	9201      	str	r2, [sp, #4]
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	61a3      	str	r3, [r4, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf14      	ite	ne
 8007500:	2202      	movne	r2, #2
 8007502:	2201      	moveq	r2, #1
 8007504:	6122      	str	r2, [r4, #16]
 8007506:	b1bd      	cbz	r5, 8007538 <__d2b+0x94>
 8007508:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800750c:	4405      	add	r5, r0
 800750e:	603d      	str	r5, [r7, #0]
 8007510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007514:	6030      	str	r0, [r6, #0]
 8007516:	4620      	mov	r0, r4
 8007518:	b003      	add	sp, #12
 800751a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800751e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007522:	e7d6      	b.n	80074d2 <__d2b+0x2e>
 8007524:	6161      	str	r1, [r4, #20]
 8007526:	e7e7      	b.n	80074f8 <__d2b+0x54>
 8007528:	a801      	add	r0, sp, #4
 800752a:	f7ff fcf1 	bl	8006f10 <__lo0bits>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	6163      	str	r3, [r4, #20]
 8007532:	3020      	adds	r0, #32
 8007534:	2201      	movs	r2, #1
 8007536:	e7e5      	b.n	8007504 <__d2b+0x60>
 8007538:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800753c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007540:	6038      	str	r0, [r7, #0]
 8007542:	6918      	ldr	r0, [r3, #16]
 8007544:	f7ff fcc4 	bl	8006ed0 <__hi0bits>
 8007548:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800754c:	e7e2      	b.n	8007514 <__d2b+0x70>
 800754e:	bf00      	nop
 8007550:	0800a0bf 	.word	0x0800a0bf
 8007554:	0800a0d0 	.word	0x0800a0d0

08007558 <__ratio>:
 8007558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4688      	mov	r8, r1
 800755e:	4669      	mov	r1, sp
 8007560:	4681      	mov	r9, r0
 8007562:	f7ff ff55 	bl	8007410 <__b2d>
 8007566:	a901      	add	r1, sp, #4
 8007568:	4640      	mov	r0, r8
 800756a:	ec55 4b10 	vmov	r4, r5, d0
 800756e:	f7ff ff4f 	bl	8007410 <__b2d>
 8007572:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007576:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800757a:	eba3 0c02 	sub.w	ip, r3, r2
 800757e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007588:	ec51 0b10 	vmov	r0, r1, d0
 800758c:	2b00      	cmp	r3, #0
 800758e:	bfd6      	itet	le
 8007590:	460a      	movle	r2, r1
 8007592:	462a      	movgt	r2, r5
 8007594:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007598:	468b      	mov	fp, r1
 800759a:	462f      	mov	r7, r5
 800759c:	bfd4      	ite	le
 800759e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80075a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80075a6:	4620      	mov	r0, r4
 80075a8:	ee10 2a10 	vmov	r2, s0
 80075ac:	465b      	mov	r3, fp
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f9 f94c 	bl	800084c <__aeabi_ddiv>
 80075b4:	ec41 0b10 	vmov	d0, r0, r1
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075be <__copybits>:
 80075be:	3901      	subs	r1, #1
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	1149      	asrs	r1, r1, #5
 80075c4:	6914      	ldr	r4, [r2, #16]
 80075c6:	3101      	adds	r1, #1
 80075c8:	f102 0314 	add.w	r3, r2, #20
 80075cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075d4:	1f05      	subs	r5, r0, #4
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	d30c      	bcc.n	80075f4 <__copybits+0x36>
 80075da:	1aa3      	subs	r3, r4, r2
 80075dc:	3b11      	subs	r3, #17
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	3211      	adds	r2, #17
 80075e4:	42a2      	cmp	r2, r4
 80075e6:	bf88      	it	hi
 80075e8:	2300      	movhi	r3, #0
 80075ea:	4418      	add	r0, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	4288      	cmp	r0, r1
 80075f0:	d305      	bcc.n	80075fe <__copybits+0x40>
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80075f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80075fc:	e7eb      	b.n	80075d6 <__copybits+0x18>
 80075fe:	f840 3b04 	str.w	r3, [r0], #4
 8007602:	e7f4      	b.n	80075ee <__copybits+0x30>

08007604 <__any_on>:
 8007604:	f100 0214 	add.w	r2, r0, #20
 8007608:	6900      	ldr	r0, [r0, #16]
 800760a:	114b      	asrs	r3, r1, #5
 800760c:	4298      	cmp	r0, r3
 800760e:	b510      	push	{r4, lr}
 8007610:	db11      	blt.n	8007636 <__any_on+0x32>
 8007612:	dd0a      	ble.n	800762a <__any_on+0x26>
 8007614:	f011 011f 	ands.w	r1, r1, #31
 8007618:	d007      	beq.n	800762a <__any_on+0x26>
 800761a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800761e:	fa24 f001 	lsr.w	r0, r4, r1
 8007622:	fa00 f101 	lsl.w	r1, r0, r1
 8007626:	428c      	cmp	r4, r1
 8007628:	d10b      	bne.n	8007642 <__any_on+0x3e>
 800762a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800762e:	4293      	cmp	r3, r2
 8007630:	d803      	bhi.n	800763a <__any_on+0x36>
 8007632:	2000      	movs	r0, #0
 8007634:	bd10      	pop	{r4, pc}
 8007636:	4603      	mov	r3, r0
 8007638:	e7f7      	b.n	800762a <__any_on+0x26>
 800763a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800763e:	2900      	cmp	r1, #0
 8007640:	d0f5      	beq.n	800762e <__any_on+0x2a>
 8007642:	2001      	movs	r0, #1
 8007644:	e7f6      	b.n	8007634 <__any_on+0x30>

08007646 <sulp>:
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	4604      	mov	r4, r0
 800764a:	460d      	mov	r5, r1
 800764c:	ec45 4b10 	vmov	d0, r4, r5
 8007650:	4616      	mov	r6, r2
 8007652:	f7ff feb7 	bl	80073c4 <__ulp>
 8007656:	ec51 0b10 	vmov	r0, r1, d0
 800765a:	b17e      	cbz	r6, 800767c <sulp+0x36>
 800765c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd09      	ble.n	800767c <sulp+0x36>
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800766e:	2400      	movs	r4, #0
 8007670:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007674:	4622      	mov	r2, r4
 8007676:	462b      	mov	r3, r5
 8007678:	f7f8 ffbe 	bl	80005f8 <__aeabi_dmul>
 800767c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007680 <_strtod_l>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	ed2d 8b02 	vpush	{d8}
 8007688:	b09b      	sub	sp, #108	; 0x6c
 800768a:	4604      	mov	r4, r0
 800768c:	9213      	str	r2, [sp, #76]	; 0x4c
 800768e:	2200      	movs	r2, #0
 8007690:	9216      	str	r2, [sp, #88]	; 0x58
 8007692:	460d      	mov	r5, r1
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	f04f 0900 	mov.w	r9, #0
 800769c:	460a      	mov	r2, r1
 800769e:	9215      	str	r2, [sp, #84]	; 0x54
 80076a0:	7811      	ldrb	r1, [r2, #0]
 80076a2:	292b      	cmp	r1, #43	; 0x2b
 80076a4:	d04c      	beq.n	8007740 <_strtod_l+0xc0>
 80076a6:	d83a      	bhi.n	800771e <_strtod_l+0x9e>
 80076a8:	290d      	cmp	r1, #13
 80076aa:	d834      	bhi.n	8007716 <_strtod_l+0x96>
 80076ac:	2908      	cmp	r1, #8
 80076ae:	d834      	bhi.n	800771a <_strtod_l+0x9a>
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d03d      	beq.n	8007730 <_strtod_l+0xb0>
 80076b4:	2200      	movs	r2, #0
 80076b6:	920a      	str	r2, [sp, #40]	; 0x28
 80076b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80076ba:	7832      	ldrb	r2, [r6, #0]
 80076bc:	2a30      	cmp	r2, #48	; 0x30
 80076be:	f040 80b4 	bne.w	800782a <_strtod_l+0x1aa>
 80076c2:	7872      	ldrb	r2, [r6, #1]
 80076c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80076c8:	2a58      	cmp	r2, #88	; 0x58
 80076ca:	d170      	bne.n	80077ae <_strtod_l+0x12e>
 80076cc:	9302      	str	r3, [sp, #8]
 80076ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	ab16      	add	r3, sp, #88	; 0x58
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	4a8e      	ldr	r2, [pc, #568]	; (8007910 <_strtod_l+0x290>)
 80076d8:	ab17      	add	r3, sp, #92	; 0x5c
 80076da:	a915      	add	r1, sp, #84	; 0x54
 80076dc:	4620      	mov	r0, r4
 80076de:	f001 fdbf 	bl	8009260 <__gethex>
 80076e2:	f010 070f 	ands.w	r7, r0, #15
 80076e6:	4605      	mov	r5, r0
 80076e8:	d005      	beq.n	80076f6 <_strtod_l+0x76>
 80076ea:	2f06      	cmp	r7, #6
 80076ec:	d12a      	bne.n	8007744 <_strtod_l+0xc4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	2300      	movs	r3, #0
 80076f2:	9615      	str	r6, [sp, #84]	; 0x54
 80076f4:	930a      	str	r3, [sp, #40]	; 0x28
 80076f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 857f 	bne.w	80081fc <_strtod_l+0xb7c>
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	b1db      	cbz	r3, 800773a <_strtod_l+0xba>
 8007702:	4642      	mov	r2, r8
 8007704:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007708:	ec43 2b10 	vmov	d0, r2, r3
 800770c:	b01b      	add	sp, #108	; 0x6c
 800770e:	ecbd 8b02 	vpop	{d8}
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	2920      	cmp	r1, #32
 8007718:	d1cc      	bne.n	80076b4 <_strtod_l+0x34>
 800771a:	3201      	adds	r2, #1
 800771c:	e7bf      	b.n	800769e <_strtod_l+0x1e>
 800771e:	292d      	cmp	r1, #45	; 0x2d
 8007720:	d1c8      	bne.n	80076b4 <_strtod_l+0x34>
 8007722:	2101      	movs	r1, #1
 8007724:	910a      	str	r1, [sp, #40]	; 0x28
 8007726:	1c51      	adds	r1, r2, #1
 8007728:	9115      	str	r1, [sp, #84]	; 0x54
 800772a:	7852      	ldrb	r2, [r2, #1]
 800772c:	2a00      	cmp	r2, #0
 800772e:	d1c3      	bne.n	80076b8 <_strtod_l+0x38>
 8007730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007732:	9515      	str	r5, [sp, #84]	; 0x54
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 855f 	bne.w	80081f8 <_strtod_l+0xb78>
 800773a:	4642      	mov	r2, r8
 800773c:	464b      	mov	r3, r9
 800773e:	e7e3      	b.n	8007708 <_strtod_l+0x88>
 8007740:	2100      	movs	r1, #0
 8007742:	e7ef      	b.n	8007724 <_strtod_l+0xa4>
 8007744:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007746:	b13a      	cbz	r2, 8007758 <_strtod_l+0xd8>
 8007748:	2135      	movs	r1, #53	; 0x35
 800774a:	a818      	add	r0, sp, #96	; 0x60
 800774c:	f7ff ff37 	bl	80075be <__copybits>
 8007750:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007752:	4620      	mov	r0, r4
 8007754:	f7ff fb0a 	bl	8006d6c <_Bfree>
 8007758:	3f01      	subs	r7, #1
 800775a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800775c:	2f04      	cmp	r7, #4
 800775e:	d806      	bhi.n	800776e <_strtod_l+0xee>
 8007760:	e8df f007 	tbb	[pc, r7]
 8007764:	201d0314 	.word	0x201d0314
 8007768:	14          	.byte	0x14
 8007769:	00          	.byte	0x00
 800776a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800776e:	05e9      	lsls	r1, r5, #23
 8007770:	bf48      	it	mi
 8007772:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800777a:	0d1b      	lsrs	r3, r3, #20
 800777c:	051b      	lsls	r3, r3, #20
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1b9      	bne.n	80076f6 <_strtod_l+0x76>
 8007782:	f7fe fafb 	bl	8005d7c <__errno>
 8007786:	2322      	movs	r3, #34	; 0x22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	e7b4      	b.n	80076f6 <_strtod_l+0x76>
 800778c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007790:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007794:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007798:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800779c:	e7e7      	b.n	800776e <_strtod_l+0xee>
 800779e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007918 <_strtod_l+0x298>
 80077a2:	e7e4      	b.n	800776e <_strtod_l+0xee>
 80077a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80077a8:	f04f 38ff 	mov.w	r8, #4294967295
 80077ac:	e7df      	b.n	800776e <_strtod_l+0xee>
 80077ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	9215      	str	r2, [sp, #84]	; 0x54
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b30      	cmp	r3, #48	; 0x30
 80077b8:	d0f9      	beq.n	80077ae <_strtod_l+0x12e>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d09b      	beq.n	80076f6 <_strtod_l+0x76>
 80077be:	2301      	movs	r3, #1
 80077c0:	f04f 0a00 	mov.w	sl, #0
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80077ce:	46d3      	mov	fp, sl
 80077d0:	220a      	movs	r2, #10
 80077d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80077d4:	7806      	ldrb	r6, [r0, #0]
 80077d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80077da:	b2d9      	uxtb	r1, r3
 80077dc:	2909      	cmp	r1, #9
 80077de:	d926      	bls.n	800782e <_strtod_l+0x1ae>
 80077e0:	494c      	ldr	r1, [pc, #304]	; (8007914 <_strtod_l+0x294>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	f001 fc67 	bl	80090b6 <strncmp>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d030      	beq.n	800784e <_strtod_l+0x1ce>
 80077ec:	2000      	movs	r0, #0
 80077ee:	4632      	mov	r2, r6
 80077f0:	9005      	str	r0, [sp, #20]
 80077f2:	465e      	mov	r6, fp
 80077f4:	4603      	mov	r3, r0
 80077f6:	2a65      	cmp	r2, #101	; 0x65
 80077f8:	d001      	beq.n	80077fe <_strtod_l+0x17e>
 80077fa:	2a45      	cmp	r2, #69	; 0x45
 80077fc:	d113      	bne.n	8007826 <_strtod_l+0x1a6>
 80077fe:	b91e      	cbnz	r6, 8007808 <_strtod_l+0x188>
 8007800:	9a04      	ldr	r2, [sp, #16]
 8007802:	4302      	orrs	r2, r0
 8007804:	d094      	beq.n	8007730 <_strtod_l+0xb0>
 8007806:	2600      	movs	r6, #0
 8007808:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800780a:	1c6a      	adds	r2, r5, #1
 800780c:	9215      	str	r2, [sp, #84]	; 0x54
 800780e:	786a      	ldrb	r2, [r5, #1]
 8007810:	2a2b      	cmp	r2, #43	; 0x2b
 8007812:	d074      	beq.n	80078fe <_strtod_l+0x27e>
 8007814:	2a2d      	cmp	r2, #45	; 0x2d
 8007816:	d078      	beq.n	800790a <_strtod_l+0x28a>
 8007818:	f04f 0c00 	mov.w	ip, #0
 800781c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007820:	2909      	cmp	r1, #9
 8007822:	d97f      	bls.n	8007924 <_strtod_l+0x2a4>
 8007824:	9515      	str	r5, [sp, #84]	; 0x54
 8007826:	2700      	movs	r7, #0
 8007828:	e09e      	b.n	8007968 <_strtod_l+0x2e8>
 800782a:	2300      	movs	r3, #0
 800782c:	e7c8      	b.n	80077c0 <_strtod_l+0x140>
 800782e:	f1bb 0f08 	cmp.w	fp, #8
 8007832:	bfd8      	it	le
 8007834:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007836:	f100 0001 	add.w	r0, r0, #1
 800783a:	bfda      	itte	le
 800783c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007840:	9309      	strle	r3, [sp, #36]	; 0x24
 8007842:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007846:	f10b 0b01 	add.w	fp, fp, #1
 800784a:	9015      	str	r0, [sp, #84]	; 0x54
 800784c:	e7c1      	b.n	80077d2 <_strtod_l+0x152>
 800784e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	9215      	str	r2, [sp, #84]	; 0x54
 8007854:	785a      	ldrb	r2, [r3, #1]
 8007856:	f1bb 0f00 	cmp.w	fp, #0
 800785a:	d037      	beq.n	80078cc <_strtod_l+0x24c>
 800785c:	9005      	str	r0, [sp, #20]
 800785e:	465e      	mov	r6, fp
 8007860:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007864:	2b09      	cmp	r3, #9
 8007866:	d912      	bls.n	800788e <_strtod_l+0x20e>
 8007868:	2301      	movs	r3, #1
 800786a:	e7c4      	b.n	80077f6 <_strtod_l+0x176>
 800786c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	9215      	str	r2, [sp, #84]	; 0x54
 8007872:	785a      	ldrb	r2, [r3, #1]
 8007874:	3001      	adds	r0, #1
 8007876:	2a30      	cmp	r2, #48	; 0x30
 8007878:	d0f8      	beq.n	800786c <_strtod_l+0x1ec>
 800787a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800787e:	2b08      	cmp	r3, #8
 8007880:	f200 84c1 	bhi.w	8008206 <_strtod_l+0xb86>
 8007884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007886:	9005      	str	r0, [sp, #20]
 8007888:	2000      	movs	r0, #0
 800788a:	930b      	str	r3, [sp, #44]	; 0x2c
 800788c:	4606      	mov	r6, r0
 800788e:	3a30      	subs	r2, #48	; 0x30
 8007890:	f100 0301 	add.w	r3, r0, #1
 8007894:	d014      	beq.n	80078c0 <_strtod_l+0x240>
 8007896:	9905      	ldr	r1, [sp, #20]
 8007898:	4419      	add	r1, r3
 800789a:	9105      	str	r1, [sp, #20]
 800789c:	4633      	mov	r3, r6
 800789e:	eb00 0c06 	add.w	ip, r0, r6
 80078a2:	210a      	movs	r1, #10
 80078a4:	4563      	cmp	r3, ip
 80078a6:	d113      	bne.n	80078d0 <_strtod_l+0x250>
 80078a8:	1833      	adds	r3, r6, r0
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	f106 0601 	add.w	r6, r6, #1
 80078b0:	4406      	add	r6, r0
 80078b2:	dc1a      	bgt.n	80078ea <_strtod_l+0x26a>
 80078b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078b6:	230a      	movs	r3, #10
 80078b8:	fb03 2301 	mla	r3, r3, r1, r2
 80078bc:	9309      	str	r3, [sp, #36]	; 0x24
 80078be:	2300      	movs	r3, #0
 80078c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078c2:	1c51      	adds	r1, r2, #1
 80078c4:	9115      	str	r1, [sp, #84]	; 0x54
 80078c6:	7852      	ldrb	r2, [r2, #1]
 80078c8:	4618      	mov	r0, r3
 80078ca:	e7c9      	b.n	8007860 <_strtod_l+0x1e0>
 80078cc:	4658      	mov	r0, fp
 80078ce:	e7d2      	b.n	8007876 <_strtod_l+0x1f6>
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	f103 0301 	add.w	r3, r3, #1
 80078d6:	dc03      	bgt.n	80078e0 <_strtod_l+0x260>
 80078d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078da:	434f      	muls	r7, r1
 80078dc:	9709      	str	r7, [sp, #36]	; 0x24
 80078de:	e7e1      	b.n	80078a4 <_strtod_l+0x224>
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	bfd8      	it	le
 80078e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80078e8:	e7dc      	b.n	80078a4 <_strtod_l+0x224>
 80078ea:	2e10      	cmp	r6, #16
 80078ec:	bfdc      	itt	le
 80078ee:	230a      	movle	r3, #10
 80078f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80078f4:	e7e3      	b.n	80078be <_strtod_l+0x23e>
 80078f6:	2300      	movs	r3, #0
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	2301      	movs	r3, #1
 80078fc:	e780      	b.n	8007800 <_strtod_l+0x180>
 80078fe:	f04f 0c00 	mov.w	ip, #0
 8007902:	1caa      	adds	r2, r5, #2
 8007904:	9215      	str	r2, [sp, #84]	; 0x54
 8007906:	78aa      	ldrb	r2, [r5, #2]
 8007908:	e788      	b.n	800781c <_strtod_l+0x19c>
 800790a:	f04f 0c01 	mov.w	ip, #1
 800790e:	e7f8      	b.n	8007902 <_strtod_l+0x282>
 8007910:	0800a230 	.word	0x0800a230
 8007914:	0800a22c 	.word	0x0800a22c
 8007918:	7ff00000 	.word	0x7ff00000
 800791c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800791e:	1c51      	adds	r1, r2, #1
 8007920:	9115      	str	r1, [sp, #84]	; 0x54
 8007922:	7852      	ldrb	r2, [r2, #1]
 8007924:	2a30      	cmp	r2, #48	; 0x30
 8007926:	d0f9      	beq.n	800791c <_strtod_l+0x29c>
 8007928:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800792c:	2908      	cmp	r1, #8
 800792e:	f63f af7a 	bhi.w	8007826 <_strtod_l+0x1a6>
 8007932:	3a30      	subs	r2, #48	; 0x30
 8007934:	9208      	str	r2, [sp, #32]
 8007936:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007938:	920c      	str	r2, [sp, #48]	; 0x30
 800793a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800793c:	1c57      	adds	r7, r2, #1
 800793e:	9715      	str	r7, [sp, #84]	; 0x54
 8007940:	7852      	ldrb	r2, [r2, #1]
 8007942:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007946:	f1be 0f09 	cmp.w	lr, #9
 800794a:	d938      	bls.n	80079be <_strtod_l+0x33e>
 800794c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800794e:	1a7f      	subs	r7, r7, r1
 8007950:	2f08      	cmp	r7, #8
 8007952:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007956:	dc03      	bgt.n	8007960 <_strtod_l+0x2e0>
 8007958:	9908      	ldr	r1, [sp, #32]
 800795a:	428f      	cmp	r7, r1
 800795c:	bfa8      	it	ge
 800795e:	460f      	movge	r7, r1
 8007960:	f1bc 0f00 	cmp.w	ip, #0
 8007964:	d000      	beq.n	8007968 <_strtod_l+0x2e8>
 8007966:	427f      	negs	r7, r7
 8007968:	2e00      	cmp	r6, #0
 800796a:	d14f      	bne.n	8007a0c <_strtod_l+0x38c>
 800796c:	9904      	ldr	r1, [sp, #16]
 800796e:	4301      	orrs	r1, r0
 8007970:	f47f aec1 	bne.w	80076f6 <_strtod_l+0x76>
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f aedb 	bne.w	8007730 <_strtod_l+0xb0>
 800797a:	2a69      	cmp	r2, #105	; 0x69
 800797c:	d029      	beq.n	80079d2 <_strtod_l+0x352>
 800797e:	dc26      	bgt.n	80079ce <_strtod_l+0x34e>
 8007980:	2a49      	cmp	r2, #73	; 0x49
 8007982:	d026      	beq.n	80079d2 <_strtod_l+0x352>
 8007984:	2a4e      	cmp	r2, #78	; 0x4e
 8007986:	f47f aed3 	bne.w	8007730 <_strtod_l+0xb0>
 800798a:	499b      	ldr	r1, [pc, #620]	; (8007bf8 <_strtod_l+0x578>)
 800798c:	a815      	add	r0, sp, #84	; 0x54
 800798e:	f001 fea7 	bl	80096e0 <__match>
 8007992:	2800      	cmp	r0, #0
 8007994:	f43f aecc 	beq.w	8007730 <_strtod_l+0xb0>
 8007998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b28      	cmp	r3, #40	; 0x28
 800799e:	d12f      	bne.n	8007a00 <_strtod_l+0x380>
 80079a0:	4996      	ldr	r1, [pc, #600]	; (8007bfc <_strtod_l+0x57c>)
 80079a2:	aa18      	add	r2, sp, #96	; 0x60
 80079a4:	a815      	add	r0, sp, #84	; 0x54
 80079a6:	f001 feaf 	bl	8009708 <__hexnan>
 80079aa:	2805      	cmp	r0, #5
 80079ac:	d128      	bne.n	8007a00 <_strtod_l+0x380>
 80079ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80079b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80079bc:	e69b      	b.n	80076f6 <_strtod_l+0x76>
 80079be:	9f08      	ldr	r7, [sp, #32]
 80079c0:	210a      	movs	r1, #10
 80079c2:	fb01 2107 	mla	r1, r1, r7, r2
 80079c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80079ca:	9208      	str	r2, [sp, #32]
 80079cc:	e7b5      	b.n	800793a <_strtod_l+0x2ba>
 80079ce:	2a6e      	cmp	r2, #110	; 0x6e
 80079d0:	e7d9      	b.n	8007986 <_strtod_l+0x306>
 80079d2:	498b      	ldr	r1, [pc, #556]	; (8007c00 <_strtod_l+0x580>)
 80079d4:	a815      	add	r0, sp, #84	; 0x54
 80079d6:	f001 fe83 	bl	80096e0 <__match>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f43f aea8 	beq.w	8007730 <_strtod_l+0xb0>
 80079e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e2:	4988      	ldr	r1, [pc, #544]	; (8007c04 <_strtod_l+0x584>)
 80079e4:	3b01      	subs	r3, #1
 80079e6:	a815      	add	r0, sp, #84	; 0x54
 80079e8:	9315      	str	r3, [sp, #84]	; 0x54
 80079ea:	f001 fe79 	bl	80096e0 <__match>
 80079ee:	b910      	cbnz	r0, 80079f6 <_strtod_l+0x376>
 80079f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079f2:	3301      	adds	r3, #1
 80079f4:	9315      	str	r3, [sp, #84]	; 0x54
 80079f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007c14 <_strtod_l+0x594>
 80079fa:	f04f 0800 	mov.w	r8, #0
 80079fe:	e67a      	b.n	80076f6 <_strtod_l+0x76>
 8007a00:	4881      	ldr	r0, [pc, #516]	; (8007c08 <_strtod_l+0x588>)
 8007a02:	f001 fb89 	bl	8009118 <nan>
 8007a06:	ec59 8b10 	vmov	r8, r9, d0
 8007a0a:	e674      	b.n	80076f6 <_strtod_l+0x76>
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a10:	1afb      	subs	r3, r7, r3
 8007a12:	f1bb 0f00 	cmp.w	fp, #0
 8007a16:	bf08      	it	eq
 8007a18:	46b3      	moveq	fp, r6
 8007a1a:	2e10      	cmp	r6, #16
 8007a1c:	9308      	str	r3, [sp, #32]
 8007a1e:	4635      	mov	r5, r6
 8007a20:	bfa8      	it	ge
 8007a22:	2510      	movge	r5, #16
 8007a24:	f7f8 fd6e 	bl	8000504 <__aeabi_ui2d>
 8007a28:	2e09      	cmp	r6, #9
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	dd13      	ble.n	8007a58 <_strtod_l+0x3d8>
 8007a30:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <_strtod_l+0x58c>)
 8007a32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	4680      	mov	r8, r0
 8007a40:	4650      	mov	r0, sl
 8007a42:	4689      	mov	r9, r1
 8007a44:	f7f8 fd5e 	bl	8000504 <__aeabi_ui2d>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4649      	mov	r1, r9
 8007a50:	f7f8 fc1c 	bl	800028c <__adddf3>
 8007a54:	4680      	mov	r8, r0
 8007a56:	4689      	mov	r9, r1
 8007a58:	2e0f      	cmp	r6, #15
 8007a5a:	dc38      	bgt.n	8007ace <_strtod_l+0x44e>
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f43f ae49 	beq.w	80076f6 <_strtod_l+0x76>
 8007a64:	dd24      	ble.n	8007ab0 <_strtod_l+0x430>
 8007a66:	2b16      	cmp	r3, #22
 8007a68:	dc0b      	bgt.n	8007a82 <_strtod_l+0x402>
 8007a6a:	4968      	ldr	r1, [pc, #416]	; (8007c0c <_strtod_l+0x58c>)
 8007a6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	f7f8 fdbe 	bl	80005f8 <__aeabi_dmul>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4689      	mov	r9, r1
 8007a80:	e639      	b.n	80076f6 <_strtod_l+0x76>
 8007a82:	9a08      	ldr	r2, [sp, #32]
 8007a84:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	db20      	blt.n	8007ace <_strtod_l+0x44e>
 8007a8c:	4c5f      	ldr	r4, [pc, #380]	; (8007c0c <_strtod_l+0x58c>)
 8007a8e:	f1c6 060f 	rsb	r6, r6, #15
 8007a92:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007a96:	4642      	mov	r2, r8
 8007a98:	464b      	mov	r3, r9
 8007a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	1b9e      	subs	r6, r3, r6
 8007aa6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007aaa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007aae:	e7e3      	b.n	8007a78 <_strtod_l+0x3f8>
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	3316      	adds	r3, #22
 8007ab4:	db0b      	blt.n	8007ace <_strtod_l+0x44e>
 8007ab6:	9b05      	ldr	r3, [sp, #20]
 8007ab8:	1bdf      	subs	r7, r3, r7
 8007aba:	4b54      	ldr	r3, [pc, #336]	; (8007c0c <_strtod_l+0x58c>)
 8007abc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	f7f8 fec0 	bl	800084c <__aeabi_ddiv>
 8007acc:	e7d6      	b.n	8007a7c <_strtod_l+0x3fc>
 8007ace:	9b08      	ldr	r3, [sp, #32]
 8007ad0:	1b75      	subs	r5, r6, r5
 8007ad2:	441d      	add	r5, r3
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	dd70      	ble.n	8007bba <_strtod_l+0x53a>
 8007ad8:	f015 030f 	ands.w	r3, r5, #15
 8007adc:	d00a      	beq.n	8007af4 <_strtod_l+0x474>
 8007ade:	494b      	ldr	r1, [pc, #300]	; (8007c0c <_strtod_l+0x58c>)
 8007ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aec:	f7f8 fd84 	bl	80005f8 <__aeabi_dmul>
 8007af0:	4680      	mov	r8, r0
 8007af2:	4689      	mov	r9, r1
 8007af4:	f035 050f 	bics.w	r5, r5, #15
 8007af8:	d04d      	beq.n	8007b96 <_strtod_l+0x516>
 8007afa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007afe:	dd22      	ble.n	8007b46 <_strtod_l+0x4c6>
 8007b00:	2500      	movs	r5, #0
 8007b02:	46ab      	mov	fp, r5
 8007b04:	9509      	str	r5, [sp, #36]	; 0x24
 8007b06:	9505      	str	r5, [sp, #20]
 8007b08:	2322      	movs	r3, #34	; 0x22
 8007b0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007c14 <_strtod_l+0x594>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	f04f 0800 	mov.w	r8, #0
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f43f aded 	beq.w	80076f6 <_strtod_l+0x76>
 8007b1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff f924 	bl	8006d6c <_Bfree>
 8007b24:	9905      	ldr	r1, [sp, #20]
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff f920 	bl	8006d6c <_Bfree>
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7ff f91c 	bl	8006d6c <_Bfree>
 8007b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff f918 	bl	8006d6c <_Bfree>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff f914 	bl	8006d6c <_Bfree>
 8007b44:	e5d7      	b.n	80076f6 <_strtod_l+0x76>
 8007b46:	4b32      	ldr	r3, [pc, #200]	; (8007c10 <_strtod_l+0x590>)
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	112d      	asrs	r5, r5, #4
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	469a      	mov	sl, r3
 8007b54:	2d01      	cmp	r5, #1
 8007b56:	dc21      	bgt.n	8007b9c <_strtod_l+0x51c>
 8007b58:	b10b      	cbz	r3, 8007b5e <_strtod_l+0x4de>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	492c      	ldr	r1, [pc, #176]	; (8007c10 <_strtod_l+0x590>)
 8007b60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007b64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b68:	4642      	mov	r2, r8
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <_strtod_l+0x594>)
 8007b76:	460a      	mov	r2, r1
 8007b78:	400b      	ands	r3, r1
 8007b7a:	4927      	ldr	r1, [pc, #156]	; (8007c18 <_strtod_l+0x598>)
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	4680      	mov	r8, r0
 8007b80:	d8be      	bhi.n	8007b00 <_strtod_l+0x480>
 8007b82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b86:	428b      	cmp	r3, r1
 8007b88:	bf86      	itte	hi
 8007b8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007c1c <_strtod_l+0x59c>
 8007b8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007b92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b96:	2300      	movs	r3, #0
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	e07b      	b.n	8007c94 <_strtod_l+0x614>
 8007b9c:	07ea      	lsls	r2, r5, #31
 8007b9e:	d505      	bpl.n	8007bac <_strtod_l+0x52c>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 fd27 	bl	80005f8 <__aeabi_dmul>
 8007baa:	2301      	movs	r3, #1
 8007bac:	9a04      	ldr	r2, [sp, #16]
 8007bae:	3208      	adds	r2, #8
 8007bb0:	f10a 0a01 	add.w	sl, sl, #1
 8007bb4:	106d      	asrs	r5, r5, #1
 8007bb6:	9204      	str	r2, [sp, #16]
 8007bb8:	e7cc      	b.n	8007b54 <_strtod_l+0x4d4>
 8007bba:	d0ec      	beq.n	8007b96 <_strtod_l+0x516>
 8007bbc:	426d      	negs	r5, r5
 8007bbe:	f015 020f 	ands.w	r2, r5, #15
 8007bc2:	d00a      	beq.n	8007bda <_strtod_l+0x55a>
 8007bc4:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <_strtod_l+0x58c>)
 8007bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fe3b 	bl	800084c <__aeabi_ddiv>
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	4689      	mov	r9, r1
 8007bda:	112d      	asrs	r5, r5, #4
 8007bdc:	d0db      	beq.n	8007b96 <_strtod_l+0x516>
 8007bde:	2d1f      	cmp	r5, #31
 8007be0:	dd1e      	ble.n	8007c20 <_strtod_l+0x5a0>
 8007be2:	2500      	movs	r5, #0
 8007be4:	46ab      	mov	fp, r5
 8007be6:	9509      	str	r5, [sp, #36]	; 0x24
 8007be8:	9505      	str	r5, [sp, #20]
 8007bea:	2322      	movs	r3, #34	; 0x22
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	f04f 0900 	mov.w	r9, #0
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	e78d      	b.n	8007b14 <_strtod_l+0x494>
 8007bf8:	0800a019 	.word	0x0800a019
 8007bfc:	0800a244 	.word	0x0800a244
 8007c00:	0800a011 	.word	0x0800a011
 8007c04:	0800a046 	.word	0x0800a046
 8007c08:	0800a3f0 	.word	0x0800a3f0
 8007c0c:	0800a158 	.word	0x0800a158
 8007c10:	0800a130 	.word	0x0800a130
 8007c14:	7ff00000 	.word	0x7ff00000
 8007c18:	7ca00000 	.word	0x7ca00000
 8007c1c:	7fefffff 	.word	0x7fefffff
 8007c20:	f015 0310 	ands.w	r3, r5, #16
 8007c24:	bf18      	it	ne
 8007c26:	236a      	movne	r3, #106	; 0x6a
 8007c28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007fcc <_strtod_l+0x94c>
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	4640      	mov	r0, r8
 8007c30:	4649      	mov	r1, r9
 8007c32:	2300      	movs	r3, #0
 8007c34:	07ea      	lsls	r2, r5, #31
 8007c36:	d504      	bpl.n	8007c42 <_strtod_l+0x5c2>
 8007c38:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c3c:	f7f8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8007c40:	2301      	movs	r3, #1
 8007c42:	106d      	asrs	r5, r5, #1
 8007c44:	f10a 0a08 	add.w	sl, sl, #8
 8007c48:	d1f4      	bne.n	8007c34 <_strtod_l+0x5b4>
 8007c4a:	b10b      	cbz	r3, 8007c50 <_strtod_l+0x5d0>
 8007c4c:	4680      	mov	r8, r0
 8007c4e:	4689      	mov	r9, r1
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	b1bb      	cbz	r3, 8007c84 <_strtod_l+0x604>
 8007c54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007c58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	4649      	mov	r1, r9
 8007c60:	dd10      	ble.n	8007c84 <_strtod_l+0x604>
 8007c62:	2b1f      	cmp	r3, #31
 8007c64:	f340 811e 	ble.w	8007ea4 <_strtod_l+0x824>
 8007c68:	2b34      	cmp	r3, #52	; 0x34
 8007c6a:	bfde      	ittt	le
 8007c6c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c74:	4093      	lslle	r3, r2
 8007c76:	f04f 0800 	mov.w	r8, #0
 8007c7a:	bfcc      	ite	gt
 8007c7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007c80:	ea03 0901 	andle.w	r9, r3, r1
 8007c84:	2200      	movs	r2, #0
 8007c86:	2300      	movs	r3, #0
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1a6      	bne.n	8007be2 <_strtod_l+0x562>
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c9a:	4633      	mov	r3, r6
 8007c9c:	465a      	mov	r2, fp
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff f8cc 	bl	8006e3c <__s2b>
 8007ca4:	9009      	str	r0, [sp, #36]	; 0x24
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f43f af2a 	beq.w	8007b00 <_strtod_l+0x480>
 8007cac:	9a08      	ldr	r2, [sp, #32]
 8007cae:	9b05      	ldr	r3, [sp, #20]
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	eba3 0307 	sub.w	r3, r3, r7
 8007cb6:	bfa8      	it	ge
 8007cb8:	2300      	movge	r3, #0
 8007cba:	930c      	str	r3, [sp, #48]	; 0x30
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8007cc4:	46ab      	mov	fp, r5
 8007cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc8:	4620      	mov	r0, r4
 8007cca:	6859      	ldr	r1, [r3, #4]
 8007ccc:	f7ff f80e 	bl	8006cec <_Balloc>
 8007cd0:	9005      	str	r0, [sp, #20]
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f43f af18 	beq.w	8007b08 <_strtod_l+0x488>
 8007cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	3202      	adds	r2, #2
 8007cde:	f103 010c 	add.w	r1, r3, #12
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	300c      	adds	r0, #12
 8007ce6:	f001 fa09 	bl	80090fc <memcpy>
 8007cea:	ec49 8b10 	vmov	d0, r8, r9
 8007cee:	aa18      	add	r2, sp, #96	; 0x60
 8007cf0:	a917      	add	r1, sp, #92	; 0x5c
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff fbd6 	bl	80074a4 <__d2b>
 8007cf8:	ec49 8b18 	vmov	d8, r8, r9
 8007cfc:	9016      	str	r0, [sp, #88]	; 0x58
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f43f af02 	beq.w	8007b08 <_strtod_l+0x488>
 8007d04:	2101      	movs	r1, #1
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7ff f930 	bl	8006f6c <__i2b>
 8007d0c:	4683      	mov	fp, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f43f aefa 	beq.w	8007b08 <_strtod_l+0x488>
 8007d14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	bfab      	itete	ge
 8007d1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007d1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007d20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007d26:	bfac      	ite	ge
 8007d28:	eb06 0a03 	addge.w	sl, r6, r3
 8007d2c:	1b9f      	sublt	r7, r3, r6
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	1af6      	subs	r6, r6, r3
 8007d32:	4416      	add	r6, r2
 8007d34:	4ba0      	ldr	r3, [pc, #640]	; (8007fb8 <_strtod_l+0x938>)
 8007d36:	3e01      	subs	r6, #1
 8007d38:	429e      	cmp	r6, r3
 8007d3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d3e:	f280 80c4 	bge.w	8007eca <_strtod_l+0x84a>
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	2b1f      	cmp	r3, #31
 8007d46:	eba2 0203 	sub.w	r2, r2, r3
 8007d4a:	f04f 0101 	mov.w	r1, #1
 8007d4e:	f300 80b0 	bgt.w	8007eb2 <_strtod_l+0x832>
 8007d52:	fa01 f303 	lsl.w	r3, r1, r3
 8007d56:	930e      	str	r3, [sp, #56]	; 0x38
 8007d58:	2300      	movs	r3, #0
 8007d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d5c:	eb0a 0602 	add.w	r6, sl, r2
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	45b2      	cmp	sl, r6
 8007d64:	4417      	add	r7, r2
 8007d66:	441f      	add	r7, r3
 8007d68:	4653      	mov	r3, sl
 8007d6a:	bfa8      	it	ge
 8007d6c:	4633      	movge	r3, r6
 8007d6e:	42bb      	cmp	r3, r7
 8007d70:	bfa8      	it	ge
 8007d72:	463b      	movge	r3, r7
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfc2      	ittt	gt
 8007d78:	1af6      	subgt	r6, r6, r3
 8007d7a:	1aff      	subgt	r7, r7, r3
 8007d7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dd17      	ble.n	8007db6 <_strtod_l+0x736>
 8007d86:	4659      	mov	r1, fp
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff f9ae 	bl	80070ec <__pow5mult>
 8007d90:	4683      	mov	fp, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aeb8 	beq.w	8007b08 <_strtod_l+0x488>
 8007d98:	4601      	mov	r1, r0
 8007d9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f7ff f8fb 	bl	8006f98 <__multiply>
 8007da2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f43f aeaf 	beq.w	8007b08 <_strtod_l+0x488>
 8007daa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7fe ffdd 	bl	8006d6c <_Bfree>
 8007db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db4:	9316      	str	r3, [sp, #88]	; 0x58
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	f300 808c 	bgt.w	8007ed4 <_strtod_l+0x854>
 8007dbc:	9b08      	ldr	r3, [sp, #32]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd08      	ble.n	8007dd4 <_strtod_l+0x754>
 8007dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc4:	9905      	ldr	r1, [sp, #20]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff f990 	bl	80070ec <__pow5mult>
 8007dcc:	9005      	str	r0, [sp, #20]
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f ae9a 	beq.w	8007b08 <_strtod_l+0x488>
 8007dd4:	2f00      	cmp	r7, #0
 8007dd6:	dd08      	ble.n	8007dea <_strtod_l+0x76a>
 8007dd8:	9905      	ldr	r1, [sp, #20]
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f7ff f9df 	bl	80071a0 <__lshift>
 8007de2:	9005      	str	r0, [sp, #20]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f ae8f 	beq.w	8007b08 <_strtod_l+0x488>
 8007dea:	f1ba 0f00 	cmp.w	sl, #0
 8007dee:	dd08      	ble.n	8007e02 <_strtod_l+0x782>
 8007df0:	4659      	mov	r1, fp
 8007df2:	4652      	mov	r2, sl
 8007df4:	4620      	mov	r0, r4
 8007df6:	f7ff f9d3 	bl	80071a0 <__lshift>
 8007dfa:	4683      	mov	fp, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f43f ae83 	beq.w	8007b08 <_strtod_l+0x488>
 8007e02:	9a05      	ldr	r2, [sp, #20]
 8007e04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7ff fa52 	bl	80072b0 <__mdiff>
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f43f ae7a 	beq.w	8007b08 <_strtod_l+0x488>
 8007e14:	68c3      	ldr	r3, [r0, #12]
 8007e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60c3      	str	r3, [r0, #12]
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	f7ff fa2b 	bl	8007278 <__mcmp>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	da60      	bge.n	8007ee8 <_strtod_l+0x868>
 8007e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e28:	ea53 0308 	orrs.w	r3, r3, r8
 8007e2c:	f040 8084 	bne.w	8007f38 <_strtod_l+0x8b8>
 8007e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d17f      	bne.n	8007f38 <_strtod_l+0x8b8>
 8007e38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e3c:	0d1b      	lsrs	r3, r3, #20
 8007e3e:	051b      	lsls	r3, r3, #20
 8007e40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e44:	d978      	bls.n	8007f38 <_strtod_l+0x8b8>
 8007e46:	696b      	ldr	r3, [r5, #20]
 8007e48:	b913      	cbnz	r3, 8007e50 <_strtod_l+0x7d0>
 8007e4a:	692b      	ldr	r3, [r5, #16]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	dd73      	ble.n	8007f38 <_strtod_l+0x8b8>
 8007e50:	4629      	mov	r1, r5
 8007e52:	2201      	movs	r2, #1
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff f9a3 	bl	80071a0 <__lshift>
 8007e5a:	4659      	mov	r1, fp
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	f7ff fa0b 	bl	8007278 <__mcmp>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	dd68      	ble.n	8007f38 <_strtod_l+0x8b8>
 8007e66:	9904      	ldr	r1, [sp, #16]
 8007e68:	4a54      	ldr	r2, [pc, #336]	; (8007fbc <_strtod_l+0x93c>)
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	f000 8084 	beq.w	8007f7a <_strtod_l+0x8fa>
 8007e72:	ea02 0109 	and.w	r1, r2, r9
 8007e76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e7a:	dc7e      	bgt.n	8007f7a <_strtod_l+0x8fa>
 8007e7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e80:	f77f aeb3 	ble.w	8007bea <_strtod_l+0x56a>
 8007e84:	4b4e      	ldr	r3, [pc, #312]	; (8007fc0 <_strtod_l+0x940>)
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <_strtod_l+0x93c>)
 8007e92:	400b      	ands	r3, r1
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f ae3f 	bne.w	8007b1c <_strtod_l+0x49c>
 8007e9e:	2322      	movs	r3, #34	; 0x22
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	e63b      	b.n	8007b1c <_strtod_l+0x49c>
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	ea03 0808 	and.w	r8, r3, r8
 8007eb0:	e6e8      	b.n	8007c84 <_strtod_l+0x604>
 8007eb2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007eb6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007eba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007ebe:	36e2      	adds	r6, #226	; 0xe2
 8007ec0:	fa01 f306 	lsl.w	r3, r1, r6
 8007ec4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007ec8:	e748      	b.n	8007d5c <_strtod_l+0x6dc>
 8007eca:	2100      	movs	r1, #0
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007ed2:	e743      	b.n	8007d5c <_strtod_l+0x6dc>
 8007ed4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff f961 	bl	80071a0 <__lshift>
 8007ede:	9016      	str	r0, [sp, #88]	; 0x58
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f47f af6b 	bne.w	8007dbc <_strtod_l+0x73c>
 8007ee6:	e60f      	b.n	8007b08 <_strtod_l+0x488>
 8007ee8:	46ca      	mov	sl, r9
 8007eea:	d171      	bne.n	8007fd0 <_strtod_l+0x950>
 8007eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ef2:	b352      	cbz	r2, 8007f4a <_strtod_l+0x8ca>
 8007ef4:	4a33      	ldr	r2, [pc, #204]	; (8007fc4 <_strtod_l+0x944>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d12a      	bne.n	8007f50 <_strtod_l+0x8d0>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	4641      	mov	r1, r8
 8007efe:	b1fb      	cbz	r3, 8007f40 <_strtod_l+0x8c0>
 8007f00:	4b2e      	ldr	r3, [pc, #184]	; (8007fbc <_strtod_l+0x93c>)
 8007f02:	ea09 0303 	and.w	r3, r9, r3
 8007f06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0e:	d81a      	bhi.n	8007f46 <_strtod_l+0x8c6>
 8007f10:	0d1b      	lsrs	r3, r3, #20
 8007f12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	d118      	bne.n	8007f50 <_strtod_l+0x8d0>
 8007f1e:	4b2a      	ldr	r3, [pc, #168]	; (8007fc8 <_strtod_l+0x948>)
 8007f20:	459a      	cmp	sl, r3
 8007f22:	d102      	bne.n	8007f2a <_strtod_l+0x8aa>
 8007f24:	3101      	adds	r1, #1
 8007f26:	f43f adef 	beq.w	8007b08 <_strtod_l+0x488>
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <_strtod_l+0x93c>)
 8007f2c:	ea0a 0303 	and.w	r3, sl, r3
 8007f30:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007f34:	f04f 0800 	mov.w	r8, #0
 8007f38:	9b04      	ldr	r3, [sp, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1a2      	bne.n	8007e84 <_strtod_l+0x804>
 8007f3e:	e5ed      	b.n	8007b1c <_strtod_l+0x49c>
 8007f40:	f04f 33ff 	mov.w	r3, #4294967295
 8007f44:	e7e9      	b.n	8007f1a <_strtod_l+0x89a>
 8007f46:	4613      	mov	r3, r2
 8007f48:	e7e7      	b.n	8007f1a <_strtod_l+0x89a>
 8007f4a:	ea53 0308 	orrs.w	r3, r3, r8
 8007f4e:	d08a      	beq.n	8007e66 <_strtod_l+0x7e6>
 8007f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f52:	b1e3      	cbz	r3, 8007f8e <_strtod_l+0x90e>
 8007f54:	ea13 0f0a 	tst.w	r3, sl
 8007f58:	d0ee      	beq.n	8007f38 <_strtod_l+0x8b8>
 8007f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5c:	9a04      	ldr	r2, [sp, #16]
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	b1c3      	cbz	r3, 8007f96 <_strtod_l+0x916>
 8007f64:	f7ff fb6f 	bl	8007646 <sulp>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	ec51 0b18 	vmov	r0, r1, d8
 8007f70:	f7f8 f98c 	bl	800028c <__adddf3>
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	e7de      	b.n	8007f38 <_strtod_l+0x8b8>
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f88:	f04f 38ff 	mov.w	r8, #4294967295
 8007f8c:	e7d4      	b.n	8007f38 <_strtod_l+0x8b8>
 8007f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f90:	ea13 0f08 	tst.w	r3, r8
 8007f94:	e7e0      	b.n	8007f58 <_strtod_l+0x8d8>
 8007f96:	f7ff fb56 	bl	8007646 <sulp>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	ec51 0b18 	vmov	r0, r1, d8
 8007fa2:	f7f8 f971 	bl	8000288 <__aeabi_dsub>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4680      	mov	r8, r0
 8007fac:	4689      	mov	r9, r1
 8007fae:	f7f8 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0c0      	beq.n	8007f38 <_strtod_l+0x8b8>
 8007fb6:	e618      	b.n	8007bea <_strtod_l+0x56a>
 8007fb8:	fffffc02 	.word	0xfffffc02
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	39500000 	.word	0x39500000
 8007fc4:	000fffff 	.word	0x000fffff
 8007fc8:	7fefffff 	.word	0x7fefffff
 8007fcc:	0800a258 	.word	0x0800a258
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff fac0 	bl	8007558 <__ratio>
 8007fd8:	ec57 6b10 	vmov	r6, r7, d0
 8007fdc:	ee10 0a10 	vmov	r0, s0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd82 	bl	8000af0 <__aeabi_dcmple>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d071      	beq.n	80080d4 <_strtod_l+0xa54>
 8007ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d17c      	bne.n	80080f0 <_strtod_l+0xa70>
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d15a      	bne.n	80080b2 <_strtod_l+0xa32>
 8007ffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008000:	2b00      	cmp	r3, #0
 8008002:	d15d      	bne.n	80080c0 <_strtod_l+0xa40>
 8008004:	4b90      	ldr	r3, [pc, #576]	; (8008248 <_strtod_l+0xbc8>)
 8008006:	2200      	movs	r2, #0
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd66 	bl	8000adc <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d15c      	bne.n	80080ce <_strtod_l+0xa4e>
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	4b8c      	ldr	r3, [pc, #560]	; (800824c <_strtod_l+0xbcc>)
 800801a:	2200      	movs	r2, #0
 800801c:	f7f8 faec 	bl	80005f8 <__aeabi_dmul>
 8008020:	4606      	mov	r6, r0
 8008022:	460f      	mov	r7, r1
 8008024:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008028:	9606      	str	r6, [sp, #24]
 800802a:	9307      	str	r3, [sp, #28]
 800802c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008030:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008034:	4b86      	ldr	r3, [pc, #536]	; (8008250 <_strtod_l+0xbd0>)
 8008036:	ea0a 0303 	and.w	r3, sl, r3
 800803a:	930d      	str	r3, [sp, #52]	; 0x34
 800803c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803e:	4b85      	ldr	r3, [pc, #532]	; (8008254 <_strtod_l+0xbd4>)
 8008040:	429a      	cmp	r2, r3
 8008042:	f040 8090 	bne.w	8008166 <_strtod_l+0xae6>
 8008046:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800804a:	ec49 8b10 	vmov	d0, r8, r9
 800804e:	f7ff f9b9 	bl	80073c4 <__ulp>
 8008052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008056:	ec51 0b10 	vmov	r0, r1, d0
 800805a:	f7f8 facd 	bl	80005f8 <__aeabi_dmul>
 800805e:	4642      	mov	r2, r8
 8008060:	464b      	mov	r3, r9
 8008062:	f7f8 f913 	bl	800028c <__adddf3>
 8008066:	460b      	mov	r3, r1
 8008068:	4979      	ldr	r1, [pc, #484]	; (8008250 <_strtod_l+0xbd0>)
 800806a:	4a7b      	ldr	r2, [pc, #492]	; (8008258 <_strtod_l+0xbd8>)
 800806c:	4019      	ands	r1, r3
 800806e:	4291      	cmp	r1, r2
 8008070:	4680      	mov	r8, r0
 8008072:	d944      	bls.n	80080fe <_strtod_l+0xa7e>
 8008074:	ee18 2a90 	vmov	r2, s17
 8008078:	4b78      	ldr	r3, [pc, #480]	; (800825c <_strtod_l+0xbdc>)
 800807a:	429a      	cmp	r2, r3
 800807c:	d104      	bne.n	8008088 <_strtod_l+0xa08>
 800807e:	ee18 3a10 	vmov	r3, s16
 8008082:	3301      	adds	r3, #1
 8008084:	f43f ad40 	beq.w	8007b08 <_strtod_l+0x488>
 8008088:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800825c <_strtod_l+0xbdc>
 800808c:	f04f 38ff 	mov.w	r8, #4294967295
 8008090:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008092:	4620      	mov	r0, r4
 8008094:	f7fe fe6a 	bl	8006d6c <_Bfree>
 8008098:	9905      	ldr	r1, [sp, #20]
 800809a:	4620      	mov	r0, r4
 800809c:	f7fe fe66 	bl	8006d6c <_Bfree>
 80080a0:	4659      	mov	r1, fp
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7fe fe62 	bl	8006d6c <_Bfree>
 80080a8:	4629      	mov	r1, r5
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7fe fe5e 	bl	8006d6c <_Bfree>
 80080b0:	e609      	b.n	8007cc6 <_strtod_l+0x646>
 80080b2:	f1b8 0f01 	cmp.w	r8, #1
 80080b6:	d103      	bne.n	80080c0 <_strtod_l+0xa40>
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	f43f ad95 	beq.w	8007bea <_strtod_l+0x56a>
 80080c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008218 <_strtod_l+0xb98>
 80080c4:	4f60      	ldr	r7, [pc, #384]	; (8008248 <_strtod_l+0xbc8>)
 80080c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080ca:	2600      	movs	r6, #0
 80080cc:	e7ae      	b.n	800802c <_strtod_l+0x9ac>
 80080ce:	4f5f      	ldr	r7, [pc, #380]	; (800824c <_strtod_l+0xbcc>)
 80080d0:	2600      	movs	r6, #0
 80080d2:	e7a7      	b.n	8008024 <_strtod_l+0x9a4>
 80080d4:	4b5d      	ldr	r3, [pc, #372]	; (800824c <_strtod_l+0xbcc>)
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	2200      	movs	r2, #0
 80080dc:	f7f8 fa8c 	bl	80005f8 <__aeabi_dmul>
 80080e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d09c      	beq.n	8008024 <_strtod_l+0x9a4>
 80080ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080ee:	e79d      	b.n	800802c <_strtod_l+0x9ac>
 80080f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008220 <_strtod_l+0xba0>
 80080f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080f8:	ec57 6b17 	vmov	r6, r7, d7
 80080fc:	e796      	b.n	800802c <_strtod_l+0x9ac>
 80080fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	46ca      	mov	sl, r9
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1c2      	bne.n	8008090 <_strtod_l+0xa10>
 800810a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800810e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008110:	0d1b      	lsrs	r3, r3, #20
 8008112:	051b      	lsls	r3, r3, #20
 8008114:	429a      	cmp	r2, r3
 8008116:	d1bb      	bne.n	8008090 <_strtod_l+0xa10>
 8008118:	4630      	mov	r0, r6
 800811a:	4639      	mov	r1, r7
 800811c:	f7f8 fdcc 	bl	8000cb8 <__aeabi_d2lz>
 8008120:	f7f8 fa3c 	bl	800059c <__aeabi_l2d>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 f8ac 	bl	8000288 <__aeabi_dsub>
 8008130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008132:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008136:	ea43 0308 	orr.w	r3, r3, r8
 800813a:	4313      	orrs	r3, r2
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	d054      	beq.n	80081ec <_strtod_l+0xb6c>
 8008142:	a339      	add	r3, pc, #228	; (adr r3, 8008228 <_strtod_l+0xba8>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	f47f ace5 	bne.w	8007b1c <_strtod_l+0x49c>
 8008152:	a337      	add	r3, pc, #220	; (adr r3, 8008230 <_strtod_l+0xbb0>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d095      	beq.n	8008090 <_strtod_l+0xa10>
 8008164:	e4da      	b.n	8007b1c <_strtod_l+0x49c>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	b333      	cbz	r3, 80081b8 <_strtod_l+0xb38>
 800816a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008170:	d822      	bhi.n	80081b8 <_strtod_l+0xb38>
 8008172:	a331      	add	r3, pc, #196	; (adr r3, 8008238 <_strtod_l+0xbb8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	4630      	mov	r0, r6
 800817a:	4639      	mov	r1, r7
 800817c:	f7f8 fcb8 	bl	8000af0 <__aeabi_dcmple>
 8008180:	b1a0      	cbz	r0, 80081ac <_strtod_l+0xb2c>
 8008182:	4639      	mov	r1, r7
 8008184:	4630      	mov	r0, r6
 8008186:	f7f8 fd0f 	bl	8000ba8 <__aeabi_d2uiz>
 800818a:	2801      	cmp	r0, #1
 800818c:	bf38      	it	cc
 800818e:	2001      	movcc	r0, #1
 8008190:	f7f8 f9b8 	bl	8000504 <__aeabi_ui2d>
 8008194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008196:	4606      	mov	r6, r0
 8008198:	460f      	mov	r7, r1
 800819a:	bb23      	cbnz	r3, 80081e6 <_strtod_l+0xb66>
 800819c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081a0:	9010      	str	r0, [sp, #64]	; 0x40
 80081a2:	9311      	str	r3, [sp, #68]	; 0x44
 80081a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80081ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081bc:	eeb0 0a48 	vmov.f32	s0, s16
 80081c0:	eef0 0a68 	vmov.f32	s1, s17
 80081c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80081c8:	f7ff f8fc 	bl	80073c4 <__ulp>
 80081cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081d0:	ec53 2b10 	vmov	r2, r3, d0
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	ec53 2b18 	vmov	r2, r3, d8
 80081dc:	f7f8 f856 	bl	800028c <__adddf3>
 80081e0:	4680      	mov	r8, r0
 80081e2:	4689      	mov	r9, r1
 80081e4:	e78d      	b.n	8008102 <_strtod_l+0xa82>
 80081e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80081ea:	e7db      	b.n	80081a4 <_strtod_l+0xb24>
 80081ec:	a314      	add	r3, pc, #80	; (adr r3, 8008240 <_strtod_l+0xbc0>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 fc73 	bl	8000adc <__aeabi_dcmplt>
 80081f6:	e7b3      	b.n	8008160 <_strtod_l+0xae0>
 80081f8:	2300      	movs	r3, #0
 80081fa:	930a      	str	r3, [sp, #40]	; 0x28
 80081fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	f7ff ba7c 	b.w	80076fe <_strtod_l+0x7e>
 8008206:	2a65      	cmp	r2, #101	; 0x65
 8008208:	f43f ab75 	beq.w	80078f6 <_strtod_l+0x276>
 800820c:	2a45      	cmp	r2, #69	; 0x45
 800820e:	f43f ab72 	beq.w	80078f6 <_strtod_l+0x276>
 8008212:	2301      	movs	r3, #1
 8008214:	f7ff bbaa 	b.w	800796c <_strtod_l+0x2ec>
 8008218:	00000000 	.word	0x00000000
 800821c:	bff00000 	.word	0xbff00000
 8008220:	00000000 	.word	0x00000000
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	94a03595 	.word	0x94a03595
 800822c:	3fdfffff 	.word	0x3fdfffff
 8008230:	35afe535 	.word	0x35afe535
 8008234:	3fe00000 	.word	0x3fe00000
 8008238:	ffc00000 	.word	0xffc00000
 800823c:	41dfffff 	.word	0x41dfffff
 8008240:	94a03595 	.word	0x94a03595
 8008244:	3fcfffff 	.word	0x3fcfffff
 8008248:	3ff00000 	.word	0x3ff00000
 800824c:	3fe00000 	.word	0x3fe00000
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	7fe00000 	.word	0x7fe00000
 8008258:	7c9fffff 	.word	0x7c9fffff
 800825c:	7fefffff 	.word	0x7fefffff

08008260 <_strtod_r>:
 8008260:	4b01      	ldr	r3, [pc, #4]	; (8008268 <_strtod_r+0x8>)
 8008262:	f7ff ba0d 	b.w	8007680 <_strtod_l>
 8008266:	bf00      	nop
 8008268:	20000068 	.word	0x20000068

0800826c <_strtol_l.constprop.0>:
 800826c:	2b01      	cmp	r3, #1
 800826e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008272:	d001      	beq.n	8008278 <_strtol_l.constprop.0+0xc>
 8008274:	2b24      	cmp	r3, #36	; 0x24
 8008276:	d906      	bls.n	8008286 <_strtol_l.constprop.0+0x1a>
 8008278:	f7fd fd80 	bl	8005d7c <__errno>
 800827c:	2316      	movs	r3, #22
 800827e:	6003      	str	r3, [r0, #0]
 8008280:	2000      	movs	r0, #0
 8008282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008286:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800836c <_strtol_l.constprop.0+0x100>
 800828a:	460d      	mov	r5, r1
 800828c:	462e      	mov	r6, r5
 800828e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008292:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008296:	f017 0708 	ands.w	r7, r7, #8
 800829a:	d1f7      	bne.n	800828c <_strtol_l.constprop.0+0x20>
 800829c:	2c2d      	cmp	r4, #45	; 0x2d
 800829e:	d132      	bne.n	8008306 <_strtol_l.constprop.0+0x9a>
 80082a0:	782c      	ldrb	r4, [r5, #0]
 80082a2:	2701      	movs	r7, #1
 80082a4:	1cb5      	adds	r5, r6, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d05b      	beq.n	8008362 <_strtol_l.constprop.0+0xf6>
 80082aa:	2b10      	cmp	r3, #16
 80082ac:	d109      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 80082ae:	2c30      	cmp	r4, #48	; 0x30
 80082b0:	d107      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 80082b2:	782c      	ldrb	r4, [r5, #0]
 80082b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082b8:	2c58      	cmp	r4, #88	; 0x58
 80082ba:	d14d      	bne.n	8008358 <_strtol_l.constprop.0+0xec>
 80082bc:	786c      	ldrb	r4, [r5, #1]
 80082be:	2310      	movs	r3, #16
 80082c0:	3502      	adds	r5, #2
 80082c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ca:	f04f 0e00 	mov.w	lr, #0
 80082ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80082d2:	4676      	mov	r6, lr
 80082d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80082d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80082dc:	f1bc 0f09 	cmp.w	ip, #9
 80082e0:	d816      	bhi.n	8008310 <_strtol_l.constprop.0+0xa4>
 80082e2:	4664      	mov	r4, ip
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	dd24      	ble.n	8008332 <_strtol_l.constprop.0+0xc6>
 80082e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80082ec:	d008      	beq.n	8008300 <_strtol_l.constprop.0+0x94>
 80082ee:	45b1      	cmp	r9, r6
 80082f0:	d31c      	bcc.n	800832c <_strtol_l.constprop.0+0xc0>
 80082f2:	d101      	bne.n	80082f8 <_strtol_l.constprop.0+0x8c>
 80082f4:	45a2      	cmp	sl, r4
 80082f6:	db19      	blt.n	800832c <_strtol_l.constprop.0+0xc0>
 80082f8:	fb06 4603 	mla	r6, r6, r3, r4
 80082fc:	f04f 0e01 	mov.w	lr, #1
 8008300:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008304:	e7e8      	b.n	80082d8 <_strtol_l.constprop.0+0x6c>
 8008306:	2c2b      	cmp	r4, #43	; 0x2b
 8008308:	bf04      	itt	eq
 800830a:	782c      	ldrbeq	r4, [r5, #0]
 800830c:	1cb5      	addeq	r5, r6, #2
 800830e:	e7ca      	b.n	80082a6 <_strtol_l.constprop.0+0x3a>
 8008310:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008314:	f1bc 0f19 	cmp.w	ip, #25
 8008318:	d801      	bhi.n	800831e <_strtol_l.constprop.0+0xb2>
 800831a:	3c37      	subs	r4, #55	; 0x37
 800831c:	e7e2      	b.n	80082e4 <_strtol_l.constprop.0+0x78>
 800831e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008322:	f1bc 0f19 	cmp.w	ip, #25
 8008326:	d804      	bhi.n	8008332 <_strtol_l.constprop.0+0xc6>
 8008328:	3c57      	subs	r4, #87	; 0x57
 800832a:	e7db      	b.n	80082e4 <_strtol_l.constprop.0+0x78>
 800832c:	f04f 3eff 	mov.w	lr, #4294967295
 8008330:	e7e6      	b.n	8008300 <_strtol_l.constprop.0+0x94>
 8008332:	f1be 3fff 	cmp.w	lr, #4294967295
 8008336:	d105      	bne.n	8008344 <_strtol_l.constprop.0+0xd8>
 8008338:	2322      	movs	r3, #34	; 0x22
 800833a:	6003      	str	r3, [r0, #0]
 800833c:	4646      	mov	r6, r8
 800833e:	b942      	cbnz	r2, 8008352 <_strtol_l.constprop.0+0xe6>
 8008340:	4630      	mov	r0, r6
 8008342:	e79e      	b.n	8008282 <_strtol_l.constprop.0+0x16>
 8008344:	b107      	cbz	r7, 8008348 <_strtol_l.constprop.0+0xdc>
 8008346:	4276      	negs	r6, r6
 8008348:	2a00      	cmp	r2, #0
 800834a:	d0f9      	beq.n	8008340 <_strtol_l.constprop.0+0xd4>
 800834c:	f1be 0f00 	cmp.w	lr, #0
 8008350:	d000      	beq.n	8008354 <_strtol_l.constprop.0+0xe8>
 8008352:	1e69      	subs	r1, r5, #1
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	e7f3      	b.n	8008340 <_strtol_l.constprop.0+0xd4>
 8008358:	2430      	movs	r4, #48	; 0x30
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1b1      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 800835e:	2308      	movs	r3, #8
 8008360:	e7af      	b.n	80082c2 <_strtol_l.constprop.0+0x56>
 8008362:	2c30      	cmp	r4, #48	; 0x30
 8008364:	d0a5      	beq.n	80082b2 <_strtol_l.constprop.0+0x46>
 8008366:	230a      	movs	r3, #10
 8008368:	e7ab      	b.n	80082c2 <_strtol_l.constprop.0+0x56>
 800836a:	bf00      	nop
 800836c:	0800a281 	.word	0x0800a281

08008370 <_strtol_r>:
 8008370:	f7ff bf7c 	b.w	800826c <_strtol_l.constprop.0>

08008374 <__ssputs_r>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	688e      	ldr	r6, [r1, #8]
 800837a:	461f      	mov	r7, r3
 800837c:	42be      	cmp	r6, r7
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	4682      	mov	sl, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4690      	mov	r8, r2
 8008386:	d82c      	bhi.n	80083e2 <__ssputs_r+0x6e>
 8008388:	898a      	ldrh	r2, [r1, #12]
 800838a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800838e:	d026      	beq.n	80083de <__ssputs_r+0x6a>
 8008390:	6965      	ldr	r5, [r4, #20]
 8008392:	6909      	ldr	r1, [r1, #16]
 8008394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008398:	eba3 0901 	sub.w	r9, r3, r1
 800839c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083a0:	1c7b      	adds	r3, r7, #1
 80083a2:	444b      	add	r3, r9
 80083a4:	106d      	asrs	r5, r5, #1
 80083a6:	429d      	cmp	r5, r3
 80083a8:	bf38      	it	cc
 80083aa:	461d      	movcc	r5, r3
 80083ac:	0553      	lsls	r3, r2, #21
 80083ae:	d527      	bpl.n	8008400 <__ssputs_r+0x8c>
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7fe fc0f 	bl	8006bd4 <_malloc_r>
 80083b6:	4606      	mov	r6, r0
 80083b8:	b360      	cbz	r0, 8008414 <__ssputs_r+0xa0>
 80083ba:	6921      	ldr	r1, [r4, #16]
 80083bc:	464a      	mov	r2, r9
 80083be:	f000 fe9d 	bl	80090fc <memcpy>
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	6126      	str	r6, [r4, #16]
 80083d0:	6165      	str	r5, [r4, #20]
 80083d2:	444e      	add	r6, r9
 80083d4:	eba5 0509 	sub.w	r5, r5, r9
 80083d8:	6026      	str	r6, [r4, #0]
 80083da:	60a5      	str	r5, [r4, #8]
 80083dc:	463e      	mov	r6, r7
 80083de:	42be      	cmp	r6, r7
 80083e0:	d900      	bls.n	80083e4 <__ssputs_r+0x70>
 80083e2:	463e      	mov	r6, r7
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	4632      	mov	r2, r6
 80083e8:	4641      	mov	r1, r8
 80083ea:	f000 fe4a 	bl	8009082 <memmove>
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	1b9b      	subs	r3, r3, r6
 80083f2:	60a3      	str	r3, [r4, #8]
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	4433      	add	r3, r6
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	2000      	movs	r0, #0
 80083fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008400:	462a      	mov	r2, r5
 8008402:	f001 fa2e 	bl	8009862 <_realloc_r>
 8008406:	4606      	mov	r6, r0
 8008408:	2800      	cmp	r0, #0
 800840a:	d1e0      	bne.n	80083ce <__ssputs_r+0x5a>
 800840c:	6921      	ldr	r1, [r4, #16]
 800840e:	4650      	mov	r0, sl
 8008410:	f7fe fb6c 	bl	8006aec <_free_r>
 8008414:	230c      	movs	r3, #12
 8008416:	f8ca 3000 	str.w	r3, [sl]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	e7e9      	b.n	80083fc <__ssputs_r+0x88>

08008428 <_svfiprintf_r>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	4698      	mov	r8, r3
 800842e:	898b      	ldrh	r3, [r1, #12]
 8008430:	061b      	lsls	r3, r3, #24
 8008432:	b09d      	sub	sp, #116	; 0x74
 8008434:	4607      	mov	r7, r0
 8008436:	460d      	mov	r5, r1
 8008438:	4614      	mov	r4, r2
 800843a:	d50e      	bpl.n	800845a <_svfiprintf_r+0x32>
 800843c:	690b      	ldr	r3, [r1, #16]
 800843e:	b963      	cbnz	r3, 800845a <_svfiprintf_r+0x32>
 8008440:	2140      	movs	r1, #64	; 0x40
 8008442:	f7fe fbc7 	bl	8006bd4 <_malloc_r>
 8008446:	6028      	str	r0, [r5, #0]
 8008448:	6128      	str	r0, [r5, #16]
 800844a:	b920      	cbnz	r0, 8008456 <_svfiprintf_r+0x2e>
 800844c:	230c      	movs	r3, #12
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	e0d0      	b.n	80085f8 <_svfiprintf_r+0x1d0>
 8008456:	2340      	movs	r3, #64	; 0x40
 8008458:	616b      	str	r3, [r5, #20]
 800845a:	2300      	movs	r3, #0
 800845c:	9309      	str	r3, [sp, #36]	; 0x24
 800845e:	2320      	movs	r3, #32
 8008460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008464:	f8cd 800c 	str.w	r8, [sp, #12]
 8008468:	2330      	movs	r3, #48	; 0x30
 800846a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008610 <_svfiprintf_r+0x1e8>
 800846e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008472:	f04f 0901 	mov.w	r9, #1
 8008476:	4623      	mov	r3, r4
 8008478:	469a      	mov	sl, r3
 800847a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847e:	b10a      	cbz	r2, 8008484 <_svfiprintf_r+0x5c>
 8008480:	2a25      	cmp	r2, #37	; 0x25
 8008482:	d1f9      	bne.n	8008478 <_svfiprintf_r+0x50>
 8008484:	ebba 0b04 	subs.w	fp, sl, r4
 8008488:	d00b      	beq.n	80084a2 <_svfiprintf_r+0x7a>
 800848a:	465b      	mov	r3, fp
 800848c:	4622      	mov	r2, r4
 800848e:	4629      	mov	r1, r5
 8008490:	4638      	mov	r0, r7
 8008492:	f7ff ff6f 	bl	8008374 <__ssputs_r>
 8008496:	3001      	adds	r0, #1
 8008498:	f000 80a9 	beq.w	80085ee <_svfiprintf_r+0x1c6>
 800849c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849e:	445a      	add	r2, fp
 80084a0:	9209      	str	r2, [sp, #36]	; 0x24
 80084a2:	f89a 3000 	ldrb.w	r3, [sl]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 80a1 	beq.w	80085ee <_svfiprintf_r+0x1c6>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b6:	f10a 0a01 	add.w	sl, sl, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	9307      	str	r3, [sp, #28]
 80084be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084c2:	931a      	str	r3, [sp, #104]	; 0x68
 80084c4:	4654      	mov	r4, sl
 80084c6:	2205      	movs	r2, #5
 80084c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084cc:	4850      	ldr	r0, [pc, #320]	; (8008610 <_svfiprintf_r+0x1e8>)
 80084ce:	f7f7 fe7f 	bl	80001d0 <memchr>
 80084d2:	9a04      	ldr	r2, [sp, #16]
 80084d4:	b9d8      	cbnz	r0, 800850e <_svfiprintf_r+0xe6>
 80084d6:	06d0      	lsls	r0, r2, #27
 80084d8:	bf44      	itt	mi
 80084da:	2320      	movmi	r3, #32
 80084dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e0:	0711      	lsls	r1, r2, #28
 80084e2:	bf44      	itt	mi
 80084e4:	232b      	movmi	r3, #43	; 0x2b
 80084e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ea:	f89a 3000 	ldrb.w	r3, [sl]
 80084ee:	2b2a      	cmp	r3, #42	; 0x2a
 80084f0:	d015      	beq.n	800851e <_svfiprintf_r+0xf6>
 80084f2:	9a07      	ldr	r2, [sp, #28]
 80084f4:	4654      	mov	r4, sl
 80084f6:	2000      	movs	r0, #0
 80084f8:	f04f 0c0a 	mov.w	ip, #10
 80084fc:	4621      	mov	r1, r4
 80084fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008502:	3b30      	subs	r3, #48	; 0x30
 8008504:	2b09      	cmp	r3, #9
 8008506:	d94d      	bls.n	80085a4 <_svfiprintf_r+0x17c>
 8008508:	b1b0      	cbz	r0, 8008538 <_svfiprintf_r+0x110>
 800850a:	9207      	str	r2, [sp, #28]
 800850c:	e014      	b.n	8008538 <_svfiprintf_r+0x110>
 800850e:	eba0 0308 	sub.w	r3, r0, r8
 8008512:	fa09 f303 	lsl.w	r3, r9, r3
 8008516:	4313      	orrs	r3, r2
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	46a2      	mov	sl, r4
 800851c:	e7d2      	b.n	80084c4 <_svfiprintf_r+0x9c>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	1d19      	adds	r1, r3, #4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	9103      	str	r1, [sp, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	bfbb      	ittet	lt
 800852a:	425b      	neglt	r3, r3
 800852c:	f042 0202 	orrlt.w	r2, r2, #2
 8008530:	9307      	strge	r3, [sp, #28]
 8008532:	9307      	strlt	r3, [sp, #28]
 8008534:	bfb8      	it	lt
 8008536:	9204      	strlt	r2, [sp, #16]
 8008538:	7823      	ldrb	r3, [r4, #0]
 800853a:	2b2e      	cmp	r3, #46	; 0x2e
 800853c:	d10c      	bne.n	8008558 <_svfiprintf_r+0x130>
 800853e:	7863      	ldrb	r3, [r4, #1]
 8008540:	2b2a      	cmp	r3, #42	; 0x2a
 8008542:	d134      	bne.n	80085ae <_svfiprintf_r+0x186>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	9203      	str	r2, [sp, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfb8      	it	lt
 8008550:	f04f 33ff 	movlt.w	r3, #4294967295
 8008554:	3402      	adds	r4, #2
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008620 <_svfiprintf_r+0x1f8>
 800855c:	7821      	ldrb	r1, [r4, #0]
 800855e:	2203      	movs	r2, #3
 8008560:	4650      	mov	r0, sl
 8008562:	f7f7 fe35 	bl	80001d0 <memchr>
 8008566:	b138      	cbz	r0, 8008578 <_svfiprintf_r+0x150>
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	eba0 000a 	sub.w	r0, r0, sl
 800856e:	2240      	movs	r2, #64	; 0x40
 8008570:	4082      	lsls	r2, r0
 8008572:	4313      	orrs	r3, r2
 8008574:	3401      	adds	r4, #1
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	4825      	ldr	r0, [pc, #148]	; (8008614 <_svfiprintf_r+0x1ec>)
 800857e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008582:	2206      	movs	r2, #6
 8008584:	f7f7 fe24 	bl	80001d0 <memchr>
 8008588:	2800      	cmp	r0, #0
 800858a:	d038      	beq.n	80085fe <_svfiprintf_r+0x1d6>
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <_svfiprintf_r+0x1f0>)
 800858e:	bb1b      	cbnz	r3, 80085d8 <_svfiprintf_r+0x1b0>
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	3307      	adds	r3, #7
 8008594:	f023 0307 	bic.w	r3, r3, #7
 8008598:	3308      	adds	r3, #8
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859e:	4433      	add	r3, r6
 80085a0:	9309      	str	r3, [sp, #36]	; 0x24
 80085a2:	e768      	b.n	8008476 <_svfiprintf_r+0x4e>
 80085a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a8:	460c      	mov	r4, r1
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7a6      	b.n	80084fc <_svfiprintf_r+0xd4>
 80085ae:	2300      	movs	r3, #0
 80085b0:	3401      	adds	r4, #1
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f04f 0c0a 	mov.w	ip, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c0:	3a30      	subs	r2, #48	; 0x30
 80085c2:	2a09      	cmp	r2, #9
 80085c4:	d903      	bls.n	80085ce <_svfiprintf_r+0x1a6>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0c6      	beq.n	8008558 <_svfiprintf_r+0x130>
 80085ca:	9105      	str	r1, [sp, #20]
 80085cc:	e7c4      	b.n	8008558 <_svfiprintf_r+0x130>
 80085ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d2:	4604      	mov	r4, r0
 80085d4:	2301      	movs	r3, #1
 80085d6:	e7f0      	b.n	80085ba <_svfiprintf_r+0x192>
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	462a      	mov	r2, r5
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <_svfiprintf_r+0x1f4>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4638      	mov	r0, r7
 80085e4:	f7fc fc20 	bl	8004e28 <_printf_float>
 80085e8:	1c42      	adds	r2, r0, #1
 80085ea:	4606      	mov	r6, r0
 80085ec:	d1d6      	bne.n	800859c <_svfiprintf_r+0x174>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	065b      	lsls	r3, r3, #25
 80085f2:	f53f af2d 	bmi.w	8008450 <_svfiprintf_r+0x28>
 80085f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f8:	b01d      	add	sp, #116	; 0x74
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	462a      	mov	r2, r5
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <_svfiprintf_r+0x1f4>)
 8008606:	a904      	add	r1, sp, #16
 8008608:	4638      	mov	r0, r7
 800860a:	f7fc feb1 	bl	8005370 <_printf_i>
 800860e:	e7eb      	b.n	80085e8 <_svfiprintf_r+0x1c0>
 8008610:	0800a381 	.word	0x0800a381
 8008614:	0800a38b 	.word	0x0800a38b
 8008618:	08004e29 	.word	0x08004e29
 800861c:	08008375 	.word	0x08008375
 8008620:	0800a387 	.word	0x0800a387

08008624 <__svfiscanf_r>:
 8008624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	461d      	mov	r5, r3
 800862a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800862c:	07df      	lsls	r7, r3, #31
 800862e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008632:	4606      	mov	r6, r0
 8008634:	460c      	mov	r4, r1
 8008636:	4692      	mov	sl, r2
 8008638:	d405      	bmi.n	8008646 <__svfiscanf_r+0x22>
 800863a:	898b      	ldrh	r3, [r1, #12]
 800863c:	0598      	lsls	r0, r3, #22
 800863e:	d402      	bmi.n	8008646 <__svfiscanf_r+0x22>
 8008640:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008642:	f7fd fbc6 	bl	8005dd2 <__retarget_lock_acquire_recursive>
 8008646:	2300      	movs	r3, #0
 8008648:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800864c:	4baa      	ldr	r3, [pc, #680]	; (80088f8 <__svfiscanf_r+0x2d4>)
 800864e:	93a0      	str	r3, [sp, #640]	; 0x280
 8008650:	f10d 0804 	add.w	r8, sp, #4
 8008654:	4ba9      	ldr	r3, [pc, #676]	; (80088fc <__svfiscanf_r+0x2d8>)
 8008656:	4faa      	ldr	r7, [pc, #680]	; (8008900 <__svfiscanf_r+0x2dc>)
 8008658:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8008904 <__svfiscanf_r+0x2e0>
 800865c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008660:	93a1      	str	r3, [sp, #644]	; 0x284
 8008662:	9500      	str	r5, [sp, #0]
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8170 	beq.w	800894e <__svfiscanf_r+0x32a>
 800866e:	5cf9      	ldrb	r1, [r7, r3]
 8008670:	f011 0108 	ands.w	r1, r1, #8
 8008674:	f10a 0501 	add.w	r5, sl, #1
 8008678:	d019      	beq.n	80086ae <__svfiscanf_r+0x8a>
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd0f      	ble.n	80086a0 <__svfiscanf_r+0x7c>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	5cba      	ldrb	r2, [r7, r2]
 8008686:	0711      	lsls	r1, r2, #28
 8008688:	d401      	bmi.n	800868e <__svfiscanf_r+0x6a>
 800868a:	46aa      	mov	sl, r5
 800868c:	e7ea      	b.n	8008664 <__svfiscanf_r+0x40>
 800868e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008690:	3201      	adds	r2, #1
 8008692:	9245      	str	r2, [sp, #276]	; 0x114
 8008694:	6862      	ldr	r2, [r4, #4]
 8008696:	3301      	adds	r3, #1
 8008698:	3a01      	subs	r2, #1
 800869a:	6062      	str	r2, [r4, #4]
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	e7ec      	b.n	800867a <__svfiscanf_r+0x56>
 80086a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80086a2:	4621      	mov	r1, r4
 80086a4:	4630      	mov	r0, r6
 80086a6:	4798      	blx	r3
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d0e9      	beq.n	8008680 <__svfiscanf_r+0x5c>
 80086ac:	e7ed      	b.n	800868a <__svfiscanf_r+0x66>
 80086ae:	2b25      	cmp	r3, #37	; 0x25
 80086b0:	d012      	beq.n	80086d8 <__svfiscanf_r+0xb4>
 80086b2:	469a      	mov	sl, r3
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f340 8093 	ble.w	80087e2 <__svfiscanf_r+0x1be>
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	7813      	ldrb	r3, [r2, #0]
 80086c0:	4553      	cmp	r3, sl
 80086c2:	f040 8144 	bne.w	800894e <__svfiscanf_r+0x32a>
 80086c6:	6863      	ldr	r3, [r4, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	6063      	str	r3, [r4, #4]
 80086cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80086ce:	3201      	adds	r2, #1
 80086d0:	3301      	adds	r3, #1
 80086d2:	6022      	str	r2, [r4, #0]
 80086d4:	9345      	str	r3, [sp, #276]	; 0x114
 80086d6:	e7d8      	b.n	800868a <__svfiscanf_r+0x66>
 80086d8:	9141      	str	r1, [sp, #260]	; 0x104
 80086da:	9143      	str	r1, [sp, #268]	; 0x10c
 80086dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80086e0:	2b2a      	cmp	r3, #42	; 0x2a
 80086e2:	bf02      	ittt	eq
 80086e4:	2310      	moveq	r3, #16
 80086e6:	9341      	streq	r3, [sp, #260]	; 0x104
 80086e8:	f10a 0502 	addeq.w	r5, sl, #2
 80086ec:	220a      	movs	r2, #10
 80086ee:	46aa      	mov	sl, r5
 80086f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80086f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	d91d      	bls.n	8008738 <__svfiscanf_r+0x114>
 80086fc:	4881      	ldr	r0, [pc, #516]	; (8008904 <__svfiscanf_r+0x2e0>)
 80086fe:	2203      	movs	r2, #3
 8008700:	f7f7 fd66 	bl	80001d0 <memchr>
 8008704:	b138      	cbz	r0, 8008716 <__svfiscanf_r+0xf2>
 8008706:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008708:	eba0 0009 	sub.w	r0, r0, r9
 800870c:	2301      	movs	r3, #1
 800870e:	4083      	lsls	r3, r0
 8008710:	4313      	orrs	r3, r2
 8008712:	9341      	str	r3, [sp, #260]	; 0x104
 8008714:	4655      	mov	r5, sl
 8008716:	f815 3b01 	ldrb.w	r3, [r5], #1
 800871a:	2b78      	cmp	r3, #120	; 0x78
 800871c:	d807      	bhi.n	800872e <__svfiscanf_r+0x10a>
 800871e:	2b57      	cmp	r3, #87	; 0x57
 8008720:	d811      	bhi.n	8008746 <__svfiscanf_r+0x122>
 8008722:	2b25      	cmp	r3, #37	; 0x25
 8008724:	d0c5      	beq.n	80086b2 <__svfiscanf_r+0x8e>
 8008726:	d857      	bhi.n	80087d8 <__svfiscanf_r+0x1b4>
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80c6 	beq.w	80088ba <__svfiscanf_r+0x296>
 800872e:	2303      	movs	r3, #3
 8008730:	9347      	str	r3, [sp, #284]	; 0x11c
 8008732:	230a      	movs	r3, #10
 8008734:	9342      	str	r3, [sp, #264]	; 0x108
 8008736:	e07f      	b.n	8008838 <__svfiscanf_r+0x214>
 8008738:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800873a:	fb02 1103 	mla	r1, r2, r3, r1
 800873e:	3930      	subs	r1, #48	; 0x30
 8008740:	9143      	str	r1, [sp, #268]	; 0x10c
 8008742:	4655      	mov	r5, sl
 8008744:	e7d3      	b.n	80086ee <__svfiscanf_r+0xca>
 8008746:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800874a:	2a20      	cmp	r2, #32
 800874c:	d8ef      	bhi.n	800872e <__svfiscanf_r+0x10a>
 800874e:	a101      	add	r1, pc, #4	; (adr r1, 8008754 <__svfiscanf_r+0x130>)
 8008750:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008754:	0800881b 	.word	0x0800881b
 8008758:	0800872f 	.word	0x0800872f
 800875c:	0800872f 	.word	0x0800872f
 8008760:	08008879 	.word	0x08008879
 8008764:	0800872f 	.word	0x0800872f
 8008768:	0800872f 	.word	0x0800872f
 800876c:	0800872f 	.word	0x0800872f
 8008770:	0800872f 	.word	0x0800872f
 8008774:	0800872f 	.word	0x0800872f
 8008778:	0800872f 	.word	0x0800872f
 800877c:	0800872f 	.word	0x0800872f
 8008780:	0800888f 	.word	0x0800888f
 8008784:	08008875 	.word	0x08008875
 8008788:	080087df 	.word	0x080087df
 800878c:	080087df 	.word	0x080087df
 8008790:	080087df 	.word	0x080087df
 8008794:	0800872f 	.word	0x0800872f
 8008798:	08008831 	.word	0x08008831
 800879c:	0800872f 	.word	0x0800872f
 80087a0:	0800872f 	.word	0x0800872f
 80087a4:	0800872f 	.word	0x0800872f
 80087a8:	0800872f 	.word	0x0800872f
 80087ac:	0800889f 	.word	0x0800889f
 80087b0:	0800886d 	.word	0x0800886d
 80087b4:	08008813 	.word	0x08008813
 80087b8:	0800872f 	.word	0x0800872f
 80087bc:	0800872f 	.word	0x0800872f
 80087c0:	0800889b 	.word	0x0800889b
 80087c4:	0800872f 	.word	0x0800872f
 80087c8:	08008875 	.word	0x08008875
 80087cc:	0800872f 	.word	0x0800872f
 80087d0:	0800872f 	.word	0x0800872f
 80087d4:	0800881b 	.word	0x0800881b
 80087d8:	3b45      	subs	r3, #69	; 0x45
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d8a7      	bhi.n	800872e <__svfiscanf_r+0x10a>
 80087de:	2305      	movs	r3, #5
 80087e0:	e029      	b.n	8008836 <__svfiscanf_r+0x212>
 80087e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087e4:	4621      	mov	r1, r4
 80087e6:	4630      	mov	r0, r6
 80087e8:	4798      	blx	r3
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f43f af66 	beq.w	80086bc <__svfiscanf_r+0x98>
 80087f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	f140 80a3 	bpl.w	800893e <__svfiscanf_r+0x31a>
 80087f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d066      	beq.n	80088cc <__svfiscanf_r+0x2a8>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008804:	bf18      	it	ne
 8008806:	f04f 30ff 	movne.w	r0, #4294967295
 800880a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800880e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008812:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008814:	f042 0220 	orr.w	r2, r2, #32
 8008818:	9241      	str	r2, [sp, #260]	; 0x104
 800881a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800881c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008820:	9241      	str	r2, [sp, #260]	; 0x104
 8008822:	2210      	movs	r2, #16
 8008824:	2b6f      	cmp	r3, #111	; 0x6f
 8008826:	9242      	str	r2, [sp, #264]	; 0x108
 8008828:	bf34      	ite	cc
 800882a:	2303      	movcc	r3, #3
 800882c:	2304      	movcs	r3, #4
 800882e:	e002      	b.n	8008836 <__svfiscanf_r+0x212>
 8008830:	2300      	movs	r3, #0
 8008832:	9342      	str	r3, [sp, #264]	; 0x108
 8008834:	2303      	movs	r3, #3
 8008836:	9347      	str	r3, [sp, #284]	; 0x11c
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	dd49      	ble.n	80088d2 <__svfiscanf_r+0x2ae>
 800883e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008840:	065b      	lsls	r3, r3, #25
 8008842:	d404      	bmi.n	800884e <__svfiscanf_r+0x22a>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	5cba      	ldrb	r2, [r7, r2]
 800884a:	0710      	lsls	r0, r2, #28
 800884c:	d448      	bmi.n	80088e0 <__svfiscanf_r+0x2bc>
 800884e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008850:	2b02      	cmp	r3, #2
 8008852:	dc60      	bgt.n	8008916 <__svfiscanf_r+0x2f2>
 8008854:	466b      	mov	r3, sp
 8008856:	4622      	mov	r2, r4
 8008858:	a941      	add	r1, sp, #260	; 0x104
 800885a:	4630      	mov	r0, r6
 800885c:	f000 f898 	bl	8008990 <_scanf_chars>
 8008860:	2801      	cmp	r0, #1
 8008862:	d074      	beq.n	800894e <__svfiscanf_r+0x32a>
 8008864:	2802      	cmp	r0, #2
 8008866:	f47f af10 	bne.w	800868a <__svfiscanf_r+0x66>
 800886a:	e7c1      	b.n	80087f0 <__svfiscanf_r+0x1cc>
 800886c:	2308      	movs	r3, #8
 800886e:	9342      	str	r3, [sp, #264]	; 0x108
 8008870:	2304      	movs	r3, #4
 8008872:	e7e0      	b.n	8008836 <__svfiscanf_r+0x212>
 8008874:	220a      	movs	r2, #10
 8008876:	e7d5      	b.n	8008824 <__svfiscanf_r+0x200>
 8008878:	4629      	mov	r1, r5
 800887a:	4640      	mov	r0, r8
 800887c:	f000 fb0a 	bl	8008e94 <__sccl>
 8008880:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008886:	9341      	str	r3, [sp, #260]	; 0x104
 8008888:	4605      	mov	r5, r0
 800888a:	2301      	movs	r3, #1
 800888c:	e7d3      	b.n	8008836 <__svfiscanf_r+0x212>
 800888e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	9341      	str	r3, [sp, #260]	; 0x104
 8008896:	2300      	movs	r3, #0
 8008898:	e7cd      	b.n	8008836 <__svfiscanf_r+0x212>
 800889a:	2302      	movs	r3, #2
 800889c:	e7cb      	b.n	8008836 <__svfiscanf_r+0x212>
 800889e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80088a0:	06c3      	lsls	r3, r0, #27
 80088a2:	f53f aef2 	bmi.w	800868a <__svfiscanf_r+0x66>
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	9100      	str	r1, [sp, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	07c0      	lsls	r0, r0, #31
 80088b2:	bf4c      	ite	mi
 80088b4:	801a      	strhmi	r2, [r3, #0]
 80088b6:	601a      	strpl	r2, [r3, #0]
 80088b8:	e6e7      	b.n	800868a <__svfiscanf_r+0x66>
 80088ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088bc:	07d8      	lsls	r0, r3, #31
 80088be:	d405      	bmi.n	80088cc <__svfiscanf_r+0x2a8>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	0599      	lsls	r1, r3, #22
 80088c4:	d402      	bmi.n	80088cc <__svfiscanf_r+0x2a8>
 80088c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c8:	f7fd fa84 	bl	8005dd4 <__retarget_lock_release_recursive>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e79b      	b.n	800880a <__svfiscanf_r+0x1e6>
 80088d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088d4:	4621      	mov	r1, r4
 80088d6:	4630      	mov	r0, r6
 80088d8:	4798      	blx	r3
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0af      	beq.n	800883e <__svfiscanf_r+0x21a>
 80088de:	e787      	b.n	80087f0 <__svfiscanf_r+0x1cc>
 80088e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088e2:	3201      	adds	r2, #1
 80088e4:	9245      	str	r2, [sp, #276]	; 0x114
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	3a01      	subs	r2, #1
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	6062      	str	r2, [r4, #4]
 80088ee:	dd0b      	ble.n	8008908 <__svfiscanf_r+0x2e4>
 80088f0:	3301      	adds	r3, #1
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	e7a6      	b.n	8008844 <__svfiscanf_r+0x220>
 80088f6:	bf00      	nop
 80088f8:	08008f7b 	.word	0x08008f7b
 80088fc:	08008da5 	.word	0x08008da5
 8008900:	0800a281 	.word	0x0800a281
 8008904:	0800a387 	.word	0x0800a387
 8008908:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800890a:	4621      	mov	r1, r4
 800890c:	4630      	mov	r0, r6
 800890e:	4798      	blx	r3
 8008910:	2800      	cmp	r0, #0
 8008912:	d097      	beq.n	8008844 <__svfiscanf_r+0x220>
 8008914:	e76c      	b.n	80087f0 <__svfiscanf_r+0x1cc>
 8008916:	2b04      	cmp	r3, #4
 8008918:	dc06      	bgt.n	8008928 <__svfiscanf_r+0x304>
 800891a:	466b      	mov	r3, sp
 800891c:	4622      	mov	r2, r4
 800891e:	a941      	add	r1, sp, #260	; 0x104
 8008920:	4630      	mov	r0, r6
 8008922:	f000 f88f 	bl	8008a44 <_scanf_i>
 8008926:	e79b      	b.n	8008860 <__svfiscanf_r+0x23c>
 8008928:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <__svfiscanf_r+0x340>)
 800892a:	2b00      	cmp	r3, #0
 800892c:	f43f aead 	beq.w	800868a <__svfiscanf_r+0x66>
 8008930:	466b      	mov	r3, sp
 8008932:	4622      	mov	r2, r4
 8008934:	a941      	add	r1, sp, #260	; 0x104
 8008936:	4630      	mov	r0, r6
 8008938:	f7fc fe3c 	bl	80055b4 <_scanf_float>
 800893c:	e790      	b.n	8008860 <__svfiscanf_r+0x23c>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	0599      	lsls	r1, r3, #22
 8008942:	f53f af59 	bmi.w	80087f8 <__svfiscanf_r+0x1d4>
 8008946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008948:	f7fd fa44 	bl	8005dd4 <__retarget_lock_release_recursive>
 800894c:	e754      	b.n	80087f8 <__svfiscanf_r+0x1d4>
 800894e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008950:	07da      	lsls	r2, r3, #31
 8008952:	d405      	bmi.n	8008960 <__svfiscanf_r+0x33c>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	059b      	lsls	r3, r3, #22
 8008958:	d402      	bmi.n	8008960 <__svfiscanf_r+0x33c>
 800895a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895c:	f7fd fa3a 	bl	8005dd4 <__retarget_lock_release_recursive>
 8008960:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008962:	e752      	b.n	800880a <__svfiscanf_r+0x1e6>
 8008964:	080055b5 	.word	0x080055b5

08008968 <_vfiscanf_r>:
 8008968:	b530      	push	{r4, r5, lr}
 800896a:	4604      	mov	r4, r0
 800896c:	b085      	sub	sp, #20
 800896e:	b148      	cbz	r0, 8008984 <_vfiscanf_r+0x1c>
 8008970:	6a05      	ldr	r5, [r0, #32]
 8008972:	b93d      	cbnz	r5, 8008984 <_vfiscanf_r+0x1c>
 8008974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008978:	9101      	str	r1, [sp, #4]
 800897a:	f7fd f8b7 	bl	8005aec <__sinit>
 800897e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008982:	9901      	ldr	r1, [sp, #4]
 8008984:	4620      	mov	r0, r4
 8008986:	b005      	add	sp, #20
 8008988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800898c:	f7ff be4a 	b.w	8008624 <__svfiscanf_r>

08008990 <_scanf_chars>:
 8008990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008994:	4615      	mov	r5, r2
 8008996:	688a      	ldr	r2, [r1, #8]
 8008998:	4680      	mov	r8, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b932      	cbnz	r2, 80089ac <_scanf_chars+0x1c>
 800899e:	698a      	ldr	r2, [r1, #24]
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2201      	moveq	r2, #1
 80089a6:	f04f 32ff 	movne.w	r2, #4294967295
 80089aa:	608a      	str	r2, [r1, #8]
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008a40 <_scanf_chars+0xb0>
 80089b2:	06d1      	lsls	r1, r2, #27
 80089b4:	bf5f      	itttt	pl
 80089b6:	681a      	ldrpl	r2, [r3, #0]
 80089b8:	1d11      	addpl	r1, r2, #4
 80089ba:	6019      	strpl	r1, [r3, #0]
 80089bc:	6816      	ldrpl	r6, [r2, #0]
 80089be:	2700      	movs	r7, #0
 80089c0:	69a0      	ldr	r0, [r4, #24]
 80089c2:	b188      	cbz	r0, 80089e8 <_scanf_chars+0x58>
 80089c4:	2801      	cmp	r0, #1
 80089c6:	d107      	bne.n	80089d8 <_scanf_chars+0x48>
 80089c8:	682a      	ldr	r2, [r5, #0]
 80089ca:	7811      	ldrb	r1, [r2, #0]
 80089cc:	6962      	ldr	r2, [r4, #20]
 80089ce:	5c52      	ldrb	r2, [r2, r1]
 80089d0:	b952      	cbnz	r2, 80089e8 <_scanf_chars+0x58>
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	d031      	beq.n	8008a3a <_scanf_chars+0xaa>
 80089d6:	e022      	b.n	8008a1e <_scanf_chars+0x8e>
 80089d8:	2802      	cmp	r0, #2
 80089da:	d120      	bne.n	8008a1e <_scanf_chars+0x8e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80089e4:	071b      	lsls	r3, r3, #28
 80089e6:	d41a      	bmi.n	8008a1e <_scanf_chars+0x8e>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	06da      	lsls	r2, r3, #27
 80089ec:	bf5e      	ittt	pl
 80089ee:	682b      	ldrpl	r3, [r5, #0]
 80089f0:	781b      	ldrbpl	r3, [r3, #0]
 80089f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80089f6:	682a      	ldr	r2, [r5, #0]
 80089f8:	686b      	ldr	r3, [r5, #4]
 80089fa:	3201      	adds	r2, #1
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	68a2      	ldr	r2, [r4, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	3a01      	subs	r2, #1
 8008a04:	606b      	str	r3, [r5, #4]
 8008a06:	3701      	adds	r7, #1
 8008a08:	60a2      	str	r2, [r4, #8]
 8008a0a:	b142      	cbz	r2, 8008a1e <_scanf_chars+0x8e>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dcd7      	bgt.n	80089c0 <_scanf_chars+0x30>
 8008a10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a14:	4629      	mov	r1, r5
 8008a16:	4640      	mov	r0, r8
 8008a18:	4798      	blx	r3
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0d0      	beq.n	80089c0 <_scanf_chars+0x30>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f013 0310 	ands.w	r3, r3, #16
 8008a24:	d105      	bne.n	8008a32 <_scanf_chars+0xa2>
 8008a26:	68e2      	ldr	r2, [r4, #12]
 8008a28:	3201      	adds	r2, #1
 8008a2a:	60e2      	str	r2, [r4, #12]
 8008a2c:	69a2      	ldr	r2, [r4, #24]
 8008a2e:	b102      	cbz	r2, 8008a32 <_scanf_chars+0xa2>
 8008a30:	7033      	strb	r3, [r6, #0]
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	443b      	add	r3, r7
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	bf00      	nop
 8008a40:	0800a281 	.word	0x0800a281

08008a44 <_scanf_i>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4698      	mov	r8, r3
 8008a4a:	4b74      	ldr	r3, [pc, #464]	; (8008c1c <_scanf_i+0x1d8>)
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	4682      	mov	sl, r0
 8008a50:	4616      	mov	r6, r2
 8008a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a56:	b087      	sub	sp, #28
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a5e:	4b70      	ldr	r3, [pc, #448]	; (8008c20 <_scanf_i+0x1dc>)
 8008a60:	69a1      	ldr	r1, [r4, #24]
 8008a62:	4a70      	ldr	r2, [pc, #448]	; (8008c24 <_scanf_i+0x1e0>)
 8008a64:	2903      	cmp	r1, #3
 8008a66:	bf18      	it	ne
 8008a68:	461a      	movne	r2, r3
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	9201      	str	r2, [sp, #4]
 8008a6e:	1e5a      	subs	r2, r3, #1
 8008a70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a74:	bf88      	it	hi
 8008a76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a7a:	4627      	mov	r7, r4
 8008a7c:	bf82      	ittt	hi
 8008a7e:	eb03 0905 	addhi.w	r9, r3, r5
 8008a82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a86:	60a3      	strhi	r3, [r4, #8]
 8008a88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008a90:	bf98      	it	ls
 8008a92:	f04f 0900 	movls.w	r9, #0
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	463d      	mov	r5, r7
 8008a9a:	f04f 0b00 	mov.w	fp, #0
 8008a9e:	6831      	ldr	r1, [r6, #0]
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	7809      	ldrb	r1, [r1, #0]
 8008aa4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f7f7 fb91 	bl	80001d0 <memchr>
 8008aae:	b328      	cbz	r0, 8008afc <_scanf_i+0xb8>
 8008ab0:	f1bb 0f01 	cmp.w	fp, #1
 8008ab4:	d159      	bne.n	8008b6a <_scanf_i+0x126>
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	b92a      	cbnz	r2, 8008ac6 <_scanf_i+0x82>
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	2308      	movs	r3, #8
 8008abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ac2:	6063      	str	r3, [r4, #4]
 8008ac4:	6022      	str	r2, [r4, #0]
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008acc:	6022      	str	r2, [r4, #0]
 8008ace:	68a2      	ldr	r2, [r4, #8]
 8008ad0:	1e51      	subs	r1, r2, #1
 8008ad2:	60a1      	str	r1, [r4, #8]
 8008ad4:	b192      	cbz	r2, 8008afc <_scanf_i+0xb8>
 8008ad6:	6832      	ldr	r2, [r6, #0]
 8008ad8:	1c51      	adds	r1, r2, #1
 8008ada:	6031      	str	r1, [r6, #0]
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	f805 2b01 	strb.w	r2, [r5], #1
 8008ae2:	6872      	ldr	r2, [r6, #4]
 8008ae4:	3a01      	subs	r2, #1
 8008ae6:	2a00      	cmp	r2, #0
 8008ae8:	6072      	str	r2, [r6, #4]
 8008aea:	dc07      	bgt.n	8008afc <_scanf_i+0xb8>
 8008aec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008af0:	4631      	mov	r1, r6
 8008af2:	4650      	mov	r0, sl
 8008af4:	4790      	blx	r2
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f040 8085 	bne.w	8008c06 <_scanf_i+0x1c2>
 8008afc:	f10b 0b01 	add.w	fp, fp, #1
 8008b00:	f1bb 0f03 	cmp.w	fp, #3
 8008b04:	d1cb      	bne.n	8008a9e <_scanf_i+0x5a>
 8008b06:	6863      	ldr	r3, [r4, #4]
 8008b08:	b90b      	cbnz	r3, 8008b0e <_scanf_i+0xca>
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	4945      	ldr	r1, [pc, #276]	; (8008c28 <_scanf_i+0x1e4>)
 8008b12:	6960      	ldr	r0, [r4, #20]
 8008b14:	1ac9      	subs	r1, r1, r3
 8008b16:	f000 f9bd 	bl	8008e94 <__sccl>
 8008b1a:	f04f 0b00 	mov.w	fp, #0
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d03d      	beq.n	8008ba2 <_scanf_i+0x15e>
 8008b26:	6831      	ldr	r1, [r6, #0]
 8008b28:	6960      	ldr	r0, [r4, #20]
 8008b2a:	f891 c000 	ldrb.w	ip, [r1]
 8008b2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d035      	beq.n	8008ba2 <_scanf_i+0x15e>
 8008b36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008b3a:	d124      	bne.n	8008b86 <_scanf_i+0x142>
 8008b3c:	0510      	lsls	r0, r2, #20
 8008b3e:	d522      	bpl.n	8008b86 <_scanf_i+0x142>
 8008b40:	f10b 0b01 	add.w	fp, fp, #1
 8008b44:	f1b9 0f00 	cmp.w	r9, #0
 8008b48:	d003      	beq.n	8008b52 <_scanf_i+0x10e>
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	6873      	ldr	r3, [r6, #4]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	6073      	str	r3, [r6, #4]
 8008b5a:	dd1b      	ble.n	8008b94 <_scanf_i+0x150>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	6033      	str	r3, [r6, #0]
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	e7d9      	b.n	8008b1e <_scanf_i+0xda>
 8008b6a:	f1bb 0f02 	cmp.w	fp, #2
 8008b6e:	d1ae      	bne.n	8008ace <_scanf_i+0x8a>
 8008b70:	6822      	ldr	r2, [r4, #0]
 8008b72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008b76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008b7a:	d1bf      	bne.n	8008afc <_scanf_i+0xb8>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b84:	e7a2      	b.n	8008acc <_scanf_i+0x88>
 8008b86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008b8a:	6022      	str	r2, [r4, #0]
 8008b8c:	780b      	ldrb	r3, [r1, #0]
 8008b8e:	f805 3b01 	strb.w	r3, [r5], #1
 8008b92:	e7de      	b.n	8008b52 <_scanf_i+0x10e>
 8008b94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4798      	blx	r3
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0df      	beq.n	8008b62 <_scanf_i+0x11e>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	05d9      	lsls	r1, r3, #23
 8008ba6:	d50d      	bpl.n	8008bc4 <_scanf_i+0x180>
 8008ba8:	42bd      	cmp	r5, r7
 8008baa:	d909      	bls.n	8008bc0 <_scanf_i+0x17c>
 8008bac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4798      	blx	r3
 8008bba:	f105 39ff 	add.w	r9, r5, #4294967295
 8008bbe:	464d      	mov	r5, r9
 8008bc0:	42bd      	cmp	r5, r7
 8008bc2:	d028      	beq.n	8008c16 <_scanf_i+0x1d2>
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	f012 0210 	ands.w	r2, r2, #16
 8008bca:	d113      	bne.n	8008bf4 <_scanf_i+0x1b0>
 8008bcc:	702a      	strb	r2, [r5, #0]
 8008bce:	6863      	ldr	r3, [r4, #4]
 8008bd0:	9e01      	ldr	r6, [sp, #4]
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	47b0      	blx	r6
 8008bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bdc:	6821      	ldr	r1, [r4, #0]
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	f8c8 2000 	str.w	r2, [r8]
 8008be4:	f011 0f20 	tst.w	r1, #32
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	d00f      	beq.n	8008c0c <_scanf_i+0x1c8>
 8008bec:	6018      	str	r0, [r3, #0]
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60e3      	str	r3, [r4, #12]
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	1bed      	subs	r5, r5, r7
 8008bf8:	445d      	add	r5, fp
 8008bfa:	442b      	add	r3, r5
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	2000      	movs	r0, #0
 8008c00:	b007      	add	sp, #28
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c06:	f04f 0b00 	mov.w	fp, #0
 8008c0a:	e7ca      	b.n	8008ba2 <_scanf_i+0x15e>
 8008c0c:	07ca      	lsls	r2, r1, #31
 8008c0e:	bf4c      	ite	mi
 8008c10:	8018      	strhmi	r0, [r3, #0]
 8008c12:	6018      	strpl	r0, [r3, #0]
 8008c14:	e7eb      	b.n	8008bee <_scanf_i+0x1aa>
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7f2      	b.n	8008c00 <_scanf_i+0x1bc>
 8008c1a:	bf00      	nop
 8008c1c:	08009fe0 	.word	0x08009fe0
 8008c20:	080099a5 	.word	0x080099a5
 8008c24:	08008371 	.word	0x08008371
 8008c28:	0800a3a2 	.word	0x0800a3a2

08008c2c <__sflush_r>:
 8008c2c:	898a      	ldrh	r2, [r1, #12]
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	0710      	lsls	r0, r2, #28
 8008c36:	460c      	mov	r4, r1
 8008c38:	d458      	bmi.n	8008cec <__sflush_r+0xc0>
 8008c3a:	684b      	ldr	r3, [r1, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc05      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d0f9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	6a21      	ldr	r1, [r4, #32]
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	d032      	beq.n	8008cc6 <__sflush_r+0x9a>
 8008c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	075a      	lsls	r2, r3, #29
 8008c66:	d505      	bpl.n	8008c74 <__sflush_r+0x48>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	1ac0      	subs	r0, r0, r3
 8008c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6e:	b10b      	cbz	r3, 8008c74 <__sflush_r+0x48>
 8008c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c72:	1ac0      	subs	r0, r0, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	4602      	mov	r2, r0
 8008c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c7a:	6a21      	ldr	r1, [r4, #32]
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b0      	blx	r6
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	d106      	bne.n	8008c94 <__sflush_r+0x68>
 8008c86:	6829      	ldr	r1, [r5, #0]
 8008c88:	291d      	cmp	r1, #29
 8008c8a:	d82b      	bhi.n	8008ce4 <__sflush_r+0xb8>
 8008c8c:	4a29      	ldr	r2, [pc, #164]	; (8008d34 <__sflush_r+0x108>)
 8008c8e:	410a      	asrs	r2, r1
 8008c90:	07d6      	lsls	r6, r2, #31
 8008c92:	d427      	bmi.n	8008ce4 <__sflush_r+0xb8>
 8008c94:	2200      	movs	r2, #0
 8008c96:	6062      	str	r2, [r4, #4]
 8008c98:	04d9      	lsls	r1, r3, #19
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	6022      	str	r2, [r4, #0]
 8008c9e:	d504      	bpl.n	8008caa <__sflush_r+0x7e>
 8008ca0:	1c42      	adds	r2, r0, #1
 8008ca2:	d101      	bne.n	8008ca8 <__sflush_r+0x7c>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b903      	cbnz	r3, 8008caa <__sflush_r+0x7e>
 8008ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8008caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cac:	602f      	str	r7, [r5, #0]
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d0c9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb6:	4299      	cmp	r1, r3
 8008cb8:	d002      	beq.n	8008cc0 <__sflush_r+0x94>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7fd ff16 	bl	8006aec <_free_r>
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc4:	e7c0      	b.n	8008c48 <__sflush_r+0x1c>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b0      	blx	r6
 8008ccc:	1c41      	adds	r1, r0, #1
 8008cce:	d1c8      	bne.n	8008c62 <__sflush_r+0x36>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c5      	beq.n	8008c62 <__sflush_r+0x36>
 8008cd6:	2b1d      	cmp	r3, #29
 8008cd8:	d001      	beq.n	8008cde <__sflush_r+0xb2>
 8008cda:	2b16      	cmp	r3, #22
 8008cdc:	d101      	bne.n	8008ce2 <__sflush_r+0xb6>
 8008cde:	602f      	str	r7, [r5, #0]
 8008ce0:	e7b1      	b.n	8008c46 <__sflush_r+0x1a>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7ad      	b.n	8008c48 <__sflush_r+0x1c>
 8008cec:	690f      	ldr	r7, [r1, #16]
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	d0a9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cf2:	0793      	lsls	r3, r2, #30
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	bf08      	it	eq
 8008cf8:	694b      	ldreq	r3, [r1, #20]
 8008cfa:	600f      	str	r7, [r1, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2300      	movne	r3, #0
 8008d00:	eba6 0807 	sub.w	r8, r6, r7
 8008d04:	608b      	str	r3, [r1, #8]
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	dd9c      	ble.n	8008c46 <__sflush_r+0x1a>
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d10:	4643      	mov	r3, r8
 8008d12:	463a      	mov	r2, r7
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b0      	blx	r6
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc06      	bgt.n	8008d2a <__sflush_r+0xfe>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e78e      	b.n	8008c48 <__sflush_r+0x1c>
 8008d2a:	4407      	add	r7, r0
 8008d2c:	eba8 0800 	sub.w	r8, r8, r0
 8008d30:	e7e9      	b.n	8008d06 <__sflush_r+0xda>
 8008d32:	bf00      	nop
 8008d34:	dfbffffe 	.word	0xdfbffffe

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6a03      	ldr	r3, [r0, #32]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f7fc fecd 	bl	8005aec <__sinit>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f3      	beq.n	8008d42 <_fflush_r+0xa>
 8008d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d5c:	07d0      	lsls	r0, r2, #31
 8008d5e:	d404      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d60:	0599      	lsls	r1, r3, #22
 8008d62:	d402      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d66:	f7fd f834 	bl	8005dd2 <__retarget_lock_acquire_recursive>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f7ff ff5d 	bl	8008c2c <__sflush_r>
 8008d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d74:	07da      	lsls	r2, r3, #31
 8008d76:	4605      	mov	r5, r0
 8008d78:	d4e4      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	059b      	lsls	r3, r3, #22
 8008d7e:	d4e1      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d82:	f7fd f827 	bl	8005dd4 <__retarget_lock_release_recursive>
 8008d86:	e7dd      	b.n	8008d44 <_fflush_r+0xc>

08008d88 <lflush>:
 8008d88:	898b      	ldrh	r3, [r1, #12]
 8008d8a:	f003 0309 	and.w	r3, r3, #9
 8008d8e:	2b09      	cmp	r3, #9
 8008d90:	d103      	bne.n	8008d9a <lflush+0x12>
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <lflush+0x18>)
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	f7ff bfcf 	b.w	8008d38 <_fflush_r>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20000064 	.word	0x20000064

08008da4 <__srefill_r>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	4605      	mov	r5, r0
 8008daa:	b118      	cbz	r0, 8008db4 <__srefill_r+0x10>
 8008dac:	6a03      	ldr	r3, [r0, #32]
 8008dae:	b90b      	cbnz	r3, 8008db4 <__srefill_r+0x10>
 8008db0:	f7fc fe9c 	bl	8005aec <__sinit>
 8008db4:	2300      	movs	r3, #0
 8008db6:	6063      	str	r3, [r4, #4]
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dbe:	069e      	lsls	r6, r3, #26
 8008dc0:	d502      	bpl.n	8008dc8 <__srefill_r+0x24>
 8008dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc6:	e05c      	b.n	8008e82 <__srefill_r+0xde>
 8008dc8:	0758      	lsls	r0, r3, #29
 8008dca:	d448      	bmi.n	8008e5e <__srefill_r+0xba>
 8008dcc:	06d9      	lsls	r1, r3, #27
 8008dce:	d405      	bmi.n	8008ddc <__srefill_r+0x38>
 8008dd0:	2309      	movs	r3, #9
 8008dd2:	602b      	str	r3, [r5, #0]
 8008dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	e7f2      	b.n	8008dc2 <__srefill_r+0x1e>
 8008ddc:	071a      	lsls	r2, r3, #28
 8008dde:	d50b      	bpl.n	8008df8 <__srefill_r+0x54>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7ff ffa8 	bl	8008d38 <_fflush_r>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d1ea      	bne.n	8008dc2 <__srefill_r+0x1e>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	60a0      	str	r0, [r4, #8]
 8008df0:	f023 0308 	bic.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	61a0      	str	r0, [r4, #24]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f043 0304 	orr.w	r3, r3, #4
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	6923      	ldr	r3, [r4, #16]
 8008e02:	b91b      	cbnz	r3, 8008e0c <__srefill_r+0x68>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fe14 	bl	8009a34 <__smakebuf_r>
 8008e0c:	89a6      	ldrh	r6, [r4, #12]
 8008e0e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008e12:	07b3      	lsls	r3, r6, #30
 8008e14:	d00f      	beq.n	8008e36 <__srefill_r+0x92>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <__srefill_r+0xe4>)
 8008e1a:	491c      	ldr	r1, [pc, #112]	; (8008e8c <__srefill_r+0xe8>)
 8008e1c:	481c      	ldr	r0, [pc, #112]	; (8008e90 <__srefill_r+0xec>)
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	f006 0609 	and.w	r6, r6, #9
 8008e24:	f7fc fe7a 	bl	8005b1c <_fwalk_sglue>
 8008e28:	2e09      	cmp	r6, #9
 8008e2a:	81a7      	strh	r7, [r4, #12]
 8008e2c:	d103      	bne.n	8008e36 <__srefill_r+0x92>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	f7ff fefb 	bl	8008c2c <__sflush_r>
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e3a:	6963      	ldr	r3, [r4, #20]
 8008e3c:	6a21      	ldr	r1, [r4, #32]
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	4628      	mov	r0, r5
 8008e42:	47b0      	blx	r6
 8008e44:	2800      	cmp	r0, #0
 8008e46:	6060      	str	r0, [r4, #4]
 8008e48:	dc1c      	bgt.n	8008e84 <__srefill_r+0xe0>
 8008e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4e:	bf17      	itett	ne
 8008e50:	2200      	movne	r2, #0
 8008e52:	f043 0320 	orreq.w	r3, r3, #32
 8008e56:	6062      	strne	r2, [r4, #4]
 8008e58:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008e5c:	e7bc      	b.n	8008dd8 <__srefill_r+0x34>
 8008e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d0cd      	beq.n	8008e00 <__srefill_r+0x5c>
 8008e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d002      	beq.n	8008e72 <__srefill_r+0xce>
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f7fd fe3d 	bl	8006aec <_free_r>
 8008e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	2000      	movs	r0, #0
 8008e78:	6360      	str	r0, [r4, #52]	; 0x34
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0c0      	beq.n	8008e00 <__srefill_r+0x5c>
 8008e7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e84:	2000      	movs	r0, #0
 8008e86:	e7fc      	b.n	8008e82 <__srefill_r+0xde>
 8008e88:	2000000c 	.word	0x2000000c
 8008e8c:	08008d89 	.word	0x08008d89
 8008e90:	20000018 	.word	0x20000018

08008e94 <__sccl>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	780b      	ldrb	r3, [r1, #0]
 8008e98:	4604      	mov	r4, r0
 8008e9a:	2b5e      	cmp	r3, #94	; 0x5e
 8008e9c:	bf0b      	itete	eq
 8008e9e:	784b      	ldrbeq	r3, [r1, #1]
 8008ea0:	1c4a      	addne	r2, r1, #1
 8008ea2:	1c8a      	addeq	r2, r1, #2
 8008ea4:	2100      	movne	r1, #0
 8008ea6:	bf08      	it	eq
 8008ea8:	2101      	moveq	r1, #1
 8008eaa:	3801      	subs	r0, #1
 8008eac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008eb0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008eb4:	42a8      	cmp	r0, r5
 8008eb6:	d1fb      	bne.n	8008eb0 <__sccl+0x1c>
 8008eb8:	b90b      	cbnz	r3, 8008ebe <__sccl+0x2a>
 8008eba:	1e50      	subs	r0, r2, #1
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
 8008ebe:	f081 0101 	eor.w	r1, r1, #1
 8008ec2:	54e1      	strb	r1, [r4, r3]
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ecc:	2d2d      	cmp	r5, #45	; 0x2d
 8008ece:	d005      	beq.n	8008edc <__sccl+0x48>
 8008ed0:	2d5d      	cmp	r5, #93	; 0x5d
 8008ed2:	d016      	beq.n	8008f02 <__sccl+0x6e>
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	d0f1      	beq.n	8008ebc <__sccl+0x28>
 8008ed8:	462b      	mov	r3, r5
 8008eda:	e7f2      	b.n	8008ec2 <__sccl+0x2e>
 8008edc:	7846      	ldrb	r6, [r0, #1]
 8008ede:	2e5d      	cmp	r6, #93	; 0x5d
 8008ee0:	d0fa      	beq.n	8008ed8 <__sccl+0x44>
 8008ee2:	42b3      	cmp	r3, r6
 8008ee4:	dcf8      	bgt.n	8008ed8 <__sccl+0x44>
 8008ee6:	3002      	adds	r0, #2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	3201      	adds	r2, #1
 8008eec:	4296      	cmp	r6, r2
 8008eee:	54a1      	strb	r1, [r4, r2]
 8008ef0:	dcfb      	bgt.n	8008eea <__sccl+0x56>
 8008ef2:	1af2      	subs	r2, r6, r3
 8008ef4:	3a01      	subs	r2, #1
 8008ef6:	1c5d      	adds	r5, r3, #1
 8008ef8:	42b3      	cmp	r3, r6
 8008efa:	bfa8      	it	ge
 8008efc:	2200      	movge	r2, #0
 8008efe:	18ab      	adds	r3, r5, r2
 8008f00:	e7e1      	b.n	8008ec6 <__sccl+0x32>
 8008f02:	4610      	mov	r0, r2
 8008f04:	e7da      	b.n	8008ebc <__sccl+0x28>

08008f06 <__submore>:
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f12:	4299      	cmp	r1, r3
 8008f14:	d11d      	bne.n	8008f52 <__submore+0x4c>
 8008f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f1a:	f7fd fe5b 	bl	8006bd4 <_malloc_r>
 8008f1e:	b918      	cbnz	r0, 8008f28 <__submore+0x22>
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f2e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f32:	6360      	str	r0, [r4, #52]	; 0x34
 8008f34:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008f38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f3c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008f40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f44:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008f48:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f4c:	6020      	str	r0, [r4, #0]
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e7e8      	b.n	8008f24 <__submore+0x1e>
 8008f52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f54:	0077      	lsls	r7, r6, #1
 8008f56:	463a      	mov	r2, r7
 8008f58:	f000 fc83 	bl	8009862 <_realloc_r>
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d0de      	beq.n	8008f20 <__submore+0x1a>
 8008f62:	eb00 0806 	add.w	r8, r0, r6
 8008f66:	4601      	mov	r1, r0
 8008f68:	4632      	mov	r2, r6
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f000 f8c6 	bl	80090fc <memcpy>
 8008f70:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f74:	f8c4 8000 	str.w	r8, [r4]
 8008f78:	e7e9      	b.n	8008f4e <__submore+0x48>

08008f7a <_ungetc_r>:
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	1c4a      	adds	r2, r1, #1
 8008f80:	4606      	mov	r6, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	d103      	bne.n	8008f8e <_ungetc_r+0x14>
 8008f86:	f04f 35ff 	mov.w	r5, #4294967295
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
 8008f8e:	b118      	cbz	r0, 8008f98 <_ungetc_r+0x1e>
 8008f90:	6a03      	ldr	r3, [r0, #32]
 8008f92:	b90b      	cbnz	r3, 8008f98 <_ungetc_r+0x1e>
 8008f94:	f7fc fdaa 	bl	8005aec <__sinit>
 8008f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d405      	bmi.n	8008faa <_ungetc_r+0x30>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	0598      	lsls	r0, r3, #22
 8008fa2:	d402      	bmi.n	8008faa <_ungetc_r+0x30>
 8008fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fa6:	f7fc ff14 	bl	8005dd2 <__retarget_lock_acquire_recursive>
 8008faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fae:	f023 0320 	bic.w	r3, r3, #32
 8008fb2:	0759      	lsls	r1, r3, #29
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	d423      	bmi.n	8009002 <_ungetc_r+0x88>
 8008fba:	06d3      	lsls	r3, r2, #27
 8008fbc:	d409      	bmi.n	8008fd2 <_ungetc_r+0x58>
 8008fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc0:	07dd      	lsls	r5, r3, #31
 8008fc2:	d4e0      	bmi.n	8008f86 <_ungetc_r+0xc>
 8008fc4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008fc8:	d1dd      	bne.n	8008f86 <_ungetc_r+0xc>
 8008fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fcc:	f7fc ff02 	bl	8005dd4 <__retarget_lock_release_recursive>
 8008fd0:	e7d9      	b.n	8008f86 <_ungetc_r+0xc>
 8008fd2:	0710      	lsls	r0, r2, #28
 8008fd4:	d511      	bpl.n	8008ffa <_ungetc_r+0x80>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff fead 	bl	8008d38 <_fflush_r>
 8008fde:	b130      	cbz	r0, 8008fee <_ungetc_r+0x74>
 8008fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	d4cf      	bmi.n	8008f86 <_ungetc_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008fec:	e7ec      	b.n	8008fc8 <_ungetc_r+0x4e>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	60a0      	str	r0, [r4, #8]
 8008ff2:	f023 0308 	bic.w	r3, r3, #8
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	61a0      	str	r0, [r4, #24]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f043 0304 	orr.w	r3, r3, #4
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009004:	6862      	ldr	r2, [r4, #4]
 8009006:	b2ed      	uxtb	r5, r5
 8009008:	b1d3      	cbz	r3, 8009040 <_ungetc_r+0xc6>
 800900a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800900c:	4293      	cmp	r3, r2
 800900e:	dc05      	bgt.n	800901c <_ungetc_r+0xa2>
 8009010:	4621      	mov	r1, r4
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ff77 	bl	8008f06 <__submore>
 8009018:	2800      	cmp	r0, #0
 800901a:	d1e1      	bne.n	8008fe0 <_ungetc_r+0x66>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	1e5a      	subs	r2, r3, #1
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009026:	6863      	ldr	r3, [r4, #4]
 8009028:	3301      	adds	r3, #1
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800902e:	07da      	lsls	r2, r3, #31
 8009030:	d4ab      	bmi.n	8008f8a <_ungetc_r+0x10>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	d4a8      	bmi.n	8008f8a <_ungetc_r+0x10>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f7fc fecb 	bl	8005dd4 <__retarget_lock_release_recursive>
 800903e:	e7a4      	b.n	8008f8a <_ungetc_r+0x10>
 8009040:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009042:	6920      	ldr	r0, [r4, #16]
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	f001 0101 	and.w	r1, r1, #1
 800904a:	b160      	cbz	r0, 8009066 <_ungetc_r+0xec>
 800904c:	4298      	cmp	r0, r3
 800904e:	d20a      	bcs.n	8009066 <_ungetc_r+0xec>
 8009050:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8009054:	42a8      	cmp	r0, r5
 8009056:	d106      	bne.n	8009066 <_ungetc_r+0xec>
 8009058:	3b01      	subs	r3, #1
 800905a:	3201      	adds	r2, #1
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	6062      	str	r2, [r4, #4]
 8009060:	2900      	cmp	r1, #0
 8009062:	d192      	bne.n	8008f8a <_ungetc_r+0x10>
 8009064:	e7e5      	b.n	8009032 <_ungetc_r+0xb8>
 8009066:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800906a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800906e:	6363      	str	r3, [r4, #52]	; 0x34
 8009070:	2303      	movs	r3, #3
 8009072:	63a3      	str	r3, [r4, #56]	; 0x38
 8009074:	4623      	mov	r3, r4
 8009076:	f803 5f46 	strb.w	r5, [r3, #70]!
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	2301      	movs	r3, #1
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	e7ee      	b.n	8009060 <_ungetc_r+0xe6>

08009082 <memmove>:
 8009082:	4288      	cmp	r0, r1
 8009084:	b510      	push	{r4, lr}
 8009086:	eb01 0402 	add.w	r4, r1, r2
 800908a:	d902      	bls.n	8009092 <memmove+0x10>
 800908c:	4284      	cmp	r4, r0
 800908e:	4623      	mov	r3, r4
 8009090:	d807      	bhi.n	80090a2 <memmove+0x20>
 8009092:	1e43      	subs	r3, r0, #1
 8009094:	42a1      	cmp	r1, r4
 8009096:	d008      	beq.n	80090aa <memmove+0x28>
 8009098:	f811 2b01 	ldrb.w	r2, [r1], #1
 800909c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090a0:	e7f8      	b.n	8009094 <memmove+0x12>
 80090a2:	4402      	add	r2, r0
 80090a4:	4601      	mov	r1, r0
 80090a6:	428a      	cmp	r2, r1
 80090a8:	d100      	bne.n	80090ac <memmove+0x2a>
 80090aa:	bd10      	pop	{r4, pc}
 80090ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090b4:	e7f7      	b.n	80090a6 <memmove+0x24>

080090b6 <strncmp>:
 80090b6:	b510      	push	{r4, lr}
 80090b8:	b16a      	cbz	r2, 80090d6 <strncmp+0x20>
 80090ba:	3901      	subs	r1, #1
 80090bc:	1884      	adds	r4, r0, r2
 80090be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d103      	bne.n	80090d2 <strncmp+0x1c>
 80090ca:	42a0      	cmp	r0, r4
 80090cc:	d001      	beq.n	80090d2 <strncmp+0x1c>
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	d1f5      	bne.n	80090be <strncmp+0x8>
 80090d2:	1ad0      	subs	r0, r2, r3
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	4610      	mov	r0, r2
 80090d8:	e7fc      	b.n	80090d4 <strncmp+0x1e>
	...

080090dc <_sbrk_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d06      	ldr	r5, [pc, #24]	; (80090f8 <_sbrk_r+0x1c>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	f7f8 fe1c 	bl	8001d24 <_sbrk>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_sbrk_r+0x1a>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_sbrk_r+0x1a>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000b1c 	.word	0x20000b1c

080090fc <memcpy>:
 80090fc:	440a      	add	r2, r1
 80090fe:	4291      	cmp	r1, r2
 8009100:	f100 33ff 	add.w	r3, r0, #4294967295
 8009104:	d100      	bne.n	8009108 <memcpy+0xc>
 8009106:	4770      	bx	lr
 8009108:	b510      	push	{r4, lr}
 800910a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009112:	4291      	cmp	r1, r2
 8009114:	d1f9      	bne.n	800910a <memcpy+0xe>
 8009116:	bd10      	pop	{r4, pc}

08009118 <nan>:
 8009118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009120 <nan+0x8>
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	00000000 	.word	0x00000000
 8009124:	7ff80000 	.word	0x7ff80000

08009128 <__assert_func>:
 8009128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800912a:	4614      	mov	r4, r2
 800912c:	461a      	mov	r2, r3
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <__assert_func+0x2c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	68d8      	ldr	r0, [r3, #12]
 8009136:	b14c      	cbz	r4, 800914c <__assert_func+0x24>
 8009138:	4b07      	ldr	r3, [pc, #28]	; (8009158 <__assert_func+0x30>)
 800913a:	9100      	str	r1, [sp, #0]
 800913c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009140:	4906      	ldr	r1, [pc, #24]	; (800915c <__assert_func+0x34>)
 8009142:	462b      	mov	r3, r5
 8009144:	f000 fc3e 	bl	80099c4 <fiprintf>
 8009148:	f000 fcd2 	bl	8009af0 <abort>
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <__assert_func+0x38>)
 800914e:	461c      	mov	r4, r3
 8009150:	e7f3      	b.n	800913a <__assert_func+0x12>
 8009152:	bf00      	nop
 8009154:	20000064 	.word	0x20000064
 8009158:	0800a3b5 	.word	0x0800a3b5
 800915c:	0800a3c2 	.word	0x0800a3c2
 8009160:	0800a3f0 	.word	0x0800a3f0

08009164 <_calloc_r>:
 8009164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009166:	fba1 2402 	umull	r2, r4, r1, r2
 800916a:	b94c      	cbnz	r4, 8009180 <_calloc_r+0x1c>
 800916c:	4611      	mov	r1, r2
 800916e:	9201      	str	r2, [sp, #4]
 8009170:	f7fd fd30 	bl	8006bd4 <_malloc_r>
 8009174:	9a01      	ldr	r2, [sp, #4]
 8009176:	4605      	mov	r5, r0
 8009178:	b930      	cbnz	r0, 8009188 <_calloc_r+0x24>
 800917a:	4628      	mov	r0, r5
 800917c:	b003      	add	sp, #12
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	220c      	movs	r2, #12
 8009182:	6002      	str	r2, [r0, #0]
 8009184:	2500      	movs	r5, #0
 8009186:	e7f8      	b.n	800917a <_calloc_r+0x16>
 8009188:	4621      	mov	r1, r4
 800918a:	f7fc fd8e 	bl	8005caa <memset>
 800918e:	e7f4      	b.n	800917a <_calloc_r+0x16>

08009190 <rshift>:
 8009190:	6903      	ldr	r3, [r0, #16]
 8009192:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800919a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800919e:	f100 0414 	add.w	r4, r0, #20
 80091a2:	dd45      	ble.n	8009230 <rshift+0xa0>
 80091a4:	f011 011f 	ands.w	r1, r1, #31
 80091a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091b0:	d10c      	bne.n	80091cc <rshift+0x3c>
 80091b2:	f100 0710 	add.w	r7, r0, #16
 80091b6:	4629      	mov	r1, r5
 80091b8:	42b1      	cmp	r1, r6
 80091ba:	d334      	bcc.n	8009226 <rshift+0x96>
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	1eea      	subs	r2, r5, #3
 80091c2:	4296      	cmp	r6, r2
 80091c4:	bf38      	it	cc
 80091c6:	2300      	movcc	r3, #0
 80091c8:	4423      	add	r3, r4
 80091ca:	e015      	b.n	80091f8 <rshift+0x68>
 80091cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091d0:	f1c1 0820 	rsb	r8, r1, #32
 80091d4:	40cf      	lsrs	r7, r1
 80091d6:	f105 0e04 	add.w	lr, r5, #4
 80091da:	46a1      	mov	r9, r4
 80091dc:	4576      	cmp	r6, lr
 80091de:	46f4      	mov	ip, lr
 80091e0:	d815      	bhi.n	800920e <rshift+0x7e>
 80091e2:	1a9a      	subs	r2, r3, r2
 80091e4:	0092      	lsls	r2, r2, #2
 80091e6:	3a04      	subs	r2, #4
 80091e8:	3501      	adds	r5, #1
 80091ea:	42ae      	cmp	r6, r5
 80091ec:	bf38      	it	cc
 80091ee:	2200      	movcc	r2, #0
 80091f0:	18a3      	adds	r3, r4, r2
 80091f2:	50a7      	str	r7, [r4, r2]
 80091f4:	b107      	cbz	r7, 80091f8 <rshift+0x68>
 80091f6:	3304      	adds	r3, #4
 80091f8:	1b1a      	subs	r2, r3, r4
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009200:	bf08      	it	eq
 8009202:	2300      	moveq	r3, #0
 8009204:	6102      	str	r2, [r0, #16]
 8009206:	bf08      	it	eq
 8009208:	6143      	streq	r3, [r0, #20]
 800920a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800920e:	f8dc c000 	ldr.w	ip, [ip]
 8009212:	fa0c fc08 	lsl.w	ip, ip, r8
 8009216:	ea4c 0707 	orr.w	r7, ip, r7
 800921a:	f849 7b04 	str.w	r7, [r9], #4
 800921e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009222:	40cf      	lsrs	r7, r1
 8009224:	e7da      	b.n	80091dc <rshift+0x4c>
 8009226:	f851 cb04 	ldr.w	ip, [r1], #4
 800922a:	f847 cf04 	str.w	ip, [r7, #4]!
 800922e:	e7c3      	b.n	80091b8 <rshift+0x28>
 8009230:	4623      	mov	r3, r4
 8009232:	e7e1      	b.n	80091f8 <rshift+0x68>

08009234 <__hexdig_fun>:
 8009234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009238:	2b09      	cmp	r3, #9
 800923a:	d802      	bhi.n	8009242 <__hexdig_fun+0xe>
 800923c:	3820      	subs	r0, #32
 800923e:	b2c0      	uxtb	r0, r0
 8009240:	4770      	bx	lr
 8009242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009246:	2b05      	cmp	r3, #5
 8009248:	d801      	bhi.n	800924e <__hexdig_fun+0x1a>
 800924a:	3847      	subs	r0, #71	; 0x47
 800924c:	e7f7      	b.n	800923e <__hexdig_fun+0xa>
 800924e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009252:	2b05      	cmp	r3, #5
 8009254:	d801      	bhi.n	800925a <__hexdig_fun+0x26>
 8009256:	3827      	subs	r0, #39	; 0x27
 8009258:	e7f1      	b.n	800923e <__hexdig_fun+0xa>
 800925a:	2000      	movs	r0, #0
 800925c:	4770      	bx	lr
	...

08009260 <__gethex>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	4617      	mov	r7, r2
 8009266:	680a      	ldr	r2, [r1, #0]
 8009268:	b085      	sub	sp, #20
 800926a:	f102 0b02 	add.w	fp, r2, #2
 800926e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009272:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009276:	4681      	mov	r9, r0
 8009278:	468a      	mov	sl, r1
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	32fe      	adds	r2, #254	; 0xfe
 800927e:	eb02 030b 	add.w	r3, r2, fp
 8009282:	46d8      	mov	r8, fp
 8009284:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	2830      	cmp	r0, #48	; 0x30
 800928c:	d0f7      	beq.n	800927e <__gethex+0x1e>
 800928e:	f7ff ffd1 	bl	8009234 <__hexdig_fun>
 8009292:	4604      	mov	r4, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	d138      	bne.n	800930a <__gethex+0xaa>
 8009298:	49a7      	ldr	r1, [pc, #668]	; (8009538 <__gethex+0x2d8>)
 800929a:	2201      	movs	r2, #1
 800929c:	4640      	mov	r0, r8
 800929e:	f7ff ff0a 	bl	80090b6 <strncmp>
 80092a2:	4606      	mov	r6, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d169      	bne.n	800937c <__gethex+0x11c>
 80092a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80092ac:	465d      	mov	r5, fp
 80092ae:	f7ff ffc1 	bl	8009234 <__hexdig_fun>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d064      	beq.n	8009380 <__gethex+0x120>
 80092b6:	465a      	mov	r2, fp
 80092b8:	7810      	ldrb	r0, [r2, #0]
 80092ba:	2830      	cmp	r0, #48	; 0x30
 80092bc:	4690      	mov	r8, r2
 80092be:	f102 0201 	add.w	r2, r2, #1
 80092c2:	d0f9      	beq.n	80092b8 <__gethex+0x58>
 80092c4:	f7ff ffb6 	bl	8009234 <__hexdig_fun>
 80092c8:	2301      	movs	r3, #1
 80092ca:	fab0 f480 	clz	r4, r0
 80092ce:	0964      	lsrs	r4, r4, #5
 80092d0:	465e      	mov	r6, fp
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	4642      	mov	r2, r8
 80092d6:	4615      	mov	r5, r2
 80092d8:	3201      	adds	r2, #1
 80092da:	7828      	ldrb	r0, [r5, #0]
 80092dc:	f7ff ffaa 	bl	8009234 <__hexdig_fun>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1f8      	bne.n	80092d6 <__gethex+0x76>
 80092e4:	4994      	ldr	r1, [pc, #592]	; (8009538 <__gethex+0x2d8>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7ff fee4 	bl	80090b6 <strncmp>
 80092ee:	b978      	cbnz	r0, 8009310 <__gethex+0xb0>
 80092f0:	b946      	cbnz	r6, 8009304 <__gethex+0xa4>
 80092f2:	1c6e      	adds	r6, r5, #1
 80092f4:	4632      	mov	r2, r6
 80092f6:	4615      	mov	r5, r2
 80092f8:	3201      	adds	r2, #1
 80092fa:	7828      	ldrb	r0, [r5, #0]
 80092fc:	f7ff ff9a 	bl	8009234 <__hexdig_fun>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1f8      	bne.n	80092f6 <__gethex+0x96>
 8009304:	1b73      	subs	r3, r6, r5
 8009306:	009e      	lsls	r6, r3, #2
 8009308:	e004      	b.n	8009314 <__gethex+0xb4>
 800930a:	2400      	movs	r4, #0
 800930c:	4626      	mov	r6, r4
 800930e:	e7e1      	b.n	80092d4 <__gethex+0x74>
 8009310:	2e00      	cmp	r6, #0
 8009312:	d1f7      	bne.n	8009304 <__gethex+0xa4>
 8009314:	782b      	ldrb	r3, [r5, #0]
 8009316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800931a:	2b50      	cmp	r3, #80	; 0x50
 800931c:	d13d      	bne.n	800939a <__gethex+0x13a>
 800931e:	786b      	ldrb	r3, [r5, #1]
 8009320:	2b2b      	cmp	r3, #43	; 0x2b
 8009322:	d02f      	beq.n	8009384 <__gethex+0x124>
 8009324:	2b2d      	cmp	r3, #45	; 0x2d
 8009326:	d031      	beq.n	800938c <__gethex+0x12c>
 8009328:	1c69      	adds	r1, r5, #1
 800932a:	f04f 0b00 	mov.w	fp, #0
 800932e:	7808      	ldrb	r0, [r1, #0]
 8009330:	f7ff ff80 	bl	8009234 <__hexdig_fun>
 8009334:	1e42      	subs	r2, r0, #1
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	2a18      	cmp	r2, #24
 800933a:	d82e      	bhi.n	800939a <__gethex+0x13a>
 800933c:	f1a0 0210 	sub.w	r2, r0, #16
 8009340:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009344:	f7ff ff76 	bl	8009234 <__hexdig_fun>
 8009348:	f100 3cff 	add.w	ip, r0, #4294967295
 800934c:	fa5f fc8c 	uxtb.w	ip, ip
 8009350:	f1bc 0f18 	cmp.w	ip, #24
 8009354:	d91d      	bls.n	8009392 <__gethex+0x132>
 8009356:	f1bb 0f00 	cmp.w	fp, #0
 800935a:	d000      	beq.n	800935e <__gethex+0xfe>
 800935c:	4252      	negs	r2, r2
 800935e:	4416      	add	r6, r2
 8009360:	f8ca 1000 	str.w	r1, [sl]
 8009364:	b1dc      	cbz	r4, 800939e <__gethex+0x13e>
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf14      	ite	ne
 800936c:	f04f 0800 	movne.w	r8, #0
 8009370:	f04f 0806 	moveq.w	r8, #6
 8009374:	4640      	mov	r0, r8
 8009376:	b005      	add	sp, #20
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	4645      	mov	r5, r8
 800937e:	4626      	mov	r6, r4
 8009380:	2401      	movs	r4, #1
 8009382:	e7c7      	b.n	8009314 <__gethex+0xb4>
 8009384:	f04f 0b00 	mov.w	fp, #0
 8009388:	1ca9      	adds	r1, r5, #2
 800938a:	e7d0      	b.n	800932e <__gethex+0xce>
 800938c:	f04f 0b01 	mov.w	fp, #1
 8009390:	e7fa      	b.n	8009388 <__gethex+0x128>
 8009392:	230a      	movs	r3, #10
 8009394:	fb03 0002 	mla	r0, r3, r2, r0
 8009398:	e7d0      	b.n	800933c <__gethex+0xdc>
 800939a:	4629      	mov	r1, r5
 800939c:	e7e0      	b.n	8009360 <__gethex+0x100>
 800939e:	eba5 0308 	sub.w	r3, r5, r8
 80093a2:	3b01      	subs	r3, #1
 80093a4:	4621      	mov	r1, r4
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	dc0a      	bgt.n	80093c0 <__gethex+0x160>
 80093aa:	4648      	mov	r0, r9
 80093ac:	f7fd fc9e 	bl	8006cec <_Balloc>
 80093b0:	4604      	mov	r4, r0
 80093b2:	b940      	cbnz	r0, 80093c6 <__gethex+0x166>
 80093b4:	4b61      	ldr	r3, [pc, #388]	; (800953c <__gethex+0x2dc>)
 80093b6:	4602      	mov	r2, r0
 80093b8:	21e4      	movs	r1, #228	; 0xe4
 80093ba:	4861      	ldr	r0, [pc, #388]	; (8009540 <__gethex+0x2e0>)
 80093bc:	f7ff feb4 	bl	8009128 <__assert_func>
 80093c0:	3101      	adds	r1, #1
 80093c2:	105b      	asrs	r3, r3, #1
 80093c4:	e7ef      	b.n	80093a6 <__gethex+0x146>
 80093c6:	f100 0a14 	add.w	sl, r0, #20
 80093ca:	2300      	movs	r3, #0
 80093cc:	495a      	ldr	r1, [pc, #360]	; (8009538 <__gethex+0x2d8>)
 80093ce:	f8cd a004 	str.w	sl, [sp, #4]
 80093d2:	469b      	mov	fp, r3
 80093d4:	45a8      	cmp	r8, r5
 80093d6:	d342      	bcc.n	800945e <__gethex+0x1fe>
 80093d8:	9801      	ldr	r0, [sp, #4]
 80093da:	f840 bb04 	str.w	fp, [r0], #4
 80093de:	eba0 000a 	sub.w	r0, r0, sl
 80093e2:	1080      	asrs	r0, r0, #2
 80093e4:	6120      	str	r0, [r4, #16]
 80093e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80093ea:	4658      	mov	r0, fp
 80093ec:	f7fd fd70 	bl	8006ed0 <__hi0bits>
 80093f0:	683d      	ldr	r5, [r7, #0]
 80093f2:	eba8 0000 	sub.w	r0, r8, r0
 80093f6:	42a8      	cmp	r0, r5
 80093f8:	dd59      	ble.n	80094ae <__gethex+0x24e>
 80093fa:	eba0 0805 	sub.w	r8, r0, r5
 80093fe:	4641      	mov	r1, r8
 8009400:	4620      	mov	r0, r4
 8009402:	f7fe f8ff 	bl	8007604 <__any_on>
 8009406:	4683      	mov	fp, r0
 8009408:	b1b8      	cbz	r0, 800943a <__gethex+0x1da>
 800940a:	f108 33ff 	add.w	r3, r8, #4294967295
 800940e:	1159      	asrs	r1, r3, #5
 8009410:	f003 021f 	and.w	r2, r3, #31
 8009414:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009418:	f04f 0b01 	mov.w	fp, #1
 800941c:	fa0b f202 	lsl.w	r2, fp, r2
 8009420:	420a      	tst	r2, r1
 8009422:	d00a      	beq.n	800943a <__gethex+0x1da>
 8009424:	455b      	cmp	r3, fp
 8009426:	dd06      	ble.n	8009436 <__gethex+0x1d6>
 8009428:	f1a8 0102 	sub.w	r1, r8, #2
 800942c:	4620      	mov	r0, r4
 800942e:	f7fe f8e9 	bl	8007604 <__any_on>
 8009432:	2800      	cmp	r0, #0
 8009434:	d138      	bne.n	80094a8 <__gethex+0x248>
 8009436:	f04f 0b02 	mov.w	fp, #2
 800943a:	4641      	mov	r1, r8
 800943c:	4620      	mov	r0, r4
 800943e:	f7ff fea7 	bl	8009190 <rshift>
 8009442:	4446      	add	r6, r8
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	42b3      	cmp	r3, r6
 8009448:	da41      	bge.n	80094ce <__gethex+0x26e>
 800944a:	4621      	mov	r1, r4
 800944c:	4648      	mov	r0, r9
 800944e:	f7fd fc8d 	bl	8006d6c <_Bfree>
 8009452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009454:	2300      	movs	r3, #0
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800945c:	e78a      	b.n	8009374 <__gethex+0x114>
 800945e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009462:	2a2e      	cmp	r2, #46	; 0x2e
 8009464:	d014      	beq.n	8009490 <__gethex+0x230>
 8009466:	2b20      	cmp	r3, #32
 8009468:	d106      	bne.n	8009478 <__gethex+0x218>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	f843 bb04 	str.w	fp, [r3], #4
 8009470:	f04f 0b00 	mov.w	fp, #0
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	465b      	mov	r3, fp
 8009478:	7828      	ldrb	r0, [r5, #0]
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	f7ff feda 	bl	8009234 <__hexdig_fun>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	f000 000f 	and.w	r0, r0, #15
 8009486:	4098      	lsls	r0, r3
 8009488:	ea4b 0b00 	orr.w	fp, fp, r0
 800948c:	3304      	adds	r3, #4
 800948e:	e7a1      	b.n	80093d4 <__gethex+0x174>
 8009490:	45a8      	cmp	r8, r5
 8009492:	d8e8      	bhi.n	8009466 <__gethex+0x206>
 8009494:	2201      	movs	r2, #1
 8009496:	4628      	mov	r0, r5
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	f7ff fe0c 	bl	80090b6 <strncmp>
 800949e:	4926      	ldr	r1, [pc, #152]	; (8009538 <__gethex+0x2d8>)
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d1df      	bne.n	8009466 <__gethex+0x206>
 80094a6:	e795      	b.n	80093d4 <__gethex+0x174>
 80094a8:	f04f 0b03 	mov.w	fp, #3
 80094ac:	e7c5      	b.n	800943a <__gethex+0x1da>
 80094ae:	da0b      	bge.n	80094c8 <__gethex+0x268>
 80094b0:	eba5 0800 	sub.w	r8, r5, r0
 80094b4:	4621      	mov	r1, r4
 80094b6:	4642      	mov	r2, r8
 80094b8:	4648      	mov	r0, r9
 80094ba:	f7fd fe71 	bl	80071a0 <__lshift>
 80094be:	eba6 0608 	sub.w	r6, r6, r8
 80094c2:	4604      	mov	r4, r0
 80094c4:	f100 0a14 	add.w	sl, r0, #20
 80094c8:	f04f 0b00 	mov.w	fp, #0
 80094cc:	e7ba      	b.n	8009444 <__gethex+0x1e4>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	42b3      	cmp	r3, r6
 80094d2:	dd73      	ble.n	80095bc <__gethex+0x35c>
 80094d4:	1b9e      	subs	r6, r3, r6
 80094d6:	42b5      	cmp	r5, r6
 80094d8:	dc34      	bgt.n	8009544 <__gethex+0x2e4>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d023      	beq.n	8009528 <__gethex+0x2c8>
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d025      	beq.n	8009530 <__gethex+0x2d0>
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d115      	bne.n	8009514 <__gethex+0x2b4>
 80094e8:	42b5      	cmp	r5, r6
 80094ea:	d113      	bne.n	8009514 <__gethex+0x2b4>
 80094ec:	2d01      	cmp	r5, #1
 80094ee:	d10b      	bne.n	8009508 <__gethex+0x2a8>
 80094f0:	9a02      	ldr	r2, [sp, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	2301      	movs	r3, #1
 80094f8:	6123      	str	r3, [r4, #16]
 80094fa:	f8ca 3000 	str.w	r3, [sl]
 80094fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009500:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009504:	601c      	str	r4, [r3, #0]
 8009506:	e735      	b.n	8009374 <__gethex+0x114>
 8009508:	1e69      	subs	r1, r5, #1
 800950a:	4620      	mov	r0, r4
 800950c:	f7fe f87a 	bl	8007604 <__any_on>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1ed      	bne.n	80094f0 <__gethex+0x290>
 8009514:	4621      	mov	r1, r4
 8009516:	4648      	mov	r0, r9
 8009518:	f7fd fc28 	bl	8006d6c <_Bfree>
 800951c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800951e:	2300      	movs	r3, #0
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009526:	e725      	b.n	8009374 <__gethex+0x114>
 8009528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f2      	bne.n	8009514 <__gethex+0x2b4>
 800952e:	e7df      	b.n	80094f0 <__gethex+0x290>
 8009530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1dc      	bne.n	80094f0 <__gethex+0x290>
 8009536:	e7ed      	b.n	8009514 <__gethex+0x2b4>
 8009538:	0800a22c 	.word	0x0800a22c
 800953c:	0800a0bf 	.word	0x0800a0bf
 8009540:	0800a3f1 	.word	0x0800a3f1
 8009544:	f106 38ff 	add.w	r8, r6, #4294967295
 8009548:	f1bb 0f00 	cmp.w	fp, #0
 800954c:	d133      	bne.n	80095b6 <__gethex+0x356>
 800954e:	f1b8 0f00 	cmp.w	r8, #0
 8009552:	d004      	beq.n	800955e <__gethex+0x2fe>
 8009554:	4641      	mov	r1, r8
 8009556:	4620      	mov	r0, r4
 8009558:	f7fe f854 	bl	8007604 <__any_on>
 800955c:	4683      	mov	fp, r0
 800955e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009562:	2301      	movs	r3, #1
 8009564:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009568:	f008 081f 	and.w	r8, r8, #31
 800956c:	fa03 f308 	lsl.w	r3, r3, r8
 8009570:	4213      	tst	r3, r2
 8009572:	4631      	mov	r1, r6
 8009574:	4620      	mov	r0, r4
 8009576:	bf18      	it	ne
 8009578:	f04b 0b02 	orrne.w	fp, fp, #2
 800957c:	1bad      	subs	r5, r5, r6
 800957e:	f7ff fe07 	bl	8009190 <rshift>
 8009582:	687e      	ldr	r6, [r7, #4]
 8009584:	f04f 0802 	mov.w	r8, #2
 8009588:	f1bb 0f00 	cmp.w	fp, #0
 800958c:	d04a      	beq.n	8009624 <__gethex+0x3c4>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d016      	beq.n	80095c2 <__gethex+0x362>
 8009594:	2b03      	cmp	r3, #3
 8009596:	d018      	beq.n	80095ca <__gethex+0x36a>
 8009598:	2b01      	cmp	r3, #1
 800959a:	d109      	bne.n	80095b0 <__gethex+0x350>
 800959c:	f01b 0f02 	tst.w	fp, #2
 80095a0:	d006      	beq.n	80095b0 <__gethex+0x350>
 80095a2:	f8da 3000 	ldr.w	r3, [sl]
 80095a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80095aa:	f01b 0f01 	tst.w	fp, #1
 80095ae:	d10f      	bne.n	80095d0 <__gethex+0x370>
 80095b0:	f048 0810 	orr.w	r8, r8, #16
 80095b4:	e036      	b.n	8009624 <__gethex+0x3c4>
 80095b6:	f04f 0b01 	mov.w	fp, #1
 80095ba:	e7d0      	b.n	800955e <__gethex+0x2fe>
 80095bc:	f04f 0801 	mov.w	r8, #1
 80095c0:	e7e2      	b.n	8009588 <__gethex+0x328>
 80095c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095c4:	f1c3 0301 	rsb	r3, r3, #1
 80095c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0ef      	beq.n	80095b0 <__gethex+0x350>
 80095d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095d4:	f104 0214 	add.w	r2, r4, #20
 80095d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80095e2:	2300      	movs	r3, #0
 80095e4:	4694      	mov	ip, r2
 80095e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80095ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80095ee:	d01e      	beq.n	800962e <__gethex+0x3ce>
 80095f0:	3101      	adds	r1, #1
 80095f2:	f8cc 1000 	str.w	r1, [ip]
 80095f6:	f1b8 0f02 	cmp.w	r8, #2
 80095fa:	f104 0214 	add.w	r2, r4, #20
 80095fe:	d13d      	bne.n	800967c <__gethex+0x41c>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	3b01      	subs	r3, #1
 8009604:	42ab      	cmp	r3, r5
 8009606:	d10b      	bne.n	8009620 <__gethex+0x3c0>
 8009608:	1169      	asrs	r1, r5, #5
 800960a:	2301      	movs	r3, #1
 800960c:	f005 051f 	and.w	r5, r5, #31
 8009610:	fa03 f505 	lsl.w	r5, r3, r5
 8009614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009618:	421d      	tst	r5, r3
 800961a:	bf18      	it	ne
 800961c:	f04f 0801 	movne.w	r8, #1
 8009620:	f048 0820 	orr.w	r8, r8, #32
 8009624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009626:	601c      	str	r4, [r3, #0]
 8009628:	9b02      	ldr	r3, [sp, #8]
 800962a:	601e      	str	r6, [r3, #0]
 800962c:	e6a2      	b.n	8009374 <__gethex+0x114>
 800962e:	4290      	cmp	r0, r2
 8009630:	f842 3c04 	str.w	r3, [r2, #-4]
 8009634:	d8d6      	bhi.n	80095e4 <__gethex+0x384>
 8009636:	68a2      	ldr	r2, [r4, #8]
 8009638:	4593      	cmp	fp, r2
 800963a:	db17      	blt.n	800966c <__gethex+0x40c>
 800963c:	6861      	ldr	r1, [r4, #4]
 800963e:	4648      	mov	r0, r9
 8009640:	3101      	adds	r1, #1
 8009642:	f7fd fb53 	bl	8006cec <_Balloc>
 8009646:	4682      	mov	sl, r0
 8009648:	b918      	cbnz	r0, 8009652 <__gethex+0x3f2>
 800964a:	4b1b      	ldr	r3, [pc, #108]	; (80096b8 <__gethex+0x458>)
 800964c:	4602      	mov	r2, r0
 800964e:	2184      	movs	r1, #132	; 0x84
 8009650:	e6b3      	b.n	80093ba <__gethex+0x15a>
 8009652:	6922      	ldr	r2, [r4, #16]
 8009654:	3202      	adds	r2, #2
 8009656:	f104 010c 	add.w	r1, r4, #12
 800965a:	0092      	lsls	r2, r2, #2
 800965c:	300c      	adds	r0, #12
 800965e:	f7ff fd4d 	bl	80090fc <memcpy>
 8009662:	4621      	mov	r1, r4
 8009664:	4648      	mov	r0, r9
 8009666:	f7fd fb81 	bl	8006d6c <_Bfree>
 800966a:	4654      	mov	r4, sl
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	1c51      	adds	r1, r2, #1
 8009670:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009674:	6121      	str	r1, [r4, #16]
 8009676:	2101      	movs	r1, #1
 8009678:	6151      	str	r1, [r2, #20]
 800967a:	e7bc      	b.n	80095f6 <__gethex+0x396>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	4559      	cmp	r1, fp
 8009680:	dd0b      	ble.n	800969a <__gethex+0x43a>
 8009682:	2101      	movs	r1, #1
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff fd83 	bl	8009190 <rshift>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	3601      	adds	r6, #1
 800968e:	42b3      	cmp	r3, r6
 8009690:	f6ff aedb 	blt.w	800944a <__gethex+0x1ea>
 8009694:	f04f 0801 	mov.w	r8, #1
 8009698:	e7c2      	b.n	8009620 <__gethex+0x3c0>
 800969a:	f015 051f 	ands.w	r5, r5, #31
 800969e:	d0f9      	beq.n	8009694 <__gethex+0x434>
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	441a      	add	r2, r3
 80096a4:	f1c5 0520 	rsb	r5, r5, #32
 80096a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80096ac:	f7fd fc10 	bl	8006ed0 <__hi0bits>
 80096b0:	42a8      	cmp	r0, r5
 80096b2:	dbe6      	blt.n	8009682 <__gethex+0x422>
 80096b4:	e7ee      	b.n	8009694 <__gethex+0x434>
 80096b6:	bf00      	nop
 80096b8:	0800a0bf 	.word	0x0800a0bf

080096bc <L_shift>:
 80096bc:	f1c2 0208 	rsb	r2, r2, #8
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	f1c2 0620 	rsb	r6, r2, #32
 80096c8:	6843      	ldr	r3, [r0, #4]
 80096ca:	6804      	ldr	r4, [r0, #0]
 80096cc:	fa03 f506 	lsl.w	r5, r3, r6
 80096d0:	432c      	orrs	r4, r5
 80096d2:	40d3      	lsrs	r3, r2
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096da:	4288      	cmp	r0, r1
 80096dc:	d3f4      	bcc.n	80096c8 <L_shift+0xc>
 80096de:	bd70      	pop	{r4, r5, r6, pc}

080096e0 <__match>:
 80096e0:	b530      	push	{r4, r5, lr}
 80096e2:	6803      	ldr	r3, [r0, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ea:	b914      	cbnz	r4, 80096f2 <__match+0x12>
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	2001      	movs	r0, #1
 80096f0:	bd30      	pop	{r4, r5, pc}
 80096f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096fa:	2d19      	cmp	r5, #25
 80096fc:	bf98      	it	ls
 80096fe:	3220      	addls	r2, #32
 8009700:	42a2      	cmp	r2, r4
 8009702:	d0f0      	beq.n	80096e6 <__match+0x6>
 8009704:	2000      	movs	r0, #0
 8009706:	e7f3      	b.n	80096f0 <__match+0x10>

08009708 <__hexnan>:
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	680b      	ldr	r3, [r1, #0]
 800970e:	6801      	ldr	r1, [r0, #0]
 8009710:	115e      	asrs	r6, r3, #5
 8009712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009716:	f013 031f 	ands.w	r3, r3, #31
 800971a:	b087      	sub	sp, #28
 800971c:	bf18      	it	ne
 800971e:	3604      	addne	r6, #4
 8009720:	2500      	movs	r5, #0
 8009722:	1f37      	subs	r7, r6, #4
 8009724:	4682      	mov	sl, r0
 8009726:	4690      	mov	r8, r2
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	f846 5c04 	str.w	r5, [r6, #-4]
 800972e:	46b9      	mov	r9, r7
 8009730:	463c      	mov	r4, r7
 8009732:	9502      	str	r5, [sp, #8]
 8009734:	46ab      	mov	fp, r5
 8009736:	784a      	ldrb	r2, [r1, #1]
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	b342      	cbz	r2, 8009790 <__hexnan+0x88>
 800973e:	4610      	mov	r0, r2
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	9204      	str	r2, [sp, #16]
 8009744:	f7ff fd76 	bl	8009234 <__hexdig_fun>
 8009748:	2800      	cmp	r0, #0
 800974a:	d14f      	bne.n	80097ec <__hexnan+0xe4>
 800974c:	9a04      	ldr	r2, [sp, #16]
 800974e:	9905      	ldr	r1, [sp, #20]
 8009750:	2a20      	cmp	r2, #32
 8009752:	d818      	bhi.n	8009786 <__hexnan+0x7e>
 8009754:	9b02      	ldr	r3, [sp, #8]
 8009756:	459b      	cmp	fp, r3
 8009758:	dd13      	ble.n	8009782 <__hexnan+0x7a>
 800975a:	454c      	cmp	r4, r9
 800975c:	d206      	bcs.n	800976c <__hexnan+0x64>
 800975e:	2d07      	cmp	r5, #7
 8009760:	dc04      	bgt.n	800976c <__hexnan+0x64>
 8009762:	462a      	mov	r2, r5
 8009764:	4649      	mov	r1, r9
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff ffa8 	bl	80096bc <L_shift>
 800976c:	4544      	cmp	r4, r8
 800976e:	d950      	bls.n	8009812 <__hexnan+0x10a>
 8009770:	2300      	movs	r3, #0
 8009772:	f1a4 0904 	sub.w	r9, r4, #4
 8009776:	f844 3c04 	str.w	r3, [r4, #-4]
 800977a:	f8cd b008 	str.w	fp, [sp, #8]
 800977e:	464c      	mov	r4, r9
 8009780:	461d      	mov	r5, r3
 8009782:	9903      	ldr	r1, [sp, #12]
 8009784:	e7d7      	b.n	8009736 <__hexnan+0x2e>
 8009786:	2a29      	cmp	r2, #41	; 0x29
 8009788:	d155      	bne.n	8009836 <__hexnan+0x12e>
 800978a:	3102      	adds	r1, #2
 800978c:	f8ca 1000 	str.w	r1, [sl]
 8009790:	f1bb 0f00 	cmp.w	fp, #0
 8009794:	d04f      	beq.n	8009836 <__hexnan+0x12e>
 8009796:	454c      	cmp	r4, r9
 8009798:	d206      	bcs.n	80097a8 <__hexnan+0xa0>
 800979a:	2d07      	cmp	r5, #7
 800979c:	dc04      	bgt.n	80097a8 <__hexnan+0xa0>
 800979e:	462a      	mov	r2, r5
 80097a0:	4649      	mov	r1, r9
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff ff8a 	bl	80096bc <L_shift>
 80097a8:	4544      	cmp	r4, r8
 80097aa:	d934      	bls.n	8009816 <__hexnan+0x10e>
 80097ac:	f1a8 0204 	sub.w	r2, r8, #4
 80097b0:	4623      	mov	r3, r4
 80097b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80097b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80097ba:	429f      	cmp	r7, r3
 80097bc:	d2f9      	bcs.n	80097b2 <__hexnan+0xaa>
 80097be:	1b3b      	subs	r3, r7, r4
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	3304      	adds	r3, #4
 80097c6:	3e03      	subs	r6, #3
 80097c8:	3401      	adds	r4, #1
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	bf38      	it	cc
 80097ce:	2304      	movcc	r3, #4
 80097d0:	4443      	add	r3, r8
 80097d2:	2200      	movs	r2, #0
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	429f      	cmp	r7, r3
 80097da:	d2fb      	bcs.n	80097d4 <__hexnan+0xcc>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	b91b      	cbnz	r3, 80097e8 <__hexnan+0xe0>
 80097e0:	4547      	cmp	r7, r8
 80097e2:	d126      	bne.n	8009832 <__hexnan+0x12a>
 80097e4:	2301      	movs	r3, #1
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	2005      	movs	r0, #5
 80097ea:	e025      	b.n	8009838 <__hexnan+0x130>
 80097ec:	3501      	adds	r5, #1
 80097ee:	2d08      	cmp	r5, #8
 80097f0:	f10b 0b01 	add.w	fp, fp, #1
 80097f4:	dd06      	ble.n	8009804 <__hexnan+0xfc>
 80097f6:	4544      	cmp	r4, r8
 80097f8:	d9c3      	bls.n	8009782 <__hexnan+0x7a>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009800:	2501      	movs	r5, #1
 8009802:	3c04      	subs	r4, #4
 8009804:	6822      	ldr	r2, [r4, #0]
 8009806:	f000 000f 	and.w	r0, r0, #15
 800980a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	e7b7      	b.n	8009782 <__hexnan+0x7a>
 8009812:	2508      	movs	r5, #8
 8009814:	e7b5      	b.n	8009782 <__hexnan+0x7a>
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0df      	beq.n	80097dc <__hexnan+0xd4>
 800981c:	f1c3 0320 	rsb	r3, r3, #32
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	40da      	lsrs	r2, r3
 8009826:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800982a:	4013      	ands	r3, r2
 800982c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009830:	e7d4      	b.n	80097dc <__hexnan+0xd4>
 8009832:	3f04      	subs	r7, #4
 8009834:	e7d2      	b.n	80097dc <__hexnan+0xd4>
 8009836:	2004      	movs	r0, #4
 8009838:	b007      	add	sp, #28
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800983e <__ascii_mbtowc>:
 800983e:	b082      	sub	sp, #8
 8009840:	b901      	cbnz	r1, 8009844 <__ascii_mbtowc+0x6>
 8009842:	a901      	add	r1, sp, #4
 8009844:	b142      	cbz	r2, 8009858 <__ascii_mbtowc+0x1a>
 8009846:	b14b      	cbz	r3, 800985c <__ascii_mbtowc+0x1e>
 8009848:	7813      	ldrb	r3, [r2, #0]
 800984a:	600b      	str	r3, [r1, #0]
 800984c:	7812      	ldrb	r2, [r2, #0]
 800984e:	1e10      	subs	r0, r2, #0
 8009850:	bf18      	it	ne
 8009852:	2001      	movne	r0, #1
 8009854:	b002      	add	sp, #8
 8009856:	4770      	bx	lr
 8009858:	4610      	mov	r0, r2
 800985a:	e7fb      	b.n	8009854 <__ascii_mbtowc+0x16>
 800985c:	f06f 0001 	mvn.w	r0, #1
 8009860:	e7f8      	b.n	8009854 <__ascii_mbtowc+0x16>

08009862 <_realloc_r>:
 8009862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009866:	4680      	mov	r8, r0
 8009868:	4614      	mov	r4, r2
 800986a:	460e      	mov	r6, r1
 800986c:	b921      	cbnz	r1, 8009878 <_realloc_r+0x16>
 800986e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	4611      	mov	r1, r2
 8009874:	f7fd b9ae 	b.w	8006bd4 <_malloc_r>
 8009878:	b92a      	cbnz	r2, 8009886 <_realloc_r+0x24>
 800987a:	f7fd f937 	bl	8006aec <_free_r>
 800987e:	4625      	mov	r5, r4
 8009880:	4628      	mov	r0, r5
 8009882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009886:	f000 f93a 	bl	8009afe <_malloc_usable_size_r>
 800988a:	4284      	cmp	r4, r0
 800988c:	4607      	mov	r7, r0
 800988e:	d802      	bhi.n	8009896 <_realloc_r+0x34>
 8009890:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009894:	d812      	bhi.n	80098bc <_realloc_r+0x5a>
 8009896:	4621      	mov	r1, r4
 8009898:	4640      	mov	r0, r8
 800989a:	f7fd f99b 	bl	8006bd4 <_malloc_r>
 800989e:	4605      	mov	r5, r0
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d0ed      	beq.n	8009880 <_realloc_r+0x1e>
 80098a4:	42bc      	cmp	r4, r7
 80098a6:	4622      	mov	r2, r4
 80098a8:	4631      	mov	r1, r6
 80098aa:	bf28      	it	cs
 80098ac:	463a      	movcs	r2, r7
 80098ae:	f7ff fc25 	bl	80090fc <memcpy>
 80098b2:	4631      	mov	r1, r6
 80098b4:	4640      	mov	r0, r8
 80098b6:	f7fd f919 	bl	8006aec <_free_r>
 80098ba:	e7e1      	b.n	8009880 <_realloc_r+0x1e>
 80098bc:	4635      	mov	r5, r6
 80098be:	e7df      	b.n	8009880 <_realloc_r+0x1e>

080098c0 <_strtoul_l.constprop.0>:
 80098c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4f36      	ldr	r7, [pc, #216]	; (80099a0 <_strtoul_l.constprop.0+0xe0>)
 80098c6:	4686      	mov	lr, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	4628      	mov	r0, r5
 80098cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d0:	5d3e      	ldrb	r6, [r7, r4]
 80098d2:	f016 0608 	ands.w	r6, r6, #8
 80098d6:	d1f8      	bne.n	80098ca <_strtoul_l.constprop.0+0xa>
 80098d8:	2c2d      	cmp	r4, #45	; 0x2d
 80098da:	d130      	bne.n	800993e <_strtoul_l.constprop.0+0x7e>
 80098dc:	782c      	ldrb	r4, [r5, #0]
 80098de:	2601      	movs	r6, #1
 80098e0:	1c85      	adds	r5, r0, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d057      	beq.n	8009996 <_strtoul_l.constprop.0+0xd6>
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d109      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 80098ea:	2c30      	cmp	r4, #48	; 0x30
 80098ec:	d107      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 80098ee:	7828      	ldrb	r0, [r5, #0]
 80098f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098f4:	2858      	cmp	r0, #88	; 0x58
 80098f6:	d149      	bne.n	800998c <_strtoul_l.constprop.0+0xcc>
 80098f8:	786c      	ldrb	r4, [r5, #1]
 80098fa:	2310      	movs	r3, #16
 80098fc:	3502      	adds	r5, #2
 80098fe:	f04f 38ff 	mov.w	r8, #4294967295
 8009902:	2700      	movs	r7, #0
 8009904:	fbb8 f8f3 	udiv	r8, r8, r3
 8009908:	fb03 f908 	mul.w	r9, r3, r8
 800990c:	ea6f 0909 	mvn.w	r9, r9
 8009910:	4638      	mov	r0, r7
 8009912:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009916:	f1bc 0f09 	cmp.w	ip, #9
 800991a:	d815      	bhi.n	8009948 <_strtoul_l.constprop.0+0x88>
 800991c:	4664      	mov	r4, ip
 800991e:	42a3      	cmp	r3, r4
 8009920:	dd23      	ble.n	800996a <_strtoul_l.constprop.0+0xaa>
 8009922:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009926:	d007      	beq.n	8009938 <_strtoul_l.constprop.0+0x78>
 8009928:	4580      	cmp	r8, r0
 800992a:	d31b      	bcc.n	8009964 <_strtoul_l.constprop.0+0xa4>
 800992c:	d101      	bne.n	8009932 <_strtoul_l.constprop.0+0x72>
 800992e:	45a1      	cmp	r9, r4
 8009930:	db18      	blt.n	8009964 <_strtoul_l.constprop.0+0xa4>
 8009932:	fb00 4003 	mla	r0, r0, r3, r4
 8009936:	2701      	movs	r7, #1
 8009938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800993c:	e7e9      	b.n	8009912 <_strtoul_l.constprop.0+0x52>
 800993e:	2c2b      	cmp	r4, #43	; 0x2b
 8009940:	bf04      	itt	eq
 8009942:	782c      	ldrbeq	r4, [r5, #0]
 8009944:	1c85      	addeq	r5, r0, #2
 8009946:	e7cc      	b.n	80098e2 <_strtoul_l.constprop.0+0x22>
 8009948:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800994c:	f1bc 0f19 	cmp.w	ip, #25
 8009950:	d801      	bhi.n	8009956 <_strtoul_l.constprop.0+0x96>
 8009952:	3c37      	subs	r4, #55	; 0x37
 8009954:	e7e3      	b.n	800991e <_strtoul_l.constprop.0+0x5e>
 8009956:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800995a:	f1bc 0f19 	cmp.w	ip, #25
 800995e:	d804      	bhi.n	800996a <_strtoul_l.constprop.0+0xaa>
 8009960:	3c57      	subs	r4, #87	; 0x57
 8009962:	e7dc      	b.n	800991e <_strtoul_l.constprop.0+0x5e>
 8009964:	f04f 37ff 	mov.w	r7, #4294967295
 8009968:	e7e6      	b.n	8009938 <_strtoul_l.constprop.0+0x78>
 800996a:	1c7b      	adds	r3, r7, #1
 800996c:	d106      	bne.n	800997c <_strtoul_l.constprop.0+0xbc>
 800996e:	2322      	movs	r3, #34	; 0x22
 8009970:	f8ce 3000 	str.w	r3, [lr]
 8009974:	4638      	mov	r0, r7
 8009976:	b932      	cbnz	r2, 8009986 <_strtoul_l.constprop.0+0xc6>
 8009978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800997c:	b106      	cbz	r6, 8009980 <_strtoul_l.constprop.0+0xc0>
 800997e:	4240      	negs	r0, r0
 8009980:	2a00      	cmp	r2, #0
 8009982:	d0f9      	beq.n	8009978 <_strtoul_l.constprop.0+0xb8>
 8009984:	b107      	cbz	r7, 8009988 <_strtoul_l.constprop.0+0xc8>
 8009986:	1e69      	subs	r1, r5, #1
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	e7f5      	b.n	8009978 <_strtoul_l.constprop.0+0xb8>
 800998c:	2430      	movs	r4, #48	; 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1b5      	bne.n	80098fe <_strtoul_l.constprop.0+0x3e>
 8009992:	2308      	movs	r3, #8
 8009994:	e7b3      	b.n	80098fe <_strtoul_l.constprop.0+0x3e>
 8009996:	2c30      	cmp	r4, #48	; 0x30
 8009998:	d0a9      	beq.n	80098ee <_strtoul_l.constprop.0+0x2e>
 800999a:	230a      	movs	r3, #10
 800999c:	e7af      	b.n	80098fe <_strtoul_l.constprop.0+0x3e>
 800999e:	bf00      	nop
 80099a0:	0800a281 	.word	0x0800a281

080099a4 <_strtoul_r>:
 80099a4:	f7ff bf8c 	b.w	80098c0 <_strtoul_l.constprop.0>

080099a8 <__ascii_wctomb>:
 80099a8:	b149      	cbz	r1, 80099be <__ascii_wctomb+0x16>
 80099aa:	2aff      	cmp	r2, #255	; 0xff
 80099ac:	bf85      	ittet	hi
 80099ae:	238a      	movhi	r3, #138	; 0x8a
 80099b0:	6003      	strhi	r3, [r0, #0]
 80099b2:	700a      	strbls	r2, [r1, #0]
 80099b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80099b8:	bf98      	it	ls
 80099ba:	2001      	movls	r0, #1
 80099bc:	4770      	bx	lr
 80099be:	4608      	mov	r0, r1
 80099c0:	4770      	bx	lr
	...

080099c4 <fiprintf>:
 80099c4:	b40e      	push	{r1, r2, r3}
 80099c6:	b503      	push	{r0, r1, lr}
 80099c8:	4601      	mov	r1, r0
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <fiprintf+0x20>)
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	6800      	ldr	r0, [r0, #0]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	f000 f8c3 	bl	8009b60 <_vfiprintf_r>
 80099da:	b002      	add	sp, #8
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b003      	add	sp, #12
 80099e2:	4770      	bx	lr
 80099e4:	20000064 	.word	0x20000064

080099e8 <__swhatbuf_r>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	460c      	mov	r4, r1
 80099ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f0:	2900      	cmp	r1, #0
 80099f2:	b096      	sub	sp, #88	; 0x58
 80099f4:	4615      	mov	r5, r2
 80099f6:	461e      	mov	r6, r3
 80099f8:	da0d      	bge.n	8009a16 <__swhatbuf_r+0x2e>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a00:	f04f 0100 	mov.w	r1, #0
 8009a04:	bf0c      	ite	eq
 8009a06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009a0a:	2340      	movne	r3, #64	; 0x40
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	6031      	str	r1, [r6, #0]
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	b016      	add	sp, #88	; 0x58
 8009a14:	bd70      	pop	{r4, r5, r6, pc}
 8009a16:	466a      	mov	r2, sp
 8009a18:	f000 f848 	bl	8009aac <_fstat_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	dbec      	blt.n	80099fa <__swhatbuf_r+0x12>
 8009a20:	9901      	ldr	r1, [sp, #4]
 8009a22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a2a:	4259      	negs	r1, r3
 8009a2c:	4159      	adcs	r1, r3
 8009a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a32:	e7eb      	b.n	8009a0c <__swhatbuf_r+0x24>

08009a34 <__smakebuf_r>:
 8009a34:	898b      	ldrh	r3, [r1, #12]
 8009a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a38:	079d      	lsls	r5, r3, #30
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	d507      	bpl.n	8009a50 <__smakebuf_r+0x1c>
 8009a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	6163      	str	r3, [r4, #20]
 8009a4c:	b002      	add	sp, #8
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	ab01      	add	r3, sp, #4
 8009a52:	466a      	mov	r2, sp
 8009a54:	f7ff ffc8 	bl	80099e8 <__swhatbuf_r>
 8009a58:	9900      	ldr	r1, [sp, #0]
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7fd f8b9 	bl	8006bd4 <_malloc_r>
 8009a62:	b948      	cbnz	r0, 8009a78 <__smakebuf_r+0x44>
 8009a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a68:	059a      	lsls	r2, r3, #22
 8009a6a:	d4ef      	bmi.n	8009a4c <__smakebuf_r+0x18>
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	f043 0302 	orr.w	r3, r3, #2
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	e7e3      	b.n	8009a40 <__smakebuf_r+0xc>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	6020      	str	r0, [r4, #0]
 8009a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	6163      	str	r3, [r4, #20]
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	6120      	str	r0, [r4, #16]
 8009a8a:	b15b      	cbz	r3, 8009aa4 <__smakebuf_r+0x70>
 8009a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a90:	4630      	mov	r0, r6
 8009a92:	f000 f81d 	bl	8009ad0 <_isatty_r>
 8009a96:	b128      	cbz	r0, 8009aa4 <__smakebuf_r+0x70>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	431d      	orrs	r5, r3
 8009aa8:	81a5      	strh	r5, [r4, #12]
 8009aaa:	e7cf      	b.n	8009a4c <__smakebuf_r+0x18>

08009aac <_fstat_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_fstat_r+0x20>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	f7f8 f90a 	bl	8001cd2 <_fstat>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d102      	bne.n	8009ac8 <_fstat_r+0x1c>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	b103      	cbz	r3, 8009ac8 <_fstat_r+0x1c>
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	20000b1c 	.word	0x20000b1c

08009ad0 <_isatty_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	; (8009aec <_isatty_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7f8 f909 	bl	8001cf2 <_isatty>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_isatty_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_isatty_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20000b1c 	.word	0x20000b1c

08009af0 <abort>:
 8009af0:	b508      	push	{r3, lr}
 8009af2:	2006      	movs	r0, #6
 8009af4:	f000 fa0c 	bl	8009f10 <raise>
 8009af8:	2001      	movs	r0, #1
 8009afa:	f7f8 f89b 	bl	8001c34 <_exit>

08009afe <_malloc_usable_size_r>:
 8009afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b02:	1f18      	subs	r0, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfbc      	itt	lt
 8009b08:	580b      	ldrlt	r3, [r1, r0]
 8009b0a:	18c0      	addlt	r0, r0, r3
 8009b0c:	4770      	bx	lr

08009b0e <__sfputc_r>:
 8009b0e:	6893      	ldr	r3, [r2, #8]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	b410      	push	{r4}
 8009b16:	6093      	str	r3, [r2, #8]
 8009b18:	da08      	bge.n	8009b2c <__sfputc_r+0x1e>
 8009b1a:	6994      	ldr	r4, [r2, #24]
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	db01      	blt.n	8009b24 <__sfputc_r+0x16>
 8009b20:	290a      	cmp	r1, #10
 8009b22:	d103      	bne.n	8009b2c <__sfputc_r+0x1e>
 8009b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b28:	f000 b934 	b.w	8009d94 <__swbuf_r>
 8009b2c:	6813      	ldr	r3, [r2, #0]
 8009b2e:	1c58      	adds	r0, r3, #1
 8009b30:	6010      	str	r0, [r2, #0]
 8009b32:	7019      	strb	r1, [r3, #0]
 8009b34:	4608      	mov	r0, r1
 8009b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <__sfputs_r>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	4614      	mov	r4, r2
 8009b44:	18d5      	adds	r5, r2, r3
 8009b46:	42ac      	cmp	r4, r5
 8009b48:	d101      	bne.n	8009b4e <__sfputs_r+0x12>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e007      	b.n	8009b5e <__sfputs_r+0x22>
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	463a      	mov	r2, r7
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ffda 	bl	8009b0e <__sfputc_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d1f3      	bne.n	8009b46 <__sfputs_r+0xa>
 8009b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b60 <_vfiprintf_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	460d      	mov	r5, r1
 8009b66:	b09d      	sub	sp, #116	; 0x74
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4698      	mov	r8, r3
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	b118      	cbz	r0, 8009b78 <_vfiprintf_r+0x18>
 8009b70:	6a03      	ldr	r3, [r0, #32]
 8009b72:	b90b      	cbnz	r3, 8009b78 <_vfiprintf_r+0x18>
 8009b74:	f7fb ffba 	bl	8005aec <__sinit>
 8009b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	d405      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	059a      	lsls	r2, r3, #22
 8009b82:	d402      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b86:	f7fc f924 	bl	8005dd2 <__retarget_lock_acquire_recursive>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	071b      	lsls	r3, r3, #28
 8009b8e:	d501      	bpl.n	8009b94 <_vfiprintf_r+0x34>
 8009b90:	692b      	ldr	r3, [r5, #16]
 8009b92:	b99b      	cbnz	r3, 8009bbc <_vfiprintf_r+0x5c>
 8009b94:	4629      	mov	r1, r5
 8009b96:	4630      	mov	r0, r6
 8009b98:	f000 f93a 	bl	8009e10 <__swsetup_r>
 8009b9c:	b170      	cbz	r0, 8009bbc <_vfiprintf_r+0x5c>
 8009b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba0:	07dc      	lsls	r4, r3, #31
 8009ba2:	d504      	bpl.n	8009bae <_vfiprintf_r+0x4e>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b01d      	add	sp, #116	; 0x74
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	0598      	lsls	r0, r3, #22
 8009bb2:	d4f7      	bmi.n	8009ba4 <_vfiprintf_r+0x44>
 8009bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb6:	f7fc f90d 	bl	8005dd4 <__retarget_lock_release_recursive>
 8009bba:	e7f3      	b.n	8009ba4 <_vfiprintf_r+0x44>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bca:	2330      	movs	r3, #48	; 0x30
 8009bcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d80 <_vfiprintf_r+0x220>
 8009bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bd4:	f04f 0901 	mov.w	r9, #1
 8009bd8:	4623      	mov	r3, r4
 8009bda:	469a      	mov	sl, r3
 8009bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be0:	b10a      	cbz	r2, 8009be6 <_vfiprintf_r+0x86>
 8009be2:	2a25      	cmp	r2, #37	; 0x25
 8009be4:	d1f9      	bne.n	8009bda <_vfiprintf_r+0x7a>
 8009be6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bea:	d00b      	beq.n	8009c04 <_vfiprintf_r+0xa4>
 8009bec:	465b      	mov	r3, fp
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa2 	bl	8009b3c <__sfputs_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f000 80a9 	beq.w	8009d50 <_vfiprintf_r+0x1f0>
 8009bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c00:	445a      	add	r2, fp
 8009c02:	9209      	str	r2, [sp, #36]	; 0x24
 8009c04:	f89a 3000 	ldrb.w	r3, [sl]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80a1 	beq.w	8009d50 <_vfiprintf_r+0x1f0>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295
 8009c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c18:	f10a 0a01 	add.w	sl, sl, #1
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c24:	931a      	str	r3, [sp, #104]	; 0x68
 8009c26:	4654      	mov	r4, sl
 8009c28:	2205      	movs	r2, #5
 8009c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2e:	4854      	ldr	r0, [pc, #336]	; (8009d80 <_vfiprintf_r+0x220>)
 8009c30:	f7f6 face 	bl	80001d0 <memchr>
 8009c34:	9a04      	ldr	r2, [sp, #16]
 8009c36:	b9d8      	cbnz	r0, 8009c70 <_vfiprintf_r+0x110>
 8009c38:	06d1      	lsls	r1, r2, #27
 8009c3a:	bf44      	itt	mi
 8009c3c:	2320      	movmi	r3, #32
 8009c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c42:	0713      	lsls	r3, r2, #28
 8009c44:	bf44      	itt	mi
 8009c46:	232b      	movmi	r3, #43	; 0x2b
 8009c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c50:	2b2a      	cmp	r3, #42	; 0x2a
 8009c52:	d015      	beq.n	8009c80 <_vfiprintf_r+0x120>
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	4654      	mov	r4, sl
 8009c58:	2000      	movs	r0, #0
 8009c5a:	f04f 0c0a 	mov.w	ip, #10
 8009c5e:	4621      	mov	r1, r4
 8009c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c64:	3b30      	subs	r3, #48	; 0x30
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d94d      	bls.n	8009d06 <_vfiprintf_r+0x1a6>
 8009c6a:	b1b0      	cbz	r0, 8009c9a <_vfiprintf_r+0x13a>
 8009c6c:	9207      	str	r2, [sp, #28]
 8009c6e:	e014      	b.n	8009c9a <_vfiprintf_r+0x13a>
 8009c70:	eba0 0308 	sub.w	r3, r0, r8
 8009c74:	fa09 f303 	lsl.w	r3, r9, r3
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	46a2      	mov	sl, r4
 8009c7e:	e7d2      	b.n	8009c26 <_vfiprintf_r+0xc6>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	1d19      	adds	r1, r3, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	9103      	str	r1, [sp, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfbb      	ittet	lt
 8009c8c:	425b      	neglt	r3, r3
 8009c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c92:	9307      	strge	r3, [sp, #28]
 8009c94:	9307      	strlt	r3, [sp, #28]
 8009c96:	bfb8      	it	lt
 8009c98:	9204      	strlt	r2, [sp, #16]
 8009c9a:	7823      	ldrb	r3, [r4, #0]
 8009c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c9e:	d10c      	bne.n	8009cba <_vfiprintf_r+0x15a>
 8009ca0:	7863      	ldrb	r3, [r4, #1]
 8009ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca4:	d134      	bne.n	8009d10 <_vfiprintf_r+0x1b0>
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	1d1a      	adds	r2, r3, #4
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	9203      	str	r2, [sp, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bfb8      	it	lt
 8009cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cb6:	3402      	adds	r4, #2
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d90 <_vfiprintf_r+0x230>
 8009cbe:	7821      	ldrb	r1, [r4, #0]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f7f6 fa84 	bl	80001d0 <memchr>
 8009cc8:	b138      	cbz	r0, 8009cda <_vfiprintf_r+0x17a>
 8009cca:	9b04      	ldr	r3, [sp, #16]
 8009ccc:	eba0 000a 	sub.w	r0, r0, sl
 8009cd0:	2240      	movs	r2, #64	; 0x40
 8009cd2:	4082      	lsls	r2, r0
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	9304      	str	r3, [sp, #16]
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	4829      	ldr	r0, [pc, #164]	; (8009d84 <_vfiprintf_r+0x224>)
 8009ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ce4:	2206      	movs	r2, #6
 8009ce6:	f7f6 fa73 	bl	80001d0 <memchr>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d03f      	beq.n	8009d6e <_vfiprintf_r+0x20e>
 8009cee:	4b26      	ldr	r3, [pc, #152]	; (8009d88 <_vfiprintf_r+0x228>)
 8009cf0:	bb1b      	cbnz	r3, 8009d3a <_vfiprintf_r+0x1da>
 8009cf2:	9b03      	ldr	r3, [sp, #12]
 8009cf4:	3307      	adds	r3, #7
 8009cf6:	f023 0307 	bic.w	r3, r3, #7
 8009cfa:	3308      	adds	r3, #8
 8009cfc:	9303      	str	r3, [sp, #12]
 8009cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d00:	443b      	add	r3, r7
 8009d02:	9309      	str	r3, [sp, #36]	; 0x24
 8009d04:	e768      	b.n	8009bd8 <_vfiprintf_r+0x78>
 8009d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	e7a6      	b.n	8009c5e <_vfiprintf_r+0xfe>
 8009d10:	2300      	movs	r3, #0
 8009d12:	3401      	adds	r4, #1
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	4619      	mov	r1, r3
 8009d18:	f04f 0c0a 	mov.w	ip, #10
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d22:	3a30      	subs	r2, #48	; 0x30
 8009d24:	2a09      	cmp	r2, #9
 8009d26:	d903      	bls.n	8009d30 <_vfiprintf_r+0x1d0>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0c6      	beq.n	8009cba <_vfiprintf_r+0x15a>
 8009d2c:	9105      	str	r1, [sp, #20]
 8009d2e:	e7c4      	b.n	8009cba <_vfiprintf_r+0x15a>
 8009d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d34:	4604      	mov	r4, r0
 8009d36:	2301      	movs	r3, #1
 8009d38:	e7f0      	b.n	8009d1c <_vfiprintf_r+0x1bc>
 8009d3a:	ab03      	add	r3, sp, #12
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	462a      	mov	r2, r5
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <_vfiprintf_r+0x22c>)
 8009d42:	a904      	add	r1, sp, #16
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7fb f86f 	bl	8004e28 <_printf_float>
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	1c78      	adds	r0, r7, #1
 8009d4e:	d1d6      	bne.n	8009cfe <_vfiprintf_r+0x19e>
 8009d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d52:	07d9      	lsls	r1, r3, #31
 8009d54:	d405      	bmi.n	8009d62 <_vfiprintf_r+0x202>
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	059a      	lsls	r2, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_vfiprintf_r+0x202>
 8009d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5e:	f7fc f839 	bl	8005dd4 <__retarget_lock_release_recursive>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	065b      	lsls	r3, r3, #25
 8009d66:	f53f af1d 	bmi.w	8009ba4 <_vfiprintf_r+0x44>
 8009d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d6c:	e71c      	b.n	8009ba8 <_vfiprintf_r+0x48>
 8009d6e:	ab03      	add	r3, sp, #12
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	462a      	mov	r2, r5
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <_vfiprintf_r+0x22c>)
 8009d76:	a904      	add	r1, sp, #16
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7fb faf9 	bl	8005370 <_printf_i>
 8009d7e:	e7e4      	b.n	8009d4a <_vfiprintf_r+0x1ea>
 8009d80:	0800a381 	.word	0x0800a381
 8009d84:	0800a38b 	.word	0x0800a38b
 8009d88:	08004e29 	.word	0x08004e29
 8009d8c:	08009b3d 	.word	0x08009b3d
 8009d90:	0800a387 	.word	0x0800a387

08009d94 <__swbuf_r>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	460e      	mov	r6, r1
 8009d98:	4614      	mov	r4, r2
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	b118      	cbz	r0, 8009da6 <__swbuf_r+0x12>
 8009d9e:	6a03      	ldr	r3, [r0, #32]
 8009da0:	b90b      	cbnz	r3, 8009da6 <__swbuf_r+0x12>
 8009da2:	f7fb fea3 	bl	8005aec <__sinit>
 8009da6:	69a3      	ldr	r3, [r4, #24]
 8009da8:	60a3      	str	r3, [r4, #8]
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	071a      	lsls	r2, r3, #28
 8009dae:	d525      	bpl.n	8009dfc <__swbuf_r+0x68>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	b31b      	cbz	r3, 8009dfc <__swbuf_r+0x68>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	6922      	ldr	r2, [r4, #16]
 8009db8:	1a98      	subs	r0, r3, r2
 8009dba:	6963      	ldr	r3, [r4, #20]
 8009dbc:	b2f6      	uxtb	r6, r6
 8009dbe:	4283      	cmp	r3, r0
 8009dc0:	4637      	mov	r7, r6
 8009dc2:	dc04      	bgt.n	8009dce <__swbuf_r+0x3a>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7fe ffb6 	bl	8008d38 <_fflush_r>
 8009dcc:	b9e0      	cbnz	r0, 8009e08 <__swbuf_r+0x74>
 8009dce:	68a3      	ldr	r3, [r4, #8]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	60a3      	str	r3, [r4, #8]
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	6022      	str	r2, [r4, #0]
 8009dda:	701e      	strb	r6, [r3, #0]
 8009ddc:	6962      	ldr	r2, [r4, #20]
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d004      	beq.n	8009dee <__swbuf_r+0x5a>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	07db      	lsls	r3, r3, #31
 8009de8:	d506      	bpl.n	8009df8 <__swbuf_r+0x64>
 8009dea:	2e0a      	cmp	r6, #10
 8009dec:	d104      	bne.n	8009df8 <__swbuf_r+0x64>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f7fe ffa1 	bl	8008d38 <_fflush_r>
 8009df6:	b938      	cbnz	r0, 8009e08 <__swbuf_r+0x74>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f000 f806 	bl	8009e10 <__swsetup_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d0d5      	beq.n	8009db4 <__swbuf_r+0x20>
 8009e08:	f04f 37ff 	mov.w	r7, #4294967295
 8009e0c:	e7f4      	b.n	8009df8 <__swbuf_r+0x64>
	...

08009e10 <__swsetup_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4b2a      	ldr	r3, [pc, #168]	; (8009ebc <__swsetup_r+0xac>)
 8009e14:	4605      	mov	r5, r0
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	460c      	mov	r4, r1
 8009e1a:	b118      	cbz	r0, 8009e24 <__swsetup_r+0x14>
 8009e1c:	6a03      	ldr	r3, [r0, #32]
 8009e1e:	b90b      	cbnz	r3, 8009e24 <__swsetup_r+0x14>
 8009e20:	f7fb fe64 	bl	8005aec <__sinit>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e2a:	0718      	lsls	r0, r3, #28
 8009e2c:	d422      	bmi.n	8009e74 <__swsetup_r+0x64>
 8009e2e:	06d9      	lsls	r1, r3, #27
 8009e30:	d407      	bmi.n	8009e42 <__swsetup_r+0x32>
 8009e32:	2309      	movs	r3, #9
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e034      	b.n	8009eac <__swsetup_r+0x9c>
 8009e42:	0758      	lsls	r0, r3, #29
 8009e44:	d512      	bpl.n	8009e6c <__swsetup_r+0x5c>
 8009e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e48:	b141      	cbz	r1, 8009e5c <__swsetup_r+0x4c>
 8009e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	d002      	beq.n	8009e58 <__swsetup_r+0x48>
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7fc fe4a 	bl	8006aec <_free_r>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6363      	str	r3, [r4, #52]	; 0x34
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	2300      	movs	r3, #0
 8009e66:	6063      	str	r3, [r4, #4]
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f043 0308 	orr.w	r3, r3, #8
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	b94b      	cbnz	r3, 8009e8c <__swsetup_r+0x7c>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e82:	d003      	beq.n	8009e8c <__swsetup_r+0x7c>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f7ff fdd4 	bl	8009a34 <__smakebuf_r>
 8009e8c:	89a0      	ldrh	r0, [r4, #12]
 8009e8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e92:	f010 0301 	ands.w	r3, r0, #1
 8009e96:	d00a      	beq.n	8009eae <__swsetup_r+0x9e>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60a3      	str	r3, [r4, #8]
 8009e9c:	6963      	ldr	r3, [r4, #20]
 8009e9e:	425b      	negs	r3, r3
 8009ea0:	61a3      	str	r3, [r4, #24]
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	b943      	cbnz	r3, 8009eb8 <__swsetup_r+0xa8>
 8009ea6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009eaa:	d1c4      	bne.n	8009e36 <__swsetup_r+0x26>
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	0781      	lsls	r1, r0, #30
 8009eb0:	bf58      	it	pl
 8009eb2:	6963      	ldrpl	r3, [r4, #20]
 8009eb4:	60a3      	str	r3, [r4, #8]
 8009eb6:	e7f4      	b.n	8009ea2 <__swsetup_r+0x92>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e7f7      	b.n	8009eac <__swsetup_r+0x9c>
 8009ebc:	20000064 	.word	0x20000064

08009ec0 <_raise_r>:
 8009ec0:	291f      	cmp	r1, #31
 8009ec2:	b538      	push	{r3, r4, r5, lr}
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	d904      	bls.n	8009ed4 <_raise_r+0x14>
 8009eca:	2316      	movs	r3, #22
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ed6:	b112      	cbz	r2, 8009ede <_raise_r+0x1e>
 8009ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009edc:	b94b      	cbnz	r3, 8009ef2 <_raise_r+0x32>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f830 	bl	8009f44 <_getpid_r>
 8009ee4:	462a      	mov	r2, r5
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	4620      	mov	r0, r4
 8009eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eee:	f000 b817 	b.w	8009f20 <_kill_r>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d00a      	beq.n	8009f0c <_raise_r+0x4c>
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	d103      	bne.n	8009f02 <_raise_r+0x42>
 8009efa:	2316      	movs	r3, #22
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7e7      	b.n	8009ed2 <_raise_r+0x12>
 8009f02:	2400      	movs	r4, #0
 8009f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f08:	4628      	mov	r0, r5
 8009f0a:	4798      	blx	r3
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7e0      	b.n	8009ed2 <_raise_r+0x12>

08009f10 <raise>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <raise+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7ff bfd3 	b.w	8009ec0 <_raise_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000064 	.word	0x20000064

08009f20 <_kill_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_kill_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7f7 fe71 	bl	8001c14 <_kill>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_kill_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_kill_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000b1c 	.word	0x20000b1c

08009f44 <_getpid_r>:
 8009f44:	f7f7 be5e 	b.w	8001c04 <_getpid>

08009f48 <_init>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr

08009f54 <_fini>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr
